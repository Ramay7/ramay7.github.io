<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yong-Nan Zhu</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-12T16:56:54.038Z</updated>
  <id>http://yoursite.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>N Queens</title>
    <link href="http://yoursite.com/2018/06/13/N-Queens/"/>
    <id>http://yoursite.com/2018/06/13/N-Queens/</id>
    <published>2018-06-12T16:47:23.000Z</published>
    <updated>2018-06-12T16:56:54.038Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Eight_queens_puzzle" target="_blank" rel="noopener">Eight queens puzzle</a> is a well-known problem. It can be solved by common depth-first backtracking algorithm. However, we can use bit manipulation skills to make the algorithm more efficient. In the following code, &#x2018;row&#x2019;, &#x2018;md&#x2019; and &#x2018;cd&#x2019; reference to the restrictions about &#x2018;row&#x2019;, &#x2018;main diagonal&#x2019; and &#x2018;counter diagonal&#x2019; respectively if we enumerate from 0 column to $(N-1)$ column.<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Eight_queens_puzzle&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Eight queens puzzle&lt;/a&gt; is a well-known problem. It can be solved by common depth-first backtracking algorithm. However, we can use bit manipulation skills to make the algorithm more efficient. In the following code, ‘row’, ‘md’ and ‘cd’ reference to the restrictions about ‘row’, ‘main diagonal’ and ‘counter diagonal’ respectively if we enumerate from 0 column to $(N-1)$ column.&lt;br&gt;
    
    </summary>
    
    
      <category term="N-Queens" scheme="http://yoursite.com/tags/N-Queens/"/>
    
  </entry>
  
  <entry>
    <title>四边形不等式优化</title>
    <link href="http://yoursite.com/2016/11/04/%E5%9B%9B%E8%BE%B9%E5%BD%A2%E4%B8%8D%E7%AD%89%E5%BC%8F%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2016/11/04/四边形不等式优化/</id>
    <published>2016-11-04T07:05:43.000Z</published>
    <updated>2018-06-12T13:46:24.852Z</updated>
    
    <content type="html"><![CDATA[<p>&#x5047;&#x5982;&#x5BF9;&#x4E8E;$i &lt; j$&#xFF0C;&#x6709;&#xFF1A;<br>$$w(i,j)+w(i+1,j+1)\leq w(i+1,j)+w(i,j+1)$$<br>&#x79F0;&#x51FD;&#x6570;$w$&#x6EE1;&#x8DB3;&#x56DB;&#x8FB9;&#x5F62;&#x4E0D;&#x7B49;&#x5F0F;&#x3002;<br><a id="more"></a><br>&#x5C06;&#x4E0D;&#x7B49;&#x5F0F;&#x53D8;&#x5F62;&#x5F97;&#xFF1A;<br>$$<br>w(i+1,j+1)- w(i+1,j)\leq w(i,j+1) - w(i,j)<br>$$<br>&#x90A3;&#x4E48;&#x8BC1;&#x660E;&#x51FD;&#x6570;$w$&#x662F;&#x5426;&#x6EE1;&#x8DB3;&#x56DB;&#x8FB9;&#x5F62;&#x4E0D;&#x7B49;&#x5F0F;&#xFF0C;&#x5373;&#x8BC1;&#x660E;&#xFF1A;<br>&#x5F53;$j$&#x56FA;&#x5B9A;&#x4E0D;&#x53D8;&#x65F6;&#x662F;&#x5426;&#x6709;&#xFF1A;$w(i,j+1)-w(i,j)$&#x968F;$i$&#x975E;&#x9012;&#x589E;&#x3002;</p>
<ul>
<li>&#x5B9A;&#x7406;1</li>
</ul>
<p>&#x5982;&#x679C;&#x6709;&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;&#xFF1A;<br>$$<br>m(i,j)=\min_{i &lt; k\leq j}\{ m(i,k-1)+m(k,j)+w(i,j)\} \quad (i &lt; j,m(i,i)=0)<br>$$<br>&#x90A3;&#x4E48;&#x51FD;&#x6570;$m$&#x4E5F;&#x6EE1;&#x8DB3;&#x56DB;&#x8FB9;&#x5F62;&#x4E0D;&#x7B49;&#x5F0F;&#xFF1A;<br>$$<br>m(i,j)+m(i+1,j+1)\leq m(i+1,j)+m(i,j+1),\quad i &lt; j<br>$$</p>
<ul>
<li>&#x5B9A;&#x7406;2</li>
</ul>
<p>&#x5B9A;&#x4E49;$s(i,j)$&#x4E3A;&#x51FD;&#x6570;$m(i,j)$&#x5BF9;&#x5E94;&#x7684;&#x51B3;&#x7B56;&#x53D8;&#x91CF;&#x7684;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x5373;&#xFF1A;<br>$$<br>s(i,j)=\max_{i &lt; k\leq j}\{m(i,j)=w(i,j)+m(i,k-1)+m(k,j)\}<br>$$<br>&#x5E76;&#x4E14;$m(i,j)$&#xFF0C;&#x6EE1;&#x8DB3;&#x56DB;&#x8FB9;&#x5F62;&#x4E0D;&#x7B49;&#x5F0F;&#xFF0C;&#x90A3;&#x4E48;$s(i,j)$&#x5355;&#x8C03;&#xFF0C;&#x5373;&#xFF1A;<br>$$<br>s(i,j)\leq s(i,j+1)\leq s(i+1,j+1)<br>$$<br>&#x56E0;&#x6B64;$m(i,j)$&#x7684;&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;&#x7B49;&#x4EF7;&#x4E8E;&#xFF1A;<br>$$<br>m(i,j)=\min_{s(i,j-1) &lt; k\leq s(i+1,j)}\{ m(i,k-1)+m(k,j)+w(i,j)\} \quad (i&lt; j,m(i,i)=0)<br>$$<br>&#x8FD9;&#x4E2A;&#x8F6C;&#x79FB;&#x7684;&#x590D;&#x6742;&#x5EA6;&#x662F;&#xFF1A;$O(n^2)$&#x3002;</p>
<ul>
<li>&#x73AF;&#x5F62;&#x77F3;&#x5B50;&#x5806;&#x5408;&#x5E76;</li>
</ul>
<p>[HDU 3506]&#xFF1A;&#x7ED9;$n\leq 1000$&#x4E2A;&#x56F4;&#x6210;&#x4E00;&#x5708;&#x7684;&#x77F3;&#x5B50;&#x5806;&#xFF0C;&#x6BCF;&#x6B21;&#x53EF;&#x4EE5;&#x5408;&#x5E76;&#x76F8;&#x90BB;&#x7684;&#x4E24;&#x4E2A;&#x77F3;&#x5B50;&#x5806;&#x6210;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x77F3;&#x5B50;&#x5806;&#xFF0C;&#x5408;&#x5E76;&#x7684;&#x4EE3;&#x4EF7;&#x662F;&#x4E24;&#x5806;&#x77F3;&#x5B50;&#x6570;&#x91CF;&#x4E4B;&#x548C;&#xFF0C;&#x6C42;&#x5C06;$n$&#x5806;&#x77F3;&#x5B50;&#x5408;&#x5E76;&#x6210;&#x4E00;&#x5806;&#x7684;&#x6700;&#x5C0F;&#x4EE3;&#x4EF7;&#xFF1F;</p>
<p>&#x5148;&#x5C06;$n$&#x5806;&#x73AF;&#x5F62;&#x77F3;&#x5B50;&#x5C55;&#x5F00;&#x6210;&#x4E00;&#x6392;$2*n$&#x5806;&#x77F3;&#x5B50;&#x3002;&#x7528;$dp[i][j]$&#x8868;&#x793A;&#x5408;&#x5E76;&#x7B2C;$i$&#x5806;&#x5230;&#x7B2C;$j$&#x5806;&#x77F3;&#x5B50;&#x7684;&#x6700;&#x5C0F;&#x4EE3;&#x4EF7;&#xFF0C;&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;&#xFF1A;<br>$$<br>dp[i][j]=min(dp[i][k]+dp[k+1][j])+cost[i][j]\quad (i\leq k\leq j)<br>$$<br>&#x5229;&#x7528;&#x56DB;&#x8FB9;&#x5F62;&#x4E0D;&#x7B49;&#x5F0F;&#x4F18;&#x5316;&#xFF0C;&#x53EA;&#x9700;&#x8BC1;&#x660E;&#xFF1A;&#x5F53;$j$&#x56FA;&#x5B9A;&#x4E0D;&#x53D8;&#x65F6;&#x662F;&#x5426;&#x6709;$cost[i][j+1]-cost[i][j]$&#x968F;$i$&#x5355;&#x8C03;&#x975E;&#x9012;&#x589E;&#x3002;<br>$$<br>cost[i][j]=\sum_{r=i}^{r=j}data[r] \\<br>cost[i][j+1]-cost[i][j]=data[j+1]<br>$$<br>&#x56E0;&#x4E3A;$j$&#x56FA;&#x5B9A;&#x4E0D;&#x53D8;&#xFF0C;&#x6240;&#x4EE5;&#x5DEE;&#x503C;&#x662F;&#x4E2A;&#x6052;&#x5B9A;&#x503C;&#xFF0C;&#x90A3;&#x4E48;&#x6EE1;&#x8DB3;&#x968F;$i$&#x5355;&#x8C03;&#x975E;&#x9012;&#x589E;&#xFF08;&#x4E0D;&#x53D8;&#xFF09;&#x3002;</p>
<p>&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;$O(n^2)$<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">1010</span> * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> d[MAX_N], sum[MAX_N];</span><br><span class="line"><span class="keyword">int</span> dp[MAX_N][MAX_N], s[MAX_N][MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; ++i) {</span><br><span class="line">		sum[i] = sum[i - <span class="number">1</span>] + d[i];</span><br><span class="line">	}</span><br><span class="line">	d[<span class="number">2</span> * n + <span class="number">1</span>] = d[<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">2</span> * n; ++i) {</span><br><span class="line">		dp[i][i + <span class="number">1</span>] = d[i] + d[i + <span class="number">1</span>];</span><br><span class="line">		s[i][i + <span class="number">1</span>] = i;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">3</span>; len &lt;= n; ++len) {</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= <span class="number">2</span> * n; ++i) {</span><br><span class="line">			<span class="keyword">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line">			dp[i][j] = INT_MAX;</span><br><span class="line">			<span class="keyword">int</span> a = s[i][j - <span class="number">1</span>], b = s[i + <span class="number">1</span>][j];</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> r = a; r &lt;= b; ++r) {</span><br><span class="line">				<span class="keyword">int</span> tmp = dp[i][r] + dp[r + <span class="number">1</span>][j] + sum[j] - sum[i - <span class="number">1</span>];</span><br><span class="line">				<span class="keyword">if</span> (tmp &lt; dp[i][j]) {</span><br><span class="line">					dp[i][j] = tmp;</span><br><span class="line">					s[i][j] = r;</span><br><span class="line">				}</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">int</span> ans = INT_MAX;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">		ans = min(ans, dp[i][i + n - <span class="number">1</span>]);</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n)) {</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;d[i]);</span><br><span class="line">			d[i + n] = d[i];</span><br><span class="line">			dp[i][i] = <span class="number">0</span>;</span><br><span class="line">			s[i][i] = i;</span><br><span class="line">		}</span><br><span class="line">		solve();</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
<ul>
<li>[HDU 2829]:&#x7ED9;$n\leq 1000$&#x4E2A;&#x6B63;&#x6574;&#x6570;&#x6570;&#xFF0C;&#x5B9A;&#x4E49;&#x4E0B;&#x6807;$i\sim j$&#x7684;&#x4E00;&#x4E32;&#x8FDE;&#x7EED;&#x7684;&#x6CA1;&#x88AB;&#x6321;&#x677F;&#x9694;&#x5F00;&#x7684;&#x4E00;&#x4E32;&#x6570;&#x7684;&#x4EF7;&#x503C;&#x4E3A;&#xFF1A;$\sum_{p=i}^{p=j}data[p]\sum_{q=p+1}^{q=j}{data[q]}$&#xFF0C;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x6570;&#x65F6;&#x4EF7;&#x503C;&#x4E3A;0&#xFF0C;&#x9009;&#x62E9;&#x5408;&#x9002;&#x7684;&#x4F4D;&#x7F6E;&#x653E;&#x7F6E;$K\in [0,n)$&#x4E2A;&#x6321;&#x677F;&#xFF0C;&#x4F7F;&#x5F97;&#x6700;&#x7EC8;&#x7684;&#x603B;&#x4EF7;&#x503C;&#x6700;&#x5C0F;&#xFF0C;&#x8F93;&#x51FA;&#x6700;&#x5C0F;&#x603B;&#x4EF7;&#x503C;&#x3002;</li>
</ul>
<p>&#x5B9A;&#x4E49;&#xFF1A;$sum[i]=\sum_{r=1}^{r=i}{data[r]}$&#xFF0C;$fsum[i]=\sum_{r=1}^{r=i}data[r]*sum[r]$<br>$$<br>\begin{aligned}<br>cos[i][j]&amp;=\sum_{p=i}^{p=j}data[p]\sum_{q=p+1}^{q=j}{data[q]} \\<br>&amp;=\sum_{p=i}^{p=j}data[p]*(sum[j]-sum[p]) \\<br>&amp;=sum[j]*(sum[j]-sum[i-1])-(fsum[j]-fsum[i-1])<br>\end{aligned}<br>$$<br>&#x5B9A;&#x4E49;$dp[i][k]$&#x8868;&#x793A;&#x5728;&#x524D;$i$&#x4E2A;&#x6570;&#x653E;&#x7F6E;$k$&#x4E2A;&#x6321;&#x677F;&#x53EF;&#x83B7;&#x5F97;&#x4EF7;&#x503C;&#xFF0C;&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;&#xFF1A;<br>$$<br>dp[i][k]=\min_{0\leq j&lt; i}\{dp[j][k-1]+cost[j+1][i]\}<br>$$<br>&#x8003;&#x8651;&#x56DB;&#x8FB9;&#x5F62;&#x4E0D;&#x7B49;&#x5F0F;&#x4F18;&#x5316;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x8BC1;&#x660E;&#xFF1A;&#x5F53;$j$&#x56FA;&#x5B9A;&#x65F6;&#xFF0C;$cost[i][j+1]-cost[i][j]$&#x968F;$i$&#x5355;&#x8C03;&#x975E;&#x589E;&#x3002;<br>$$<br>\begin{aligned}<br>cost[i][j+1]-cost[i][j]&amp;=({sum[j+1]}^{2}-fsum[j+1])-({sum[j]}^{2}-fsum[j]) \\<br>&amp;+(sum[j]-sum[j+1])*sum[i-1]<br>\end{aligned}<br>$$<br>&#x56E0;&#x4E3A;$sum[r]$&#x662F;&#x5355;&#x8C03;&#x9012;&#x589E;&#x7684;&#xFF0C;&#x6240;&#x4EE5;$(sum[j]-sum[j+1])*sum[i]$&#x5728;$j$&#x56FA;&#x5B9A;&#x7684;&#x6761;&#x4EF6;&#x4E0B;&#x968F;$i$&#x5355;&#x8C03;&#x9012;&#x51CF;&#xFF0C;&#x6EE1;&#x8DB3;&#x56DB;&#x8FB9;&#x5F62;&#x4E0D;&#x7B49;&#x5F0F;&#x4F18;&#x5316;&#x6761;&#x4EF6;&#x3002;</p>
<p>&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;$O(n*K)$&#xFF0C;&#x5E38;&#x6570;&#x6709;&#x70B9;&#x5927;<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> s[MAX_N][MAX_N];</span><br><span class="line">ll data[MAX_N], sum[MAX_N], fsum[MAX_N];</span><br><span class="line">ll cost[MAX_N][MAX_N], dp[MAX_N][MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wyr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; ++j) {</span><br><span class="line">			cost[i][j] = cost[j][i] = sum[j] * (sum[j] - sum[i - <span class="number">1</span>]) - (fsum[j] - fsum[i - <span class="number">1</span>]);</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> (dp));</span><br><span class="line">	<span class="built_in">memset</span>(dp[<span class="number">0</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> (dp[<span class="number">0</span>]));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) { </span><br><span class="line">		dp[i][<span class="number">0</span>] = cost[<span class="number">1</span>][i]; </span><br><span class="line">		s[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; ++k) {</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i) {</span><br><span class="line">			<span class="keyword">if</span> (k &gt;= i) dp[i][k] = <span class="number">0</span>, s[i][k] = i;</span><br><span class="line">			<span class="keyword">else</span> {</span><br><span class="line">				<span class="keyword">int</span> a, b;</span><br><span class="line">				<span class="keyword">if</span> (i == n) a = k - <span class="number">1</span>, b = n - <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">else</span> a = s[i][k - <span class="number">1</span>], b = s[i + <span class="number">1</span>][k];</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = a; j &lt;= b; ++j) {</span><br><span class="line">					<span class="keyword">if</span> (dp[j][k - <span class="number">1</span>] + cost[j + <span class="number">1</span>][i] &lt; dp[i][k]) {</span><br><span class="line">						dp[i][k] = dp[j][k - <span class="number">1</span>] + cost[j + <span class="number">1</span>][i];</span><br><span class="line">						s[i][k] = j;</span><br><span class="line">					}</span><br><span class="line">				}</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, dp[n][m]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m) &amp;&amp; (n + m)) {</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;data[i]);</span><br><span class="line">			sum[i] = sum[i - <span class="number">1</span>] + data[i];</span><br><span class="line">			fsum[i] = fsum[i - <span class="number">1</span>] + data[i] * sum[i];</span><br><span class="line">		}</span><br><span class="line">		wyr();</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
<p>&#x8003;&#x8651;&#x659C;&#x7387;&#x4F18;&#x5316;&#x3002;&#x4EE4;$k&gt;j$&#xFF0C;&#x4E14;&#xFF1A;<br>$$<br>dp[k][p-1]+cost[k+1][i] &lt; dp[j][p-1]+cost[j+1][i]<br>$$<br>&#x5373;&#xFF1A;<br>$$<br>\begin{aligned}<br>dp[k][p-1]+sum[k]*(sum[k]-sum[i-1])-(fsum[k]-fsum[i-1])&amp;&lt; \\<br>dp[j][p-1]+sum[j]*(sum[j]-sum[i-1])-(fsum[j]-fsum[i-1])<br>\end{aligned}<br>$$<br>&#x5316;&#x7B80;&#x5F97;&#x659C;&#x7387;&#x65B9;&#x7A0B;&#xFF1A;<br>$$<br>\frac{(dp[k][p-1]+fsum[k])-(dp[j]+fsum[j])}{sum[k]-sum[j]}\leq sum[i]<br>$$<br>&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;$O(n*K)$<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, K, head, tail;</span><br><span class="line"><span class="keyword">int</span> Q[MAX_N];</span><br><span class="line">ll data[MAX_N], sum[MAX_N], fsum[MAX_N];</span><br><span class="line">ll dp[MAX_N][MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">G</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">return</span> dp[x][id] + fsum[x] - (dp[y][id] + fsum[y]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">S</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">return</span> sum[x] - sum[y];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wyr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">		dp[i][<span class="number">0</span>] = sum[i] * sum[i] - fsum[i];</span><br><span class="line">	}</span><br><span class="line">	dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= K; ++k) {</span><br><span class="line">		head = tail = <span class="number">0</span>;</span><br><span class="line">		Q[++tail] = k - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;= n; ++i) {</span><br><span class="line">			<span class="keyword">while</span> (head &lt; tail &amp;&amp; G(k - <span class="number">1</span>, Q[head + <span class="number">1</span>], Q[head]) &lt;=</span><br><span class="line">						S(Q[head + <span class="number">1</span>], Q[head]) * sum[i]) ++head;</span><br><span class="line">			<span class="keyword">int</span> t = Q[head];</span><br><span class="line">			dp[i][k] = dp[t][k - <span class="number">1</span>] + sum[i] * (sum[i] - sum[t]) - fsum[i] + fsum[t];</span><br><span class="line">			<span class="keyword">while</span> (head &lt; tail &amp;&amp; G(k - <span class="number">1</span>, i, Q[tail]) * S(Q[tail], Q[tail - <span class="number">1</span>]) &lt;=</span><br><span class="line">						G(k - <span class="number">1</span>, Q[tail], Q[tail - <span class="number">1</span>]) * S(i, Q[tail])) --tail;</span><br><span class="line">			Q[++tail] = i;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, dp[n][K]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;K) &amp;&amp; (n + K)) {</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;data[i]);</span><br><span class="line">			sum[i] = sum[i - <span class="number">1</span>] + data[i];</span><br><span class="line">			fsum[i] = fsum[i - <span class="number">1</span>] + data[i] * sum[i];</span><br><span class="line">		}</span><br><span class="line">		wyr();</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;假如对于$i &amp;lt; j$，有：&lt;br&gt;$$w(i,j)+w(i+1,j+1)\leq w(i+1,j)+w(i,j+1)$$&lt;br&gt;称函数$w$满足四边形不等式。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="ACM-ICPC-Template" scheme="http://yoursite.com/tags/ACM-ICPC-Template/"/>
    
      <category term="四边形不等式优化" scheme="http://yoursite.com/tags/%E5%9B%9B%E8%BE%B9%E5%BD%A2%E4%B8%8D%E7%AD%89%E5%BC%8F%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
</feed>
