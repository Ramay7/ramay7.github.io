<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yong-Nan Zhu</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-12T17:12:40.722Z</updated>
  <id>http://yoursite.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>N Queens</title>
    <link href="http://yoursite.com/2018/06/13/N-Queens/"/>
    <id>http://yoursite.com/2018/06/13/N-Queens/</id>
    <published>2018-06-12T16:47:23.000Z</published>
    <updated>2018-06-12T17:12:40.722Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Eight_queens_puzzle" target="_blank" rel="noopener">Eight queens puzzle</a> is a well-known problem. It can be solved by common depth-first backtracking algorithm. However, we can use bit manipulation skills to make the algorithm more efficient. In the following code, <code>row</code>, <code>md</code> and <code>cd</code> reference to the restrictions about <code>row</code>, <code>main diagonal</code> and <code>counter diagonal</code> respectively if we enumerate from 0 column to $(N-1)$ column. Specificialy, <code>row</code> represents all the selected rows. And if we more from the current column to the next column from left to right, namely 0 to $N-1$, the rows <code>md</code> selected on the main diagonal changed to $md &lt;&lt; 1$ when it shows in bit level.  Similarly, the rows <code>cd</code> selected on the counter diagonal changed to $cd &gt;&gt; 1$. Below the code is the accurate runtime on my machine.<br><a id="more"></a></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, MASK;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">NQueen</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> md, <span class="keyword">int</span> cd)</span> </span>{</span><br><span class="line">    ll count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (row != MASK) { <span class="comment">// row &lt; MASK</span></span><br><span class="line">        <span class="keyword">int</span> pos = MASK &amp; (~(row | md | cd)); <span class="comment">// all the candinate rows</span></span><br><span class="line">        <span class="keyword">while</span> (pos) {</span><br><span class="line">            <span class="keyword">int</span> last = pos &amp; (-pos); <span class="comment">// = pos &amp; (~pos + 1) // get the last position which is 1</span></span><br><span class="line">            pos = pos - last;</span><br><span class="line">            count += NQueen(row | last, (md | last) &lt;&lt; <span class="number">1</span>, (cd | last) &gt;&gt; <span class="number">1</span>); <span class="comment">// select row: last</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (N = <span class="number">4</span>; N &lt; <span class="number">20</span>; ++N) {</span><br><span class="line">        MASK = (<span class="number">1</span> &lt;&lt; N) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">double</span> start = clock();</span><br><span class="line">        ll ans = NQueen(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">double</span> elapsed = (clock() - start) / CLOCKS_PER_SEC;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%2d queens: %10lld,\t time elapsed: %.3f second(s)\n&quot;</span>, N, ans, elapsed);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<blockquote>
<p>4 queens:          2,     time elapsed: 0.000 second(s)<br> 5 queens:         10,     time elapsed: 0.000 second(s)<br> 6 queens:          4,     time elapsed: 0.000 second(s)<br> 7 queens:         40,     time elapsed: 0.000 second(s)<br> 8 queens:         92,     time elapsed: 0.000 second(s)<br> 9 queens:        352,     time elapsed: 0.000 second(s)<br>10 queens:        724,     time elapsed: 0.001 second(s)<br>11 queens:       2680,     time elapsed: 0.002 second(s)<br>12 queens:      14200,     time elapsed: 0.012 second(s)<br>13 queens:      73712,     time elapsed: 0.062 second(s)<br>14 queens:     365596,     time elapsed: 0.351 second(s)<br>15 queens:    2279184,     time elapsed: 2.203 second(s)<br>16 queens:   14772512,     time elapsed: 14.722 second(s)<br>17 queens:   95815104,     time elapsed: 104.691 second(s)<br>18 queens:  666090624,     time elapsed: 767.495 second(s)</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Eight_queens_puzzle&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Eight queens puzzle&lt;/a&gt; is a well-known problem. It can be solved by common depth-first backtracking algorithm. However, we can use bit manipulation skills to make the algorithm more efficient. In the following code, &lt;code&gt;row&lt;/code&gt;, &lt;code&gt;md&lt;/code&gt; and &lt;code&gt;cd&lt;/code&gt; reference to the restrictions about &lt;code&gt;row&lt;/code&gt;, &lt;code&gt;main diagonal&lt;/code&gt; and &lt;code&gt;counter diagonal&lt;/code&gt; respectively if we enumerate from 0 column to $(N-1)$ column. Specificialy, &lt;code&gt;row&lt;/code&gt; represents all the selected rows. And if we more from the current column to the next column from left to right, namely 0 to $N-1$, the rows &lt;code&gt;md&lt;/code&gt; selected on the main diagonal changed to $md &amp;lt;&amp;lt; 1$ when it shows in bit level.  Similarly, the rows &lt;code&gt;cd&lt;/code&gt; selected on the counter diagonal changed to $cd &amp;gt;&amp;gt; 1$. Below the code is the accurate runtime on my machine.&lt;br&gt;
    
    </summary>
    
    
      <category term="N-Queens" scheme="http://yoursite.com/tags/N-Queens/"/>
    
  </entry>
  
</feed>
