<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yong-Nan Zhu</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-12T17:12:40.722Z</updated>
  <id>http://yoursite.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>N Queens</title>
    <link href="http://yoursite.com/2018/06/13/N-Queens/"/>
    <id>http://yoursite.com/2018/06/13/N-Queens/</id>
    <published>2018-06-12T16:47:23.000Z</published>
    <updated>2018-06-12T17:12:40.722Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Eight_queens_puzzle" target="_blank" rel="noopener">Eight queens puzzle</a> is a well-known problem. It can be solved by common depth-first backtracking algorithm. However, we can use bit manipulation skills to make the algorithm more efficient. In the following code, <code>row</code>, <code>md</code> and <code>cd</code> reference to the restrictions about <code>row</code>, <code>main diagonal</code> and <code>counter diagonal</code> respectively if we enumerate from 0 column to $(N-1)$ column. Specificialy, <code>row</code> represents all the selected rows. And if we more from the current column to the next column from left to right, namely 0 to $N-1$, the rows <code>md</code> selected on the main diagonal changed to $md &lt;&lt; 1$ when it shows in bit level.  Similarly, the rows <code>cd</code> selected on the counter diagonal changed to $cd &gt;&gt; 1$. Below the code is the accurate runtime on my machine.<br><a id="more"></a></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, MASK;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">NQueen</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> md, <span class="keyword">int</span> cd)</span> </span>{</span><br><span class="line">    ll count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (row != MASK) { <span class="comment">// row &lt; MASK</span></span><br><span class="line">        <span class="keyword">int</span> pos = MASK &amp; (~(row | md | cd)); <span class="comment">// all the candinate rows</span></span><br><span class="line">        <span class="keyword">while</span> (pos) {</span><br><span class="line">            <span class="keyword">int</span> last = pos &amp; (-pos); <span class="comment">// = pos &amp; (~pos + 1) // get the last position which is 1</span></span><br><span class="line">            pos = pos - last;</span><br><span class="line">            count += NQueen(row | last, (md | last) &lt;&lt; <span class="number">1</span>, (cd | last) &gt;&gt; <span class="number">1</span>); <span class="comment">// select row: last</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (N = <span class="number">4</span>; N &lt; <span class="number">20</span>; ++N) {</span><br><span class="line">        MASK = (<span class="number">1</span> &lt;&lt; N) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">double</span> start = clock();</span><br><span class="line">        ll ans = NQueen(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">double</span> elapsed = (clock() - start) / CLOCKS_PER_SEC;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%2d queens: %10lld,\t time elapsed: %.3f second(s)\n&quot;</span>, N, ans, elapsed);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<blockquote>
<p>4 queens:          2,     time elapsed: 0.000 second(s)<br> 5 queens:         10,     time elapsed: 0.000 second(s)<br> 6 queens:          4,     time elapsed: 0.000 second(s)<br> 7 queens:         40,     time elapsed: 0.000 second(s)<br> 8 queens:         92,     time elapsed: 0.000 second(s)<br> 9 queens:        352,     time elapsed: 0.000 second(s)<br>10 queens:        724,     time elapsed: 0.001 second(s)<br>11 queens:       2680,     time elapsed: 0.002 second(s)<br>12 queens:      14200,     time elapsed: 0.012 second(s)<br>13 queens:      73712,     time elapsed: 0.062 second(s)<br>14 queens:     365596,     time elapsed: 0.351 second(s)<br>15 queens:    2279184,     time elapsed: 2.203 second(s)<br>16 queens:   14772512,     time elapsed: 14.722 second(s)<br>17 queens:   95815104,     time elapsed: 104.691 second(s)<br>18 queens:  666090624,     time elapsed: 767.495 second(s)</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Eight_queens_puzzle&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Eight queens puzzle&lt;/a&gt; is a well-known problem. It can be solved by common depth-first backtracking algorithm. However, we can use bit manipulation skills to make the algorithm more efficient. In the following code, &lt;code&gt;row&lt;/code&gt;, &lt;code&gt;md&lt;/code&gt; and &lt;code&gt;cd&lt;/code&gt; reference to the restrictions about &lt;code&gt;row&lt;/code&gt;, &lt;code&gt;main diagonal&lt;/code&gt; and &lt;code&gt;counter diagonal&lt;/code&gt; respectively if we enumerate from 0 column to $(N-1)$ column. Specificialy, &lt;code&gt;row&lt;/code&gt; represents all the selected rows. And if we more from the current column to the next column from left to right, namely 0 to $N-1$, the rows &lt;code&gt;md&lt;/code&gt; selected on the main diagonal changed to $md &amp;lt;&amp;lt; 1$ when it shows in bit level.  Similarly, the rows &lt;code&gt;cd&lt;/code&gt; selected on the counter diagonal changed to $cd &amp;gt;&amp;gt; 1$. Below the code is the accurate runtime on my machine.&lt;br&gt;
    
    </summary>
    
    
      <category term="N-Queens" scheme="http://yoursite.com/tags/N-Queens/"/>
    
  </entry>
  
  <entry>
    <title>World CodeSprint 10</title>
    <link href="http://yoursite.com/2017/05/03/World-CodeSprint-10/"/>
    <id>http://yoursite.com/2017/05/03/World-CodeSprint-10/</id>
    <published>2017-05-03T08:52:35.000Z</published>
    <updated>2017-05-03T09:26:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>It took me nearly seven hours to solve <a href="https://www.hackerrank.com/contests/world-codesprint-10/challenges" target="_blank" rel="noopener">the 6/7 problems</a>. Some useful ideas can be found among them.<br><a id="more"></a></p>
<h4 id="reward-points"><a href="#Reward-Points" class="headerlink" title="Reward Points"></a>Reward Points</h4><p>An easy problem.</p>
<h4 id="zigzag-array"><a href="#Zigzag-Array" class="headerlink" title="Zigzag Array"></a>Zigzag Array</h4><p>An east problem. I accepted it by a method similar with two pointer.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minimumDeletions</span><span class="params">(<span class="built_in">vector</span> &lt; <span class="keyword">int</span> &gt; a)</span></span>{</span><br><span class="line">    <span class="comment">// Complete this function</span></span><br><span class="line">    <span class="keyword">if</span> (a.size() &lt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flag = a[<span class="number">1</span>] &gt; a[<span class="number">0</span>], st = <span class="number">0</span>, ed = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; a.size(); ++i) {</span><br><span class="line">        <span class="keyword">if</span> (flag) {</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; a[i - <span class="number">1</span>]) ed = i;</span><br><span class="line">            <span class="keyword">else</span> {</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                ans += max(<span class="number">0</span>, ed - st + <span class="number">1</span> - <span class="number">2</span>);</span><br><span class="line">                st = i - <span class="number">1</span>, ed = i;</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">if</span> (a[i] &lt; a[i - <span class="number">1</span>]) ed = i;</span><br><span class="line">            <span class="keyword">else</span> {</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                ans += max(<span class="number">0</span>, ed - st + <span class="number">1</span> - <span class="number">2</span>);</span><br><span class="line">                st = i - <span class="number">1</span>, ed = i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    ans += max(<span class="number">0</span>, ed - st + <span class="number">1</span> - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> a_i = <span class="number">0</span>; a_i &lt; n; a_i++)<span class="built_in">cin</span> &gt;&gt; a[a_i];</span><br><span class="line">    <span class="keyword">int</span> result = minimumDeletions(a);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; result &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h4 id="maximal-and-subsequences"><a href="#Maximal-AND-Subsequences" class="headerlink" title="Maximal AND Subsequences"></a>Maximal AND Subsequences</h4><p>Given an arry with $n\leq 10^5$ long integers $A_{i}\leq 10^{18}$, try to find all the $k$-element subsequences of $A$ where the bitwise AND of the subsequence&#x2019;s elements is maximal.</p>
<p>This problem is very common actually, and I lost my mind during that time. </p>
<p>We can use a greedy strategy, due to the truth that:<br>$$<br>2^{i} &gt; 2^{i-1}+2^{i-2}+\cdots + 2^{0}<br>$$</p>
<p>We consider the bits in number two system from high to low. For each bit, we calculate the number of elements whose expression at the bit is 1. If the number is larger than or equal to $k$, then we need to delete all other elements whose expression at the bit is 0. That means the maximal AND value must result from those bit-1 elements. The elements left last make up a set from which we can choose $k$ elements.</p>
<p>I choose the data structure <code>multiset</code> to support the delete operation. But <code>vector</code>, <code>list</code> and so on are optional.</p>
<p>The time complexity is $O(n\log^2 n)$.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll mod = (ll)(<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line">ll fac[MAX_N], ifac[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Qpow</span><span class="params">(ll a, ll b)</span> </span>{</span><br><span class="line">    a = (a % mod + mod) % mod;</span><br><span class="line">    ll ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) {</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = ret * a % mod;</span><br><span class="line">        a = a * a % mod; </span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (a &lt; <span class="number">0</span> || b &lt; <span class="number">0</span> || a &lt; b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> fac[a] * ifac[b] % mod * ifac[a - b] % mod;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; data, del;</span><br><span class="line"><span class="built_in">multiset</span>&lt;ll&gt; S;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span></span>{</span><br><span class="line">    <span class="comment">// Complete this function</span></span><br><span class="line">    S.clear();</span><br><span class="line">    <span class="keyword">for</span> (ll x: data) <span class="keyword">if</span> (x) S.insert(x);</span><br><span class="line"></span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">60</span>; i &gt;= <span class="number">0</span>; --i) {</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : S) {</span><br><span class="line">            <span class="keyword">if</span> ((x &gt;&gt; i) &amp; <span class="number">1</span>) cnt++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (cnt &lt; k) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        ans |= (<span class="number">1l</span>l &lt;&lt; i);</span><br><span class="line">        del.clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : S) {</span><br><span class="line">            <span class="keyword">if</span> (((x &gt;&gt; i) &amp; <span class="number">1</span>) == <span class="number">0</span>) del.push_back(x);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (ll x : del) S.erase(x);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ans == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; C(n, k) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span> &lt;&lt; C(S.size(), k) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAX_N; ++i) fac[i] = fac[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">    ifac[MAX_N - <span class="number">1</span>] = Qpow(fac[MAX_N - <span class="number">1</span>], mod - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = MAX_N - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) ifac[i] = ifac[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % mod;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    data.resize(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; data[i];</span><br><span class="line">    solve(n, k);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
<h4 id="permutation-happiness"><a href="#Permutation-Happiness" class="headerlink" title="Permutation Happiness"></a>Permutation Happiness</h4><p>Try to think in dynamic programming, and thx to erikwei.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = (ll)(<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">3010</span>;</span><br><span class="line"></span><br><span class="line">ll ans[MAX_N][MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">upd</span><span class="params">(ll&amp; a, ll b)</span> </span>{</span><br><span class="line">    a = (a + b) % mod;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">    ans[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; MAX_N; ++i) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; ++j) {</span><br><span class="line">            <span class="keyword">if</span> (j * <span class="number">2</span> - <span class="number">1</span> &lt;= i) upd(ans[i][j], <span class="number">2</span> * j * ans[i - <span class="number">1</span>][j]);</span><br><span class="line">            <span class="keyword">int</span> t = i - <span class="number">2</span> * j;</span><br><span class="line">            <span class="keyword">if</span> ((j + <span class="number">1</span>) * <span class="number">2</span> - <span class="number">1</span> &lt;= i &amp;&amp; t &gt; <span class="number">0</span>) upd(ans[i][j + <span class="number">1</span>], t * ans[i - <span class="number">1</span>][j]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAX_N; ++i) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; ++j) {</span><br><span class="line">            upd(ans[i][j], ans[i][j - <span class="number">1</span>]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{    </span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> Q, n, K;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; Q;</span><br><span class="line">    <span class="keyword">while</span> (Q--) {</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; K;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans[n][n - K] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h4 id="maximum-disjoint-subtree-product"><a href="#Maximum-Disjoint-Subtree-Product" class="headerlink" title="Maximum Disjoint Subtree Product"></a>Maximum Disjoint Subtree Product</h4><p>This is a tree-dp problem with two times dfs. Be in a clear mind while coding this problem. I spent nearly two hours finishing it, and got accepted at the second sumbit (the first submit failed because I forgot to add one line code for dfs2() function).<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; PI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = (ll)(<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">300010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[MAX_N];</span><br><span class="line"><span class="keyword">int</span> val[MAX_N];</span><br><span class="line">PI link[<span class="number">2</span>][MAX_N], nlink[<span class="number">2</span>][MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">updMax</span><span class="params">(ll&amp; a, ll b)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (b &gt; a) a = b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">updMin</span><span class="params">(ll&amp; a, ll b)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (b &lt; a) a = b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span> </span>{</span><br><span class="line">    link[<span class="number">0</span>][u].fi = link[<span class="number">0</span>][u].se = val[u];</span><br><span class="line">    nlink[<span class="number">0</span>][u].fi = nlink[<span class="number">0</span>][u].se = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: G[u]) <span class="keyword">if</span> (v != p) {</span><br><span class="line">        dfs1(v, u);</span><br><span class="line"></span><br><span class="line">        updMax(nlink[<span class="number">0</span>][u].fi, nlink[<span class="number">0</span>][v].fi);</span><br><span class="line">        updMin(nlink[<span class="number">0</span>][u].se, nlink[<span class="number">0</span>][v].se);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (link[<span class="number">0</span>][v].fi &gt; <span class="number">0</span>) link[<span class="number">0</span>][u].fi += link[<span class="number">0</span>][v].fi;</span><br><span class="line">        <span class="keyword">if</span> (link[<span class="number">0</span>][v].se &lt; <span class="number">0</span>) link[<span class="number">0</span>][u].se += link[<span class="number">0</span>][v].se;</span><br><span class="line">    }</span><br><span class="line">    updMax(nlink[<span class="number">0</span>][u].fi, link[<span class="number">0</span>][u].fi);</span><br><span class="line">    updMin(nlink[<span class="number">0</span>][u].se, link[<span class="number">0</span>][u].se);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span> </span>{</span><br><span class="line">    pair&lt;PI, PI&gt; Max, Min;</span><br><span class="line">    Max.fi = Max.se = mp(nlink[<span class="number">1</span>][u].fi, u);</span><br><span class="line">    Min.fi = Min.se = mp(nlink[<span class="number">1</span>][u].se, u);</span><br><span class="line">    PI sum = mp(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: G[u]) <span class="keyword">if</span> (v != p) {</span><br><span class="line">        <span class="keyword">if</span> (link[<span class="number">0</span>][v].fi &gt; <span class="number">0</span>) sum.fi += link[<span class="number">0</span>][v].fi; </span><br><span class="line">        <span class="keyword">if</span> (link[<span class="number">0</span>][v].se &lt; <span class="number">0</span>) sum.se += link[<span class="number">0</span>][v].se;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nlink[<span class="number">0</span>][v].fi &gt; Max.fi.fi) {</span><br><span class="line">            Max.se = Max.fi;</span><br><span class="line">            Max.fi = mp(nlink[<span class="number">0</span>][v].fi, v);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (nlink[<span class="number">0</span>][v].fi &gt; Max.se.fi) {</span><br><span class="line">            Max.se = mp(nlink[<span class="number">0</span>][v].fi, v);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nlink[<span class="number">0</span>][v].se &lt; Min.fi.fi) {</span><br><span class="line">            Min.se = Min.fi;</span><br><span class="line">            Min.fi = mp(nlink[<span class="number">0</span>][v].se, v);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (nlink[<span class="number">0</span>][v].se &lt; Min.se.fi) {</span><br><span class="line">            Min.se = mp(nlink[<span class="number">0</span>][v].se, v);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: G[u]) <span class="keyword">if</span> (v != p) {</span><br><span class="line">        PI tmp = sum;</span><br><span class="line">        <span class="keyword">if</span> (link[<span class="number">0</span>][v].fi &gt; <span class="number">0</span>) tmp.fi -= link[<span class="number">0</span>][v].fi;</span><br><span class="line">        <span class="keyword">if</span> (link[<span class="number">0</span>][v].se &lt; <span class="number">0</span>) tmp.se -= link[<span class="number">0</span>][v].se;</span><br><span class="line"></span><br><span class="line">        link[<span class="number">1</span>][v].fi = max(<span class="number">0l</span>l, link[<span class="number">1</span>][u].fi + tmp.fi + val[u]);</span><br><span class="line">        link[<span class="number">1</span>][v].se = min(<span class="number">0l</span>l, link[<span class="number">1</span>][u].se + tmp.se + val[u]);</span><br><span class="line"></span><br><span class="line">        nlink[<span class="number">1</span>][v] = link[<span class="number">1</span>][v];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Max.fi.se == v) updMax(nlink[<span class="number">1</span>][v].fi, Max.se.fi);</span><br><span class="line">        <span class="keyword">else</span> updMax(nlink[<span class="number">1</span>][v].fi, Max.fi.fi);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Min.fi.se == v) updMin(nlink[<span class="number">1</span>][v].se, Min.se.fi);</span><br><span class="line">        <span class="keyword">else</span> updMax(nlink[<span class="number">1</span>][v].se, Min.fi.fi);</span><br><span class="line"></span><br><span class="line">        updMax(ans, <span class="number">1l</span>l * nlink[<span class="number">0</span>][v].fi * nlink[<span class="number">1</span>][v].fi);</span><br><span class="line">        updMax(ans, <span class="number">1l</span>l * nlink[<span class="number">0</span>][v].se * nlink[<span class="number">1</span>][v].se);</span><br><span class="line"></span><br><span class="line">        dfs2(v, u); </span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; val[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) {</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        G[u].pb(v); G[v].pb(u);</span><br><span class="line">    }</span><br><span class="line">    dfs1(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    link[<span class="number">1</span>][<span class="number">0</span>] = nlink[<span class="number">1</span>][<span class="number">0</span>] = mp(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//    link[1][1] = mp(val[1], val[1]);</span></span><br><span class="line"><span class="comment">//    nlink[1][1] = mp(max(0, val[1]), min(0, val[1]));</span></span><br><span class="line">    link[<span class="number">1</span>][<span class="number">1</span>] = nlink[<span class="number">1</span>][<span class="number">1</span>] = mp(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    dfs2(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
<h4 id="node-point-mappings"><a href="#Node-Point-Mappings" class="headerlink" title="Node-Point Mappings"></a>Node-Point Mappings</h4><p>To be honest this is a old problem as it is the same meaning with <a href="http://codeforces.com/problemset/problem/196/C" target="_blank" rel="noopener">CF196 C</a>. I have seen it about one month before. So copy and paste may be a good choice. 23333.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = (ll)(<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">1510</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> sz[MAX_N], ans[MAX_N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[MAX_N];</span><br><span class="line">pair&lt;ll, ll&gt; ori;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> {</span></span><br><span class="line">    ll x, y;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> {</span><br><span class="line">        <span class="keyword">return</span> (y - ori.se) * (rhs.x - ori.fi) &lt; (x - ori.fi) * (rhs.y - ori.se);</span><br><span class="line">    }</span><br><span class="line">} P[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span> </span>{</span><br><span class="line">    sz[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: G[u]) <span class="keyword">if</span> (v != p) {</span><br><span class="line">        dfs(v, u);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p, <span class="keyword">int</span> st, <span class="keyword">int</span> ed)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> leftCorner = st;</span><br><span class="line">    ori.fi = ori.se = INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = st; i &lt;= ed; ++i) {</span><br><span class="line">        <span class="keyword">if</span> (P[i].x &lt; ori.fi || (P[i].x == ori.fi &amp;&amp; P[i].y &lt; ori.se)) {</span><br><span class="line">            leftCorner = i;</span><br><span class="line">            ori.fi = P[i].x, ori.se = P[i].y;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    swap(P[st], P[leftCorner]);</span><br><span class="line">    sort(P + st + <span class="number">1</span>, P + ed + <span class="number">1</span>);</span><br><span class="line"><span class="comment">//    ans[P[st].id] = u;</span></span><br><span class="line">    ans[u] = P[st].id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: G[u]) <span class="keyword">if</span> (v != p) {</span><br><span class="line">        dfs2(v, u, st + count + <span class="number">1</span>, st + count + sz[v]);</span><br><span class="line">        count += sz[v];</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) {</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        G[u].pb(v); G[v].pb(u);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; P[i].x &gt;&gt; P[i].y, P[i].id = i + <span class="number">1</span>;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">    dfs2(<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; (i == n ? <span class="string">&apos;\n&apos;</span> : <span class="string">&apos; &apos;</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;It took me nearly seven hours to solve &lt;a href=&quot;https://www.hackerrank.com/contests/world-codesprint-10/challenges&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the 6/7 problems&lt;/a&gt;. Some useful ideas can be found among them.&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="Greedy" scheme="http://yoursite.com/tags/Greedy/"/>
    
      <category term="Tree DP" scheme="http://yoursite.com/tags/Tree-DP/"/>
    
      <category term="Convex Hull" scheme="http://yoursite.com/tags/Convex-Hull/"/>
    
      <category term="Two Pointer" scheme="http://yoursite.com/tags/Two-Pointer/"/>
    
  </entry>
  
  <entry>
    <title>HackerRank 19 What Are the Odds?  Nim Game</title>
    <link href="http://yoursite.com/2017/05/02/HackerRank-19-What-Are-the-Odds-Nim-Game/"/>
    <id>http://yoursite.com/2017/05/02/HackerRank-19-What-Are-the-Odds-Nim-Game/</id>
    <published>2017-05-02T12:39:58.000Z</published>
    <updated>2017-05-03T09:24:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>The problem <a href="https://www.hackerrank.com/contests/hourrank-19/challenges/what-are-the-odds" target="_blank" rel="noopener">What are the odds?</a> is a very easy problem actually as long as you have basic knowledge about <a href="https://en.wikipedia.org/wiki/Nim" target="_blank" rel="noopener">Nim Game</a>. Sadly, it still took me about half an hour to get accepted due to a little mistake caused by careless reading and comprehension. I just thought about it as what I thought about regardless of the problem discription, and this is what I am good at. :(<br><a id="more"></a><br>The time complexity can be $O(n)$, but all is ok.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = (ll)(<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">500010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="keyword">int</span> data[MAX_N], pre[MAX_N], suf[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{ </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    ans = <span class="number">1</span>; pre[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; data[i];</span><br><span class="line">        pre[i] = pre[i - <span class="number">1</span>] ^ data[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; n) ans += (pre[i] == <span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; ma;</span><br><span class="line">    suf[n + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i) {</span><br><span class="line">        suf[i] = suf[i + <span class="number">1</span>] ^ data[i];</span><br><span class="line">        ma[suf[i]]++;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) {</span><br><span class="line">        ma[suf[i + <span class="number">1</span>]]--;</span><br><span class="line">        ans += ma[pre[i]];</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The problem &lt;a href=&quot;https://www.hackerrank.com/contests/hourrank-19/challenges/what-are-the-odds&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;What are the odds?&lt;/a&gt; is a very easy problem actually as long as you have basic knowledge about &lt;a href=&quot;https://en.wikipedia.org/wiki/Nim&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nim Game&lt;/a&gt;. Sadly, it still took me about half an hour to get accepted due to a little mistake caused by careless reading and comprehension. I just thought about it as what I thought about regardless of the problem discription, and this is what I am good at. :(&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="Nim Game" scheme="http://yoursite.com/tags/Nim-Game/"/>
    
      <category term="HackerRank" scheme="http://yoursite.com/tags/HackerRank/"/>
    
  </entry>
  
  <entry>
    <title>April Circuits&#39;17</title>
    <link href="http://yoursite.com/2017/05/01/April-Circuits-17/"/>
    <id>http://yoursite.com/2017/05/01/April-Circuits-17/</id>
    <published>2017-05-01T08:46:22.000Z</published>
    <updated>2018-06-13T17:06:01.789Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.hackerearth.com/challenge/competitive/april-circuits-17/problems/" target="_blank" rel="noopener">April Circuits&#x2019;17 contest link</a><br><a id="more"></a></p>
<h4 id="fredo-and-game"><a href="#Fredo-and-Game" class="headerlink" title="Fredo and Game"></a>Fredo and Game</h4><p>An easy problem. However, there is a trick that <strong>If Fredo reaches the last obstacle, he is said to reach the end of path.</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = (ll)(<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, st;</span><br><span class="line"><span class="keyword">int</span> data[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">        <span class="keyword">if</span> (data[i] == <span class="number">0</span>) st -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> st += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (st == <span class="number">0</span> &amp;&amp; i != n) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;No %d\n&quot;</span>, i);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Yes %d\n&quot;</span>, st);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;st, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data[i]);</span><br><span class="line">        solve();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h4 id="help-fredo"><a href="#Help-Fredo" class="headerlink" title="Help Fredo"></a>Help Fredo</h4><p>Give you an array $A$ containing $N\leq 10^5$ postive integers. You need to find the minimum positive integer $x$ subjecting to $x^{n} &gt; \prod_{i=1}^{n} A[i]$.</p>
<p>We can replace multiply operation with logarithm operation to avoid big integers, even though there is a little precision loss. Additionaly, the answer is monotonous, so we can use binary search.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = (ll)(<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> sum;</span><br><span class="line"><span class="keyword">double</span> data[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(ll x)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">log</span>(x) * n &gt; sum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;data[i]);</span><br><span class="line">        sum += <span class="built_in">log</span>(data[i]);</span><br><span class="line">    }</span><br><span class="line">    ll low = <span class="number">2</span>, high = (ll)(<span class="number">1e10</span> + <span class="number">5</span>), mid, ans;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) {</span><br><span class="line">        mid = (low + high) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid)) ans = mid, high = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> low = mid + <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h4 id="worse-mst-unsolved"><a href="#Worse-MST-unsolved" class="headerlink" title="Worse MST (unsolved)"></a>Worse MST (unsolved)</h4><p>too difficult :(</p>
<h4 id="fredo-and-maths"><a href="#Fredo-and-Maths" class="headerlink" title="Fredo and Maths"></a>Fredo and Maths</h4><p>Given three numbers $x, k$ and $m$, you need ot find the value of $x^{x^{x^{.^{.^{.^{x}}}}}} % m$ where number of x&#x2019;s in the expression are k.</p>
<p>$T\leq 10^5, m\leq 10^7, k\leq 10^{18}, m&lt; x \leq 10^8, x$is always a prime number.</p>
<p>My idea is based on the formula of exponential reduction. That is to say, $x^p % m$ is equal to $x ^{p \% \phi(m) + \phi(m)} % m$ while $p \geq \phi(m)$, where $\phi(m)$ is <a href="https://en.wikipedia.org/wiki/Euler%27s_totient_function" target="_blank" rel="noopener">Euler&#x2019;s totient function</a> of $m$. Further more, iterative search is an efficient method. </p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = (ll)(<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> prime_cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> prime[MAX_N], vis[MAX_N], phi[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; MAX_N; ++i) {</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) prime[prime_cnt++] = i, phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; prime_cnt &amp;&amp; i * prime[j] &lt; MAX_N; ++j) {</span><br><span class="line">            vis[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>) {</span><br><span class="line">                phi[i * prime[j]] = prime[j] * phi[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            phi[i * prime[j]] = (prime[j] - <span class="number">1</span>) * phi[i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getPhi</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (x &lt; MAX_N) <span class="keyword">return</span> phi[x];</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; prime[i] * prime[i] &lt;= x; ++i) {</span><br><span class="line">            <span class="keyword">if</span> (x % prime[i] == <span class="number">0</span>) {</span><br><span class="line">                ret *= (prime[i] - <span class="number">1</span>);</span><br><span class="line">                x /= prime[i];</span><br><span class="line">                <span class="keyword">while</span> (x % prime[i] == <span class="number">0</span>) {</span><br><span class="line">                    x /= prime[i];</span><br><span class="line">                    ret *= prime[i];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">1</span>) ret *= (x - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) {</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = <span class="number">1l</span>l * ret * a % c;</span><br><span class="line">        a = <span class="number">1l</span>l * a * a % c;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, ll depth, <span class="keyword">int</span> mmod)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> t = getPhi(mmod);</span><br><span class="line">    <span class="keyword">if</span> (depth == <span class="number">1</span> || t == <span class="number">1</span>) <span class="keyword">return</span> x % mmod;</span><br><span class="line">    <span class="keyword">return</span> Qpow(x, dfs(x, depth - <span class="number">1</span>, t), mmod);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{    </span><br><span class="line">    init();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T, x, m;</span><br><span class="line">    ll K;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld%d&quot;</span>, &amp;x, &amp;K, &amp;m);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">2</span>) {</span><br><span class="line">            assert(m == <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        } <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dfs(x, K, m));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h4 id="filler-game"><a href="#Filler-Game" class="headerlink" title="Filler Game"></a>Filler Game</h4><p>This is a basic problem. We just need to preprocess and state compression dp. For each query, We onnly need $O(1)$ to give answer.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = (ll)(<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = {{<span class="number">-1</span>, <span class="number">0</span>}, {<span class="number">0</span>, <span class="number">-1</span>}, {<span class="number">1</span>, <span class="number">0</span>}, {<span class="number">0</span>, <span class="number">1</span>}};</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> state[<span class="number">1</span> &lt;&lt; <span class="number">22</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> top = n * m;</span><br><span class="line">    <span class="built_in">memset</span>(state, <span class="number">-1</span>, <span class="keyword">sizeof</span> (state));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; (<span class="number">1</span> &lt;&lt; top); ++s) {</span><br><span class="line">        state[s] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; top; ++i) {</span><br><span class="line">            <span class="keyword">if</span> (!(s &amp; (<span class="number">1</span> &lt;&lt; i))) <span class="keyword">continue</span>; </span><br><span class="line">            <span class="keyword">int</span> row = i / m, col = i % m;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> find = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) {</span><br><span class="line">                <span class="keyword">int</span> nrow = row + dir[j][<span class="number">0</span>], ncol = col + dir[j][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (nrow &lt; <span class="number">0</span> || ncol &lt; <span class="number">0</span> || nrow &gt;= n || ncol &gt;= m) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> p = nrow * m + ncol;</span><br><span class="line">                find |= (s &amp; (<span class="number">1</span> &lt;&lt; p));</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (find &amp;&amp; state[s ^ (<span class="number">1</span> &lt;&lt; i)] == <span class="number">0</span>) {</span><br><span class="line">                state[s] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"><span class="comment">//        printf(&quot;state[%d] = %d\n&quot;, s, state[s]);</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{    </span><br><span class="line">    <span class="keyword">int</span> Q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;Q);</span><br><span class="line">    init();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Q; ++i) {</span><br><span class="line">        <span class="keyword">char</span> str[<span class="number">25</span>];</span><br><span class="line">        <span class="keyword">int</span> pos = <span class="number">0</span>, s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) {</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m; ++k) {</span><br><span class="line">                <span class="keyword">if</span> (str[k] == <span class="string">&apos;0&apos;</span>) s += (<span class="number">1</span> &lt;&lt; pos);</span><br><span class="line">                pos++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, state[s] ^ <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h4 id="number-summation"><a href="#Number-Summation" class="headerlink" title="Number Summation"></a>Number Summation</h4><p>We define $F(x, y)$ as the sum of numbers that divide both $x$ and $y$, i.e., sum of the common divisors of $x$ and $y$. Given the value of $n\leq 10^{15}$, calculate the value of:<br>$$<br>\sum_{i=1}^{n}\sum_{j=i}^{n}F(i, j)  \%  (10^{9}+ 7)<br>$$ </p>
<p>Actually, this is a pretty good problem, I think. </p>
<p>I would just talk about how to solve:<br>$$<br>\sum_{i=1}^{n}\sum_{j=1}^{n}F(i, j)  \%  (10^{9}+ 7)<br>$$<br>which is a little bit different from the<br>original question. But the core algorithm is same and you just need to subtract the repetitive options. </p>
<p>You can calculate the contribution of every common divisor i(from 1 to n) for answer. Concretely, for i = 1, the contribution is (n / 1) * (n / 1) * 1; for i = 2, the contribution is: (n/2) * (n/2) * 2&#x2026;&#x2026; and so on. You will find, the contribution of common divisior i is : (n/i) * (n/i) * i. However, the value of n is 10^{15}, which is so large. We need to accelerate this process. </p>
<p>You can find that during the process above, for some i = i1 and i = i2, (n/i1) = (n/i2). For example, 23/4 =23/5, 100/21 = 100/25. The interesting thing comes that: n / i = n/(n/i), so we don&#x2019;t need to enumerate each i (for i = 1 to n). </p>
<p>The total time complexity can be reduced to $O(\sqrt n)$, and this is enough for this problem.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = (ll)(<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Qpow</span><span class="params">(ll a, ll b)</span> </span>{</span><br><span class="line">    a = (a % mod + mod) % mod;</span><br><span class="line">    ll ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) {</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = ret * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{   </span><br><span class="line">    ll n, sum = <span class="number">0</span>, same = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n;) {</span><br><span class="line">        ll p = n / i;</span><br><span class="line">        ll q = n / p;</span><br><span class="line"></span><br><span class="line">        ll a = i + q, b = q - i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (a &amp; <span class="number">1</span>) b /= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> a /= <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        a %= mod, b %= mod;</span><br><span class="line">        ll t = a * b % mod;</span><br><span class="line"></span><br><span class="line">        sum = (sum + (p % mod) * (t % mod) % mod * (p % mod) % mod) % mod;</span><br><span class="line">        same = (same + (p % mod) * (t % mod) % mod) % mod;</span><br><span class="line">        i = q + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        assert(sum &gt;= <span class="number">0</span> &amp;&amp; same &gt;= <span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    ll ret = ((sum - same) + mod) % mod * Qpow(<span class="number">2</span>, mod - <span class="number">2</span>) % mod + same;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ret % mod &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h4 id="dexters-random-generator"><a href="#Dexter&#x2019;s-Random-Generator" class="headerlink" title="Dexter&#x2019;s Random Generator"></a>Dexter&#x2019;s Random Generator</h4><p>Ths is a problem about tree and xor.</p>
<p>Firstly, I discussed with erikwei that dfs order and segment tree with trie may solve this problem regardless of space complexity.(2333) Laterly, erikwei telled me replacing segment tree with Mo&#x2019; Algorithm may work. Nice! </p>
<p>To be honest, the code is not very easy to complete perfectly.</p>
<p>And the time complexity is $O(n\sqrt {n} \log n)$ with a lttle large constant. So it got TLE on two test cases. We only got 93/100 scores. :(</p>
<pre><code class="C++"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="meta">#<span class="meta-keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span>
<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;
<span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;
<span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span>
<span class="meta">#<span class="meta-keyword">define</span> fi first</span>
<span class="meta">#<span class="meta-keyword">define</span> se second</span>
<span class="meta">#<span class="meta-keyword">define</span> pb push_back</span>

<span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);
<span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;
<span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>ll;
<span class="keyword">const</span> ll mod = (ll)(<span class="number">1e9</span> + <span class="number">7</span>);
<span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">100010</span>;
<span class="keyword">const</span> <span class="keyword">int</span> NUM = <span class="number">2</span>;

<span class="keyword">struct</span> Trie {
    <span class="keyword">int</span> child[MAX_N * <span class="number">20</span>][NUM], cnt[MAX_N * <span class="number">20</span>];
    <span class="keyword">int</span> root, tot;

    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{
        root = tot = <span class="number">1</span>;
        child[<span class="number">1</span>][<span class="number">0</span>] = child[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;
        cnt[<span class="number">1</span>] = <span class="number">1</span>;
    }
    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> x)</span> </span>{
        <span class="keyword">int</span>* cur = &amp;root;
        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">29</span>; i &gt;= <span class="number">0</span>; --i) {
            cur = &amp;child[*cur][(x &gt;&gt; i) &amp; <span class="number">1</span>];
            <span class="keyword">if</span> (*cur == <span class="number">0</span>) {
                *cur = ++tot;
                child[tot][<span class="number">0</span>] = child[tot][<span class="number">1</span>] = <span class="number">0</span>;
                cnt[tot] = <span class="number">0</span>;
            }
            cnt[*cur]++;
        }
    }

    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> x)</span> </span>{
        <span class="keyword">int</span> *cur = &amp;root;
        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">29</span>; i &gt;= <span class="number">0</span>; --i) {
            cur = &amp;child[*cur][(x &gt;&gt; i) &amp; <span class="number">1</span>];
            cnt[*cur]--;
        }
    }

    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{
        <span class="keyword">int</span> ret = <span class="number">0</span>;
        <span class="keyword">int</span>* cur = &amp;root;
        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">29</span>; i &gt;= <span class="number">0</span>; --i) {
            <span class="keyword">int</span> now = (x &gt;&gt; i) &amp; <span class="number">1</span>, store = *cur;
            <span class="keyword">if</span> (now == <span class="number">0</span>) {
                cur = &amp;child[*cur][<span class="number">1</span>];
                <span class="keyword">if</span> (cnt[*cur] &gt; <span class="number">0</span>) ret += (<span class="number">1</span> &lt;&lt; i);
                <span class="keyword">else</span> cur = &amp;child[store][<span class="number">0</span>];
            } <span class="keyword">else</span> {
                cur = &amp;child[*cur][<span class="number">0</span>];
                <span class="keyword">if</span> (cnt[*cur] &gt; <span class="number">0</span>) ret += (<span class="number">1</span> &lt;&lt; i);
                <span class="keyword">else</span> cur = &amp;child[store][<span class="number">1</span>];
            }
        }
        <span class="keyword">return</span> ret;
    }
} trie;

<span class="keyword">const</span> <span class="keyword">int</span> B = <span class="number">300</span>;

<span class="keyword">int</span> n, Q;
<span class="keyword">int</span> A[MAX_N], Left[MAX_N], Right[MAX_N], be[MAX_N * <span class="number">2</span>];
<span class="keyword">int</span> fa[MAX_N][<span class="number">20</span>], depth[MAX_N], ans[MAX_N], vis[MAX_N], pos[MAX_N * <span class="number">2</span>];
<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edge[MAX_N];

<span class="keyword">struct</span> Query {
    <span class="keyword">int</span> a, b, anc, L, R, id;

    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Query&amp; rhs) <span class="keyword">const</span> {
        <span class="keyword">return</span> pos[L] == pos[rhs.L] ? R &lt; rhs.R : pos[L] &lt; pos[rhs.L];
    }
} ques[MAX_N];

<span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p, <span class="keyword">int</span>&amp; k, <span class="keyword">int</span> d)</span> </span>{
    Left[u] = ++k, depth[u] = d;
    be[k] = u;
    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">20</span>; ++i) fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];
    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edge[u].size(); ++i) {
        <span class="keyword">int</span> v = edge[u][i];
        <span class="keyword">if</span> (v == p) <span class="keyword">continue</span>;
        fa[v][<span class="number">0</span>] = u;
        dfs(v, u, k, d + <span class="number">1</span>);
    }
    Right[u] = ++k;
    be[k] = u;
}

<span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>{
    <span class="keyword">if</span> (depth[u] &gt; depth[v]) swap(u, v);
    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; ++i) {
        <span class="keyword">if</span> (((depth[v] - depth[u]) &gt;&gt; i) &amp; <span class="number">1</span>) v = fa[v][i];
    }
    <span class="keyword">if</span> (u == v) <span class="keyword">return</span> v;
    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; --i) {
        <span class="keyword">if</span> (fa[u][i] != fa[v][i]) u = fa[u][i], v = fa[v][i]; 
    }
    <span class="keyword">return</span> fa[u][<span class="number">0</span>];
}

<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{
    <span class="keyword">if</span> (id &lt; <span class="number">1</span> || id &gt; n) <span class="keyword">return</span>;
    <span class="keyword">if</span> (vis[id]) trie.remove(A[id]);
    <span class="keyword">else</span> trie.insert(A[id]);
    vis[id] ^= <span class="number">1</span>; 
}

<span class="keyword">struct</span> FastIO {
    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> S = <span class="number">1000000</span>;
    <span class="keyword">int</span> wpos, pos, len;
    <span class="keyword">char</span> wbuf[S];
    FastIO(): wpos(<span class="number">0</span>) {}
    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">xchar</span><span class="params">()</span> </span>{
        <span class="keyword">static</span> <span class="keyword">char</span> buf[S];
        <span class="keyword">if</span> (pos == len) pos = <span class="number">0</span>, len = fread(buf, <span class="number">1</span>, S, <span class="built_in">stdin</span>);
        <span class="keyword">if</span> (pos == len) <span class="keyword">return</span> <span class="number">-1</span>;
        <span class="keyword">return</span> buf[pos++];
    }
    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">xint</span><span class="params">()</span> </span>{
        <span class="keyword">int</span> c = xchar(), x = <span class="number">0</span>;
        <span class="keyword">while</span> (c &lt;= <span class="number">32</span> &amp;&amp; ~c) c = xchar();
        <span class="keyword">if</span> (c == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;
        <span class="keyword">for</span> (; c &gt;= <span class="string">&apos;0&apos;</span> &amp;&amp; c &lt;= <span class="string">&apos;9&apos;</span>; c = xchar()) x = x * <span class="number">10</span> + (c - <span class="string">&apos;0&apos;</span>);
        <span class="keyword">return</span> x;
    }
} io;

<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{    
<span class="comment">//    scanf(&quot;%d%d&quot;, &amp;n, &amp;Q);</span>
    n = io.xint(); Q = io.xint();
    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {
        A[i] = io.xint();
        <span class="comment">//scanf(&quot;%d&quot;, &amp;A[i]);</span>
        edge[i].clear();
    }
    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;  i &lt; n; ++i) {
        <span class="keyword">int</span> u, v;
<span class="comment">//        scanf(&quot;%d%d&quot;, &amp;u, &amp;v);</span>
        u = io.xint(); v = io.xint();
        edge[u].pb(v);
        edge[v].pb(u);
    }

    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; ++i) pos[i] = i / B;

    <span class="keyword">int</span> K = <span class="number">0</span>;
    fa[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;
    dfs(<span class="number">1</span>, <span class="number">-1</span>, K, <span class="number">1</span>);

    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; ++i) {
<span class="comment">//        scanf(&quot;%d%d&quot;, &amp;ques[i].a, &amp;ques[i].b);</span>
        ques[i].a = io.xint(); ques[i].b = io.xint();
        ques[i].id = i;

        <span class="keyword">int</span> u = ques[i].a, v = ques[i].b, p;
        ques[i].anc = p = LCA(u, v);      
        <span class="keyword">if</span> (p == u || p == v) {
            ques[i].L = min(Left[u], Left[v]);
            ques[i].R = max(Left[u], Left[v]);
        } <span class="keyword">else</span> {
            ques[i].L = min(Right[u], Right[v]);
            ques[i].R = max(Left[u], Left[v]);
        }
    }
    sort(ques + <span class="number">1</span>, ques + <span class="number">1</span> + Q);

    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> (vis));
    trie.init();
    <span class="keyword">int</span> ret = <span class="number">0</span>, L = <span class="number">1</span>, R = <span class="number">0</span>;

    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; ++i) {
        <span class="keyword">while</span> (R &gt; ques[i].R) {
            update(be[R]);
            --R;
        }
        <span class="keyword">while</span> (R &lt; ques[i].R) {
            ++R;
            update(be[R]);
        }

        <span class="keyword">while</span> (L &lt; ques[i].L) {
            update(be[L]);
            ++L;
        }
        <span class="keyword">while</span> (L &gt; ques[i].L) {
            --L;
            update(be[L]);
        }

        <span class="keyword">if</span> (ques[i].a == ques[i].b) ans[ques[i].id] = <span class="number">0</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (be[L] == ques[i].anc || be[R] == ques[i].anc) {
            ans[ques[i].id] = max(trie.query(A[be[L]]), trie.query(A[be[R]]));
        } <span class="keyword">else</span> {
            trie.insert(A[ques[i].anc]);
            ans[ques[i].id] = max(trie.query(A[be[L]]), trie.query(A[be[R]]));
            trie.remove(A[ques[i].anc]);
        }
    }

    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; ++i) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);

    <span class="keyword">return</span> <span class="number">0</span>;
}
</code></pre>
<h4 id="xor-queriesunsolved"><a href="#XOR-queries-unsolved" class="headerlink" title="XOR queries(unsolved)"></a>XOR queries(unsolved)</h4><p>too difficult&#x2026;<br>What I can do only is to make a brute force solution.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.hackerearth.com/challenge/competitive/april-circuits-17/problems/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;April Circuits’17 contest link&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="Euler Function" scheme="http://yoursite.com/tags/Euler-Function/"/>
    
      <category term="Mo&#39;s Algorithm" scheme="http://yoursite.com/tags/Mo-s-Algorithm/"/>
    
      <category term="Trie" scheme="http://yoursite.com/tags/Trie/"/>
    
      <category term="dfs order" scheme="http://yoursite.com/tags/dfs-order/"/>
    
  </entry>
  
  <entry>
    <title>2017 SUDA ACM-ICPC Team Winter Training Day6</title>
    <link href="http://yoursite.com/2017/01/18/2017-SUDA-ACM-ICPC-Team-Winter-Training-Day6/"/>
    <id>http://yoursite.com/2017/01/18/2017-SUDA-ACM-ICPC-Team-Winter-Training-Day6/</id>
    <published>2017-01-18T05:11:12.000Z</published>
    <updated>2018-06-13T17:05:45.971Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/pdf/2017Day6.pdf">slides download(in Chinese)</a><br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/pdf/2017Day6.pdf&quot;&gt;slides download(in Chinese)&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
  </entry>
  
</feed>
