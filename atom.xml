<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>瀚清</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-01-27T08:17:20.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ramay7</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python爬虫之爬取百度贴吧帖子</title>
    <link href="http://yoursite.com/2017/01/27/Python%E7%88%AC%E8%99%AB%E4%B9%8B%E7%88%AC%E5%8F%96%E7%99%BE%E5%BA%A6%E8%B4%B4%E5%90%A7%E5%B8%96%E5%AD%90/"/>
    <id>http://yoursite.com/2017/01/27/Python爬虫之爬取百度贴吧帖子/</id>
    <published>2017-01-27T08:05:40.000Z</published>
    <updated>2017-01-27T08:17:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x6280;&#x672F;&#x6D3B;&#xFF0C;&#x8BE5;&#x8D4F;&#xFF01;<br><a id="more"></a><br>&#x4E0D;&#x77E5;&#x4E0D;&#x89C9;&#x5C31;&#x7528;&#x4E86;2+G&#x7684;&#x6D41;&#x91CF;&#xFF0C;&#x6DE6;&#x554A;&#x3002;&#x3002;&#x3002;&#x3002;</p>
<p>&#x9996;&#x5148;&#x8FD9;&#x4E2A;&#x4E0D;&#x80FD;&#x5904;&#x7406;&#x56FE;&#x7247;&#xFF0C;&#x53EA;&#x80FD;&#x83B7;&#x53D6;&#x6BCF;&#x4E00;&#x697C;&#x7684;&#x6587;&#x5B57;&#x53D1;&#x8A00;&#x3002;&#x3002;&#x3002;<br>&#x5176;&#x6B21;&#x6211;&#x8FD8;&#x4E0D;&#x4F1A;&#x8BFB;&#x5199;pdf&#x3002;&#x3002;&#x3002;<br>&#x8FD8;&#x6709;&#x8981;<code>bytes</code>&#x7C7B;&#x578B;&#x8F6C;<code>str</code>&#x6709;&#x4E24;&#x79CD;&#x65B9;&#x5F0F;&#xFF1A;<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str(by, <span class="string">&apos;UTF-8&apos;</span>) // the type of by <span class="keyword">is</span>: bytes</span><br><span class="line">by.decode() // another way</span><br></pre></td></tr></table></figure></p>
<p>&#x5199;&#x8FDB;<code>txt</code>&#x6587;&#x4EF6;&#x662F;&#x4E00;&#x5B9A;&#x8981;&#x8F6C;&#x5316;&#x6210;<code>str</code>&#x683C;&#x5F0F;&#x624D;&#x53EF;&#x4EE5;&#x3002;&#x3002;&#x3002;</p>
<p><code>Tool</code>&#x7C7B;&#x662F;&#x7528;&#x6765;&#x5904;&#x7406;&#x6587;&#x5B57;&#x6BB5;&#x7684;&#x3002;</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib. parse</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span>:</span></span><br><span class="line">    <span class="comment"># &#x53BB;&#x9664;img&#x6807;&#x7B7E;,7&#x4F4D;&#x957F;&#x7A7A;&#x683C;</span></span><br><span class="line">    removeImg = re.compile(<span class="string">&apos;&lt;img.*?&gt;| {7}|&apos;</span>)</span><br><span class="line">    <span class="comment"># &#x5220;&#x9664;&#x8D85;&#x94FE;&#x63A5;</span></span><br><span class="line">    removeAddr = re.compile(<span class="string">&apos;&lt;a.*?&gt;|&lt;/a&gt;&apos;</span>)</span><br><span class="line">    <span class="comment"># &#x628A;&#x6362;&#x884C;&#x7684;&#x6807;&#x7B7E;&#x6362;&#x4E3A;\n</span></span><br><span class="line">    replaceLine = re.compile(<span class="string">&apos;&lt;tr&gt;|&lt;div&gt;|&lt;/div&gt;|&lt;/p&gt;&apos;</span>)</span><br><span class="line">    <span class="comment"># &#x628A;&#x8868;&#x683C;&#x5236;&#x8868;&lt;td&gt;&#x66FF;&#x6362;&#x4E3A;\t</span></span><br><span class="line">    replaceTD = re.compile(<span class="string">&apos;&lt;td&gt;&apos;</span>)</span><br><span class="line">    <span class="comment"># &#x628A;&#x6BB5;&#x843D;&#x5F00;&#x5934;&#x6362;&#x4E3A;\n&#x52A0;&#x7A7A;&#x4E24;&#x683C;</span></span><br><span class="line">    replacePara = re.compile(<span class="string">&apos;&lt;p.*?&gt;&apos;</span>)</span><br><span class="line">    <span class="comment"># &#x628A;&#x6362;&#x884C;&#x7B26;&#x6216;&#x53CC;&#x6362;&#x884C;&#x7B26;&#x66FF;&#x6362;&#x4E3A;\n</span></span><br><span class="line">    replaceBR = re.compile(<span class="string">&apos;&lt;br&gt;&lt;br&gt;|&lt;br&gt;&apos;</span>)</span><br><span class="line">    <span class="comment"># &#x628A;&#x5176;&#x4F59;&#x6807;&#x7B7E;&#x5254;&#x9664;</span></span><br><span class="line">    removeExtraTag = re.compile(<span class="string">&apos;&lt;.*?&gt;&apos;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">replace</span><span class="params">(self, pageContent)</span>:</span></span><br><span class="line">        pageContent = re.sub(self.removeImg,<span class="string">&quot;&quot;</span>, pageContent)</span><br><span class="line">        pageContent = re.sub(self.removeAddr,<span class="string">&quot;&quot;</span>,pageContent)</span><br><span class="line">        pageContent = re.sub(self.replaceLine,<span class="string">&quot;\n&quot;</span>,pageContent)</span><br><span class="line">        pageContent = re.sub(self.replaceTD, <span class="string">&quot;\t&quot;</span>,pageContent)</span><br><span class="line">        pageContent = re.sub(self.replacePara,<span class="string">&quot;\n       &quot;</span>, pageContent)</span><br><span class="line">        pageContent = re.sub(self.replaceBR, <span class="string">&quot;\n&quot;</span>, pageContent)</span><br><span class="line">        pageContent = re.sub(self.removeExtraTag, <span class="string">&quot;&quot;</span>, pageContent)</span><br><span class="line">        <span class="comment"># strip()&#x5C06;&#x524D;&#x540E;&#x591A;&#x4F59;&#x7A7A;&#x683C;&#x5220;&#x9664;</span></span><br><span class="line">        <span class="keyword">return</span> pageContent.strip()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BDTB</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, baseUrl, seeLZ, floorTag)</span>:</span></span><br><span class="line">        self.baseURL = baseUrl</span><br><span class="line">        self.seeLZ = <span class="string">&apos;?see_Lz=&apos;</span> + str(seeLZ)</span><br><span class="line">        self.tool = Tool()</span><br><span class="line">        self.file = <span class="keyword">None</span></span><br><span class="line">        self.floor = <span class="number">1</span></span><br><span class="line">        self.defaultTitle = <span class="string">u&apos;&#x767E;&#x5EA6;&#x8D34;&#x5427;&apos;</span></span><br><span class="line">        self.floorTag = floorTag</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPage</span><span class="params">(self, pageNum)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># &#x6784;&#x5EFA;URL</span></span><br><span class="line">            url = self.baseURL + self.seeLZ + <span class="string">&apos;&amp;pn=&apos;</span> + str(pageNum)</span><br><span class="line">            req = urllib.request.Request(url)</span><br><span class="line">            response = urllib.request.urlopen(req)</span><br><span class="line">            <span class="comment"># &#x8FD4;&#x56DE;URF-8&#x683C;&#x5F0F;&#x7F16;&#x7801;&#x5185;&#x5BB9;</span></span><br><span class="line">            <span class="keyword">return</span> response.read().decode(<span class="string">&apos;UTF8&apos;</span>)</span><br><span class="line">        <span class="keyword">except</span> urllib.request.URLError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">if</span> hasattr(e, <span class="string">&apos;reason&apos;</span>):</span><br><span class="line">                print(<span class="string">u&quot;&#x94FE;&#x63A5;&#x767E;&#x5EA6;&#x8D34;&#x5427;&#x5931;&#x8D25;&#xFF0C;&#x9519;&#x8BEF;&#x539F;&#x56E0;&quot;</span>,e.reason)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#x83B7;&#x53D6;&#x5E16;&#x5B50;&#x6807;&#x9898;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getTitle</span><span class="params">(self, page)</span>:</span></span><br><span class="line">        <span class="comment"># &#x6807;&#x9898;&#x7684;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;</span></span><br><span class="line">        pattern = re.compile(<span class="string">&apos;&lt;h3 class=&quot;core_title_txt.*?&gt;(.*?)&lt;/h3&gt;&apos;</span>, re.S)</span><br><span class="line">    <span class="comment">#    print(type(page))</span></span><br><span class="line">        result = re.search(pattern, page)</span><br><span class="line">        <span class="keyword">if</span> result:</span><br><span class="line">        <span class="comment">#    print(type(result))</span></span><br><span class="line">        <span class="comment">#    print(type(result.group()))</span></span><br><span class="line">        <span class="comment">#    print(result.group(1).strip())</span></span><br><span class="line">            <span class="keyword">return</span> result.group(<span class="number">1</span>).strip()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#x83B7;&#x53D6;&#x5E16;&#x5B50;&#x4E00;&#x5171;&#x591A;&#x5C11;&#x9875;&#xFF0C;&#x4F20;&#x5165;&#x9875;&#x9762;&#x5185;&#x5BB9;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPageNum</span><span class="params">(self, page)</span>:</span></span><br><span class="line">        <span class="comment"># &#x83B7;&#x53D6;&#x5E16;&#x5B50;&#x9875;&#x6570;&#x7684;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;</span></span><br><span class="line">        pattern = re.compile(<span class="string">&apos;&lt;li class=&quot;l_reply_num.*?&lt;/span&gt;.*?&lt;span.*?&gt;(.*?)&lt;/span&gt;&apos;</span>, re.S)</span><br><span class="line">        result = re.search(pattern, page)</span><br><span class="line">        <span class="keyword">if</span> result:</span><br><span class="line">            print(result.group(<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> result.group(<span class="number">1</span>).strip()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#x83B7;&#x53D6;&#x6BCF;&#x4E00;&#x5C42;&#x697C;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x4F20;&#x5165;&#x9875;&#x9762;&#x5185;&#x5BB9;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPageContent</span><span class="params">(self, page)</span>:</span></span><br><span class="line">        <span class="comment"># &#x5339;&#x914D;&#x6240;&#x6709;&#x697C;&#x5C42;&#x5185;&#x5BB9;&#x7684;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;</span></span><br><span class="line">        pattern = re.compile(<span class="string">&apos;&lt;div id=&quot;post_content_.*?&gt;(.*?)&lt;/div&gt;&apos;</span>, re.S)</span><br><span class="line">        items = re.findall(pattern, page)</span><br><span class="line">        contents = []</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            <span class="comment">#print(self.tool.replace(item))</span></span><br><span class="line">            content = <span class="string">&quot;\n&quot;</span> + self.tool.replace(item) + <span class="string">&quot;\n&quot;</span></span><br><span class="line">            contents.append(content.encode(<span class="string">&apos;UTF-8&apos;</span>))</span><br><span class="line">        <span class="comment">#print(type(contents))</span></span><br><span class="line">        <span class="keyword">return</span> contents</span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#x8BBE;&#x7F6E;&#x6587;&#x4EF6;&#x540D;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setFileTitle</span><span class="params">(self, title)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> title <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            self.file = open(self.defaultTitle + <span class="string">&apos;.txt&apos;</span>, <span class="string">&quot;w+&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.file = open(title + <span class="string">&apos;.txt&apos;</span>, <span class="string">&quot;w+&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#x5C06;&#x6BCF;&#x4E00;&#x697C;&#x7684;&#x4FE1;&#x606F;&#x5199;&#x5165;&#x6587;&#x4EF6;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeData</span><span class="params">(self, contents)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> contents:</span><br><span class="line">            <span class="keyword">if</span> self.floorTag == <span class="string">&apos;1&apos;</span>:</span><br><span class="line">                floorLine = <span class="string">u&apos;\n----------------------------------&apos;</span> + str(self.floor) + <span class="string">u&quot;----------------------------------\n&quot;</span></span><br><span class="line">                self.file.write(floorLine)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#a_item = item.decode()</span></span><br><span class="line">            self.file.write(item.decode())</span><br><span class="line">            self.floor += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        indexPage = self.getPage(<span class="number">1</span>)</span><br><span class="line">        pageNum = self.getPageNum(indexPage)</span><br><span class="line">        title = self.getTitle(indexPage)</span><br><span class="line">        self.setFileTitle(title)</span><br><span class="line">        <span class="keyword">if</span> pageNum == <span class="keyword">None</span>:</span><br><span class="line">            print(<span class="string">&apos;URL&#x5DF2;&#x5931;&#x6548;, &#x8BF7;&#x91CD;&#x8BD5;\n&apos;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            print(<span class="string">&apos;&#x8BE5;&#x5E16;&#x5B50;&#x5171;&#x6709;&apos;</span> + str(pageNum) + <span class="string">&apos;&#x9875;&apos;</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, (int)(pageNum) + <span class="number">1</span>):</span><br><span class="line">                print(<span class="string">&quot;&#x6B63;&#x5728;&#x5199;&#x5165;&#x7B2C;&quot;</span> + str(i) + <span class="string">&quot;&#x9875;&#x6570;&#x636E;&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> i == <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                page = self.getPage(i)</span><br><span class="line">                contents = self.getPageContent(page)</span><br><span class="line">                self.writeData(contents)</span><br><span class="line">        <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">&quot;&#x5199;&#x5165;&#x5F02;&#x5E38;&#xFF0C;&#x539F;&#x56E0;&#xFF1A;&quot;</span> + e.message)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            print(<span class="string">&quot;&#x5199;&#x5165;&#x4EFB;&#x52A1;&#x5B8C;&#x6210;&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">u&quot;&#x8BF7;&#x8F93;&#x5165;&#x5E16;&#x5B50;&#x4EE3;&#x53F7;&quot;</span>)</span><br><span class="line">baseURL = <span class="string">&apos;http://tieba.baidu.com/p/&apos;</span> + str(input(<span class="string">u&quot;http://tieba.baidu.com/p/&quot;</span>))</span><br><span class="line"><span class="comment">#baseURL = &apos;http://tieba.baidu.com/p/4956669941&apos;</span></span><br><span class="line">seeLZ = input(<span class="string">&quot;&#x662F;&#x5426;&#x53EA;&#x83B7;&#x53D6;&#x697C;&#x4E3B;&#x53D1;&#x8A00;&#xFF0C;&#x662F;&#x8BF7;&#x8F93;&#x5165;1&#xFF0C;&#x5426;&#x8BF7;&#x8F93;&#x5165;0\n&quot;</span>)</span><br><span class="line">floorTag = input(<span class="string">&quot;&#x662F;&#x5426;&#x5199;&#x5165;&#x697C;&#x5C42;&#x4FE1;&#x606F;&#xFF0C;&#x662F;&#x8BF7;&#x8F93;&#x5165;1&#xFF0C;&#x5426;&#x8BF7;&#x8F93;&#x5165;0\n&quot;</span>)</span><br><span class="line">bdtb = BDTB(baseURL, seeLZ, floorTag)</span><br><span class="line">bdtb.start()</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;技术活，该赏！&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python爬虫" scheme="http://yoursite.com/tags/Python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫之爬取糗事百科段子</title>
    <link href="http://yoursite.com/2017/01/26/Python%E7%88%AC%E8%99%AB%E4%B9%8B%E7%88%AC%E5%8F%96%E7%B3%97%E4%BA%8B%E7%99%BE%E7%A7%91%E6%AE%B5%E5%AD%90/"/>
    <id>http://yoursite.com/2017/01/26/Python爬虫之爬取糗事百科段子/</id>
    <published>2017-01-26T09:47:25.000Z</published>
    <updated>2017-01-26T10:01:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>Life is so short that I use Python.<br><a id="more"></a><br>&#x7528;&#x7684;&#x662F;Python3.x&#x7248;&#x672C;&#x3002;&#x9664;&#x6B64;&#x4E4B;&#x5916;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x5730;&#x65B9;&#x6709;&#x4E24;&#x4E2A;&#x3002;<br>&#x4E00;&#x4E2A;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x6784;&#x9020;<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pattern = re.compile(<span class="string">&apos;&lt;div class=&quot;author clearfix&quot;&gt;.*?href.*?&lt;img src.*?title=.*?&lt;h2&gt;(.*?)&lt;/h2&gt;.*?&lt;div class=&quot;content&quot;&gt;(.*?)&lt;/div&gt;.*?&lt;div class=&quot;(.*?)&quot;&gt;.*?&lt;i class=&quot;number&quot;&gt;(.*?)&lt;/i&gt;.*?&lt;i class=&quot;number&quot;&gt;(.*?)&lt;/i&gt;&apos;</span>,re.S)</span><br></pre></td></tr></table></figure></p>
<p>&#x8FD9;&#x4E2A;&#x5F0F;&#x5B50;&#x73B0;&#x5728;(2017/01/26)&#x8FD8;&#x662F;&#x6709;&#x6548;&#x7684;&#xFF0C;&#x4EE5;&#x53CA;&#x5224;&#x65AD;&#x662F;&#x5426;&#x722C;&#x53D6;&#x7684;&#x6BB5;&#x5B50;&#x662F;&#x5426;&#x542B;&#x6709;&#x56FE;&#x7247;&#xFF0C;&#x5982;&#x679C;&#x542B;&#x6709;&#x56FE;&#x7247;&#x5C31;&#x5FFD;&#x7565;&#x4E86;&#x3002;</p>
<p>&#x8FD8;&#x6709;&#x4E00;&#x4E2A;&#x5C31;&#x662F;&#x6BB5;&#x5B50;&#x5185;&#x5BB9;&#x4E2D;&#x7684;<code>&lt;br/&gt;</code>,<code>&lt;span&gt;</code>,<code>&lt;/span&gt;</code>&#x7684;&#x66FF;&#x6362;&#x6216;&#x8005;&#x6E05;&#x9664;&#x3002;<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">replaceBR = re.compile(<span class="string">&apos;&lt;br/&gt;&apos;</span>)</span><br><span class="line">text = re.sub(replaceBR, <span class="string">&quot;\n&quot;</span>, item[<span class="number">1</span>])</span><br><span class="line">span = re.compile(<span class="string">&apos;&lt;span&gt;&apos;</span>)</span><br><span class="line">text = re.sub(span, <span class="string">&apos;    &apos;</span>, text)</span><br><span class="line">span = re.compile(<span class="string">&apos;&lt;/span&gt;&apos;</span>)</span><br><span class="line">text = re.sub(span, <span class="string">&apos;\n&apos;</span>, text)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QSBK</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#x521D;&#x59CB;&#x5316;&#x65B9;&#x6CD5;&#xFF0C;&#x5B9A;&#x4E49;&#x53D8;&#x91CF;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.pageIndex = <span class="number">1</span></span><br><span class="line">        self.user_agent = <span class="string">&apos;Mozilla/4.0(compatible; MSIE 5.5; Windows NT&apos;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># &#x521D;&#x59CB;&#x5316;headers</span></span><br><span class="line">        self.headers = {<span class="string">&apos;User-Agent&apos;</span>: self.user_agent}</span><br><span class="line">        <span class="comment"># &#x5B58;&#x653E;&#x6BB5;&#x5B50;&#x7684;&#x53D8;&#x91CF;&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x662F;&#x6BCF;&#x4E00;&#x9875;&#x7684;&#x6240;&#x6709;&#x6BB5;&#x5B50;</span></span><br><span class="line">        self.stories = []</span><br><span class="line">        <span class="comment"># &#x5B58;&#x653E;&#x7A0B;&#x5E8F;&#x80FD;&#x5426;&#x7EE7;&#x7EED;&#x8FD0;&#x884C;&#x7684;&#x53D8;&#x91CF;</span></span><br><span class="line">        self.enable = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#x4F20;&#x5165;&#x67D0;&#x4E00;&#x9875;&#x7684;&#x7D22;&#x5F15;&#x83B7;&#x5F97;&#x9875;&#x9762;&#x4EE3;&#x7801;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPage</span><span class="params">(self, pageIndex)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = <span class="string">&apos;http://www.qiushibaike.com/hot/page/&apos;</span> + str(pageIndex)</span><br><span class="line">            <span class="comment"># &#x6784;&#x5EFA;&#x8BF7;&#x6C42;&#x7684;request</span></span><br><span class="line">            req = urllib.request.Request(url, headers = self.headers)</span><br><span class="line">            <span class="comment"># &#x5229;&#x7528;urlopen&#x83B7;&#x53D6;&#x9875;&#x9762;&#x4EE3;&#x7801;</span></span><br><span class="line">            response = urllib.request.urlopen(req)</span><br><span class="line">            <span class="comment"># &#x5C06;&#x9875;&#x9762;&#x8F6C;&#x5316;&#x4E3A;UTF-8&#x7F16;&#x7801;</span></span><br><span class="line">            pageCode = response.read().decode(<span class="string">&apos;UTF8&apos;</span>)</span><br><span class="line">            <span class="keyword">return</span> pageCode</span><br><span class="line">        <span class="keyword">except</span> urllib.request.URLError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">if</span> hasattr(e, <span class="string">&apos;reason&apos;</span>):</span><br><span class="line">                print(<span class="string">&quot;Failed to link with qiushibaike.com. Reason&quot;</span>, e.reason)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#x4F20;&#x5165;&#x67D0;&#x4E00;&#x9875;&#x4EE3;&#x7801;&#xFF0C;&#x8FD4;&#x56DE;&#x672C;&#x9875;&#x4E0D;&#x5E26;&#x56FE;&#x7247;&#x7684;&#x6BB5;&#x5B50;&#x5217;&#x8868;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPageItems</span><span class="params">(self, pageIndex)</span>:</span></span><br><span class="line">        pageCode = self.getPage(pageIndex)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pageCode:</span><br><span class="line">            print(<span class="string">&quot;Failed to download page&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        pattern = re.compile(<span class="string">&apos;&lt;div class=&quot;author clearfix&quot;&gt;.*?href.*?&lt;img src.*?title=.*?&lt;h2&gt;(.*?)&lt;/h2&gt;.*?&lt;div class=&quot;content&quot;&gt;(.*?)&lt;/div&gt;.*?&lt;div class=&quot;(.*?)&quot;&gt;.*?&lt;i class=&quot;number&quot;&gt;(.*?)&lt;/i&gt;.*?&lt;i class=&quot;number&quot;&gt;(.*?)&lt;/i&gt;&apos;</span>,re.S)</span><br><span class="line">        items = re.findall(pattern, pageCode)</span><br><span class="line">        <span class="comment"># &#x5B58;&#x50A8;&#x6BCF;&#x4E00;&#x9875;&#x7684;&#x6BB5;&#x5B50;&#x4EEC;</span></span><br><span class="line">        pageStories = []</span><br><span class="line">        <span class="comment"># &#x904D;&#x5386;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x5339;&#x914D;&#x7684;&#x4FE1;&#x606F;</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            <span class="comment"># &#x662F;&#x5426;&#x542B;&#x6709;&#x56FE;&#x7247;</span></span><br><span class="line">            <span class="comment">#print(len(item))</span></span><br><span class="line">            haveImg = re.search(<span class="string">&apos;thumb&apos;</span>, item[<span class="number">2</span>])</span><br><span class="line">            <span class="comment">#item[0]: &#x6BB5;&#x5B50;&#x53D1;&#x5E03;&#x8005;     item[1]&#xFF1A;&#x6BB5;&#x5B50;&#x5185;&#x5BB9;</span></span><br><span class="line">            <span class="comment">#item[2]: &#x5224;&#x65AD;&#x6BB5;&#x5B50;&#x662F;&#x5426;&#x5305;&#x542B;&#x56FE;&#x7247;    item[3]: &#x70B9;&#x8D5E;&#x6570;    item[4]: &#x8BC4;&#x8BBA;&#x6570;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> haveImg:</span><br><span class="line">                replaceBR = re.compile(<span class="string">&apos;&lt;br/&gt;&apos;</span>)</span><br><span class="line">                text = re.sub(replaceBR, <span class="string">&quot;\n&quot;</span>, item[<span class="number">1</span>])</span><br><span class="line">                span = re.compile(<span class="string">&apos;&lt;span&gt;&apos;</span>)</span><br><span class="line">                text = re.sub(span, <span class="string">&apos;    &apos;</span>, text)</span><br><span class="line">                span = re.compile(<span class="string">&apos;&lt;/span&gt;&apos;</span>)</span><br><span class="line">                text = re.sub(span, <span class="string">&apos;\n&apos;</span>, text)</span><br><span class="line"></span><br><span class="line">                pageStories.append([item[<span class="number">0</span>].strip(), text.strip(), item[<span class="number">3</span>].strip(), item[<span class="number">4</span>].strip()])</span><br><span class="line">        <span class="keyword">return</span> pageStories</span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#x52A0;&#x8F7D;&#x5E76;&#x63D0;&#x53D6;&#x9875;&#x9762;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x52A0;&#x5165;&#x5230;&#x5217;&#x8868;&#x4E2D;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loadPage</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#&#x5982;&#x679C;&#x5F53;&#x524D;&#x672A;&#x770B;&#x7684;&#x9875;&#x6570;&#x5C11;&#x4E8E;2&#x9875;&#xFF0C;&#x5219;&#x52A0;&#x8F7D;&#x65B0;&#x4E00;&#x9875;</span></span><br><span class="line">        <span class="keyword">if</span> self.enable == <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">if</span> len(self.stories) &lt; <span class="number">2</span>:</span><br><span class="line">                <span class="comment"># &#x83B7;&#x53D6;&#x65B0;&#x4E00;&#x9875;</span></span><br><span class="line">                pageStories = self.getPageItems(self.pageIndex)</span><br><span class="line">                <span class="comment"># &#x5C06;&#x8BE5;&#x9875;&#x7684;&#x6BB5;&#x5B50;&#x5B58;&#x653E;&#x5230;&#x5168;&#x5C40;list&#x4E2D;</span></span><br><span class="line">                <span class="keyword">if</span> pageStories:</span><br><span class="line">                    self.stories.append(pageStories)</span><br><span class="line">                    self.pageIndex += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#x8C03;&#x7528;&#x8BE5;&#x65B9;&#x6CD5;&#xFF0C;&#x6BCF;&#x6B21;&#x6572;&#x56DE;&#x8F66;&#x6253;&#x5370;&#x8F93;&#x51FA;&#x4E00;&#x4E2A;&#x6BB5;&#x5B50;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getOneStory</span><span class="params">(self, pageStories, page)</span>:</span></span><br><span class="line">        <span class="comment"># &#x904D;&#x5386;&#x4E00;&#x9875;&#x7684;&#x6BB5;&#x5B50;</span></span><br><span class="line">        <span class="keyword">for</span> story <span class="keyword">in</span> pageStories:</span><br><span class="line">            <span class="comment"># &#x7B49;&#x5F85;&#x7528;&#x6237;&#x8F93;&#x5165;</span></span><br><span class="line">            Input = input()</span><br><span class="line">            <span class="comment"># &#x6BCF;&#x5F53;&#x8F93;&#x5165;&#x56DE;&#x8F66;&#x4E00;&#x6B21;&#xFF0C;&#x5224;&#x65AD;&#x662F;&#x5426;&#x8981;&#x52A0;&#x8F7D;&#x9875;&#x9762;</span></span><br><span class="line">            self.loadPage()</span><br><span class="line">            <span class="comment"># &#x8F93;&#x5165;Q&#x5219;&#x7A0B;&#x5E8F;&#x7ED3;&#x675F;</span></span><br><span class="line">            <span class="keyword">if</span> Input == <span class="string">&apos;Q&apos;</span>:</span><br><span class="line">                self.enable = <span class="keyword">False</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            print(<span class="string">u&apos;&#x7B2C;%d&#x9875;\t&#x53D1;&#x5E03;&#x4EBA;:%s\t&#x8D5E;:%s\t&#x8BC4;&#x8BBA;:%s\n%s&apos;</span> % (page, story[<span class="number">0</span>], story[<span class="number">2</span>], story[<span class="number">3</span>], story[<span class="number">1</span>]))</span><br><span class="line">    <span class="comment"># &#x5F00;&#x59CB;&#x65B9;&#x6CD5;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">&apos;&#x6B63;&#x5728;&#x8BFB;&#x53D6;&#x7CD7;&#x4E8B;&#x767E;&#x79D1;&#xFF0C;&#x6309;&#x56DE;&#x8F66;&#x67E5;&#x770B;&#x65B0;&#x6BB5;&#x5B50;&#xFF0C;Q&#x9000;&#x51FA;&apos;</span>)</span><br><span class="line">        <span class="comment"># &#x4F7F;&#x53D8;&#x91CF;&#x4E3A;True&#xFF0C;&#x7A0B;&#x5E8F;&#x53EF;&#x4EE5;&#x6B63;&#x5E38;&#x8FD0;&#x884C;</span></span><br><span class="line">        self.enable = <span class="keyword">True</span></span><br><span class="line">        <span class="comment"># &#x5148;&#x52A0;&#x8F7D;&#x4E00;&#x9875;&#x5185;&#x5BB9;</span></span><br><span class="line">        self.loadPage()</span><br><span class="line">        <span class="comment"># &#x5C40;&#x90E8;&#x53D8;&#x91CF;&#xFF0C;&#x63A7;&#x5236;&#x5F53;&#x524D;&#x8BFB;&#x5230;&#x4E86;&#x7B2C;&#x51E0;&#x9875;</span></span><br><span class="line">        nowPage = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> self.enable:</span><br><span class="line">            <span class="keyword">if</span> len(self.stories) &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># &#x4ECE;&#x5168;&#x5C40;list&#x4E2D;&#x83B7;&#x53D6;&#x4E00;&#x9875;&#x7684;&#x6BB5;&#x5B50;</span></span><br><span class="line">                pageStories = self.stories[<span class="number">0</span>]</span><br><span class="line">                <span class="comment"># &#x5F53;&#x671F;&#x8BFB;&#x5230;&#x7684;&#x9875;&#x6570;&#x52A0;&#x4E00;</span></span><br><span class="line">                nowPage += <span class="number">1</span></span><br><span class="line">                <span class="comment"># &#x5C06;&#x5168;&#x5C40;list&#x4E2D;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5220;&#x9664;&#xFF0C;&#x56E0;&#x4E3A;&#x5DF2;&#x53D6;&#x51FA;</span></span><br><span class="line">                <span class="keyword">del</span> self.stories[<span class="number">0</span>]</span><br><span class="line">                <span class="comment">#&#x521D;&#x51FA;&#x8BE5;&#x9875;&#x7684;&#x6BB5;&#x5B50;</span></span><br><span class="line">                self.getOneStory(pageStories, nowPage)</span><br><span class="line"></span><br><span class="line">spider = QSBK()</span><br><span class="line">spider.start()</span><br></pre></td></tr></table></figure>
<p>&#x6548;&#x679C;&#xFF1A;<br><img src="/images/qsbk.JPG" alt="qsbk"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Life is so short that I use Python.&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="python爬虫" scheme="http://yoursite.com/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>补刀计划</title>
    <link href="http://yoursite.com/2017/01/22/%E8%A1%A5%E5%88%80%E8%AE%A1%E5%88%92/"/>
    <id>http://yoursite.com/2017/01/22/补刀计划/</id>
    <published>2017-01-22T14:26:41.000Z</published>
    <updated>2017-01-26T10:01:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x65B0;&#x6280;&#x80FD;&#xFF1A;&#x5728;&#x961F;&#x53CB;&#x72B6;&#x6001;&#x4E0D;&#x597D;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4E5F;&#x80FD;&#x5B8C;&#x7F8E;&#x8865;&#x5200;&#xFF01;<br><a id="more"></a><br>1/22<br><a href="http://codeforces.com/contest/599/problem/C" target="_blank" rel="noopener">CF 599C</a> &#x8D2A;&#x5FC3;&#x3001;&#x5206;&#x5757;&#x6392;&#x5E8F;&#x5757;&#x6570;</p>
<p>1/20<br><a href="http://codeforces.com/contest/758" target="_blank" rel="noopener">CF 758</a><br>C:&#x5206;&#x7C7B;&#x8BA8;&#x8BBA;<br>D:&#x5B57;&#x7B26;&#x4E32;&#x8D2A;&#x5FC3;&#x8F6C;dp<br>E:&#x5565;&#x5B50;&#x5466;<br>F:&#x6570;&#x8BBA;&#x3001;&#x7B49;&#x6BD4;&#x6570;&#x5217;&#x3001;GCD</p>
<p>1/17<br><a href="https://www.facebook.com/hackercup/problem/1800890323482794/" target="_blank" rel="noopener">Facebook Hacker Cup Round1</a></p>
<p>1/14<br><a href="http://codeforces.com/problemset/problem/757/C" target="_blank" rel="noopener">CF 757C</a> Hash<br><a href="http://codeforces.com/problemset/problem/757/E" target="_blank" rel="noopener">CF 757E</a> &#x79EF;&#x6027;&#x51FD;&#x6570;(Multiplicate Function)</p>
<p>1/12<br><a href="http://codeforces.com/contest/754/problem/E" target="_blank" rel="noopener">CF 754E</a> Shift-And&#x7B97;&#x6CD5;</p>
<p>1/10<br><a href="https://www.facebook.com/hackercup/problem/169401886867367/" target="_blank" rel="noopener">Facebook Hacker Cup Qualification Round</a></p>
<p>1/6<br><a href="http://codeforces.com/contest/754" target="_blank" rel="noopener">CF Round 390</a></p>
<p>12/25<br><a href="http://codeforces.com/contest/748" target="_blank" rel="noopener">CF Technocup 2017 - Elimination Round 3</a><br>12/19<br><a href="http://codeforces.com/contest/747" target="_blank" rel="noopener">CF Round 387</a><br>&#x53CD;&#x6B63;&#x865A;&#x7684;&#x4E00;&#x6BD4;</p>
<p>12/18<br><a href="http://codeforces.com/contest/746" target="_blank" rel="noopener">CF Round 386</a><br>G&#x9898;&#xFF1A;&#x5DF2;&#x77E5;&#x6709;&#x6839;&#x6811;&#x4E0A;&#x6BCF;&#x5C42;&#x7ED3;&#x70B9;&#x4E2A;&#x6570;&#x548C;&#x53F6;&#x5B50;&#x7ED3;&#x70B9;&#x4E2A;&#x6570;&#x6784;&#x9020;&#x6811;</p>
<p>12/9<br><a href="http://codeforces.com/contest/688" target="_blank" rel="noopener">CF Round 360</a><br>D&#x9898;&#xFF1A;&#x6570;&#x8BBA;<br>E&#x9898;&#xFF1A;dp+bitset</p>
<p>12/8<br><a href="https://code.google.com/codejam/contest/dashboard?c=5264486#s=p3" target="_blank" rel="noopener">APAC Test 2017 Round D D:Stretch Rope</a> dp+&#x5355;&#x8C03;&#x961F;&#x5217;<br><a href="http://codeforces.com/gym/101137" target="_blank" rel="noopener">GYM 101137K</a> MST+dp</p>
<p>12/7<br><a href="http://codeforces.com/contest/742/problem/E" target="_blank" rel="noopener">CF 742E</a> &#x4E8C;&#x5206;&#x56FE;<br><a href="https://vjudge.net/problem/UVALive-7501" target="_blank" rel="noopener">UVALive 7501</a> &#x4E8C;&#x5206; (&#x8FD9;&#x9053;&#x9898;&#x4E0D;&#x80FD;&#x7528;%I64d&#xFF0C;&#x6709;&#x6BD2;)</p>
<p>12/6<br><a href="http://codeforces.com/gym/101173" target="_blank" rel="noopener">GYM 101173H</a> &#x56FE;&#x8F6C;&#x6811;+LCA<br><a href="http://codeforces.com/gym/101102/problem/C" target="_blank" rel="noopener">GYM 101102C</a> &#x7EBF;&#x6BB5;&#x6811;/set+&#x5751;&#x70B9;<br><a href="http://codeforces.com/gym/101102/problem/I" target="_blank" rel="noopener">GYM 101102I</a> &#x4E09;&#x5206;<br><a href="http://codeforces.com/gym/101102/problem/D" target="_blank" rel="noopener">GYM 101102D</a> &#x5355;&#x8C03;&#x6808;</p>
<p>12/5<br>&#x8865;&#x4E86;&#x4E00;&#x9053;&#x9898;&#xFF1A;<a href="http://codeforces.com/gym/101137" target="_blank" rel="noopener">GYM101137 F</a> dp + &#x7279;&#x5224;<br>&#x7136;&#x540E;&#x89C1;&#x8BC1;&#x4E86;tlsAK&#x4E86;&#x6BD4;&#x8D5B;&#xFF0C;&#x975E;&#x5E38;&#x4F18;&#x79C0;&#x554A;&#xFF01;</p>
<p>12/4<br>&#x53C8;&#x548C;tls&#x5F00;&#x4E86;&#x573A;&#x6BD4;&#x8D5B;&#xFF1A;<a href="http://codeforces.com/gym/101137" target="_blank" rel="noopener">tls&#x5F88;&#x4F18;&#x79C0;&#x554A;&#xFF01;</a></p>
<p>12/3<br>&#x548C;tls&#x6253;&#x4E86;&#x573A;&#x6BD4;&#x8D5B;&#xFF1A;<a href="http://codeforces.com/gym/101173" target="_blank" rel="noopener">tls&#x52B2;&#x554A;&#xFF01;</a></p>
<p>12/2<br><a href="http://www.spoj.com/problems/COT2/en/" target="_blank" rel="noopener">SPOJ COT2</a> &#x6811;&#x4E0A;&#x83AB;&#x961F;<br><a href="http://vjudge.net/problem/30421" target="_blank" rel="noopener">Aizu 1263</a> &#x6811;&#x4E0A;&#x6784;&#x9020;<br><a href="http://codeforces.com/contest/735/problem/E" target="_blank" rel="noopener">CF 381E</a> &#x6811;&#x578B;dp</p>
<p>12/1<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5213" target="_blank" rel="noopener">HDU 5213</a> &#x83AB;&#x961F;+&#x5BB9;&#x65A5;<br><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=446&amp;page=show_problem&amp;problem=4100" target="_blank" rel="noopener">UVA 1354</a> dfs+&#x679A;&#x4E3E;&#x5B50;&#x96C6;<br><a href="http://acm.fzu.edu.cn/problem.php?pid=2226" target="_blank" rel="noopener">FZU 2226</a> &#x83AB;&#x961F;+&#x66B4;&#x529B;</p>
<p>11/30<br>&#x548C;TJH&#x8001;&#x5E08;&#x5F00;&#x4E86;&#x573A;&#x706B;&#x8F66;&#xFF1A;<a href="http://codeforces.com/gym/101150" target="_blank" rel="noopener">Here</a><br>&#x6572;&#x4E86;&#x4E24;&#x9898;&#x6A21;&#x62DF;&#x3002;&#x3002;&#x3002;&#x3002;&#x6709;&#x70B9;&#x6162;&#x554A;&#x3002;&#x3002;&#x3002;&#x3002;&#x3002;</p>
<p>11/29<br>solo&#x4E86;&#x4E00;&#x573A;&#x6BD4;&#x8D5B;:<a href="http://codeforces.com/gym/101149" target="_blank" rel="noopener">Samara University ACM ICPC 2016-2017 Quarterfinal Qualification Contest</a></p>
<p>11/28<br><a href="http://codeforces.com/contest/739/problem/B" target="_blank" rel="noopener">CF 739B</a> &#x6811;<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5145" target="_blank" rel="noopener">HDU 5145</a> &#x83AB;&#x961F;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新技能：在队友状态不好的时候，也能完美补刀！&lt;br&gt;
    
    </summary>
    
      <category term="补刀记" scheme="http://yoursite.com/categories/%E8%A1%A5%E5%88%80%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Latex写PPT常用指令总结</title>
    <link href="http://yoursite.com/2017/01/19/Latex%E5%86%99PPT%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/01/19/Latex写PPT常用指令总结/</id>
    <published>2017-01-19T14:28:00.000Z</published>
    <updated>2017-01-19T14:57:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x88C5;&#x5FC5;&#x6709;&#x65B9;&#x3002;<br><a id="more"></a></p>
<h4 id="&#x5B8F;&#x5305;&#x4E0E;&#x4EE3;&#x7801;&#x683C;&#x5F0F;&#x8BBE;&#x7F6E;"><a href="#&#x5B8F;&#x5305;&#x4E0E;&#x4EE3;&#x7801;&#x683C;&#x5F0F;&#x8BBE;&#x7F6E;" class="headerlink" title="&#x5B8F;&#x5305;&#x4E0E;&#x4EE3;&#x7801;&#x683C;&#x5F0F;&#x8BBE;&#x7F6E;"></a>&#x5B8F;&#x5305;&#x4E0E;&#x4EE3;&#x7801;&#x683C;&#x5F0F;&#x8BBE;&#x7F6E;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">\documentclass{beamer}</span><br><span class="line">\usepackage{CJK}</span><br><span class="line">\usepackage{ulem}</span><br><span class="line">\usepackage{color}</span><br><span class="line">\usepackage{xcolor}</span><br><span class="line">\definecolor{keywordcolor}{rgb}{0.8,0.1,0.5}</span><br><span class="line">\usepackage{listings}</span><br><span class="line">%\usepackage{multicol}  %&#x52A0;&#x8F7D;&#x5305;</span><br><span class="line">\usepackage{amsmath} % &#x8C03;&#x7528;&#x516C;&#x5F0F;&#x5B8F;&#x5305;</span><br><span class="line">\usepackage{amssymb} % &#x6570;&#x5B66;&#x7B26;&#x53F7;&#x751F;&#x6210;&#x547D;&#x4EE4;</span><br><span class="line">%\usepackage{ctex}  %&#x52A0;&#x8F7D;&#x5305;&#xFF0C;&#x56E0;&#x4E3A;&#x6211;&#x4EEC;&#x5728;&#x7528;&#x4E2D;&#x6587;&#x5199;&#x6587;&#x6863;&#xFF0C;&#x6240;&#x4EE5;&#x5FC5;&#x987B;&#x52A0;&#x8F7D;&#x8FD9;&#x4E2A;&#x5305;&#xFF0C;&#x5426;&#x5219;&#x4E0D;&#x652F;&#x6301;&#x4E2D;&#x6587;</span><br><span class="line"></span><br><span class="line">\usetheme{Warsaw}</span><br><span class="line">%\usecolortheme{lily}</span><br><span class="line"></span><br><span class="line">%\definecolor{bottomcolor}{rgb}{0.32,0.3,0.38}</span><br><span class="line">%\definecolor{middlecolor}{rgb}{0.08,0.08,0.16}</span><br><span class="line">%\setbeamertemplate{background canvas}[vertical shading]</span><br><span class="line">%[bottom=bottomcolor, middle=middlecolor, top=black]</span><br><span class="line"></span><br><span class="line">% \setbeamercovered{transparent} &#x8BBE;&#x7F6E;&#x5206;&#x6B65;&#x6F14;&#x793A;&#x65F6;&#x534A;&#x900F;&#x660E;</span><br><span class="line">\setbeamercovered{dynamic} %&#x8BBE;&#x7F6E;&#x5206;&#x6B65;&#x6F14;&#x793A;&#x65F6;&#x989C;&#x8272;&#x4E3A;&#x6D45;&#x8272;</span><br><span class="line">\setbeamertemplate{footline}[frame number] %footline &#x663E;&#x793A;&#x9875;&#x7801;</span><br><span class="line"></span><br><span class="line">\lstset{language=C++, %&#x7528;&#x4E8E;&#x8BBE;&#x7F6E;&#x8BED;&#x8A00;&#x4E3A;C++</span><br><span class="line">    numbers=left, %&#x8BBE;&#x7F6E;&#x884C;&#x53F7;&#x4F4D;&#x7F6E;</span><br><span class="line">    numberstyle=\tiny, %&#x8BBE;&#x7F6E;&#x884C;&#x53F7;&#x5927;&#x5C0F;</span><br><span class="line">    keywordstyle=\color{keywordcolor} \bfseries,</span><br><span class="line">    identifierstyle=,</span><br><span class="line">    basicstyle=\ttfamily,</span><br><span class="line">    commentstyle=\color{blue} \textit, %&#x6CE8;&#x91CA;&#x989C;&#x8272;</span><br><span class="line">    stringstyle=\ttfamily,</span><br><span class="line">    showstringspaces=false,</span><br><span class="line">    frame=shadowbox, %&#x8FB9;&#x6846;</span><br><span class="line">    %frame = single,</span><br><span class="line">    tabsize=2, %&#x8BBE;&#x7F6E;tab&#x7A7A;&#x683C;&#x6570;</span><br><span class="line">    showspaces=false, %&#x4E0D;&#x663E;&#x793A;&#x7A7A;&#x683C;</span><br><span class="line">    escapeinside=``, %&#x9003;&#x9038;&#x5B57;&#x7B26;(1&#x5DE6;&#x9762;&#x7684;&#x952E;)&#xFF0C;&#x7528;&#x4E8E;&#x663E;&#x793A;&#x4E2D;&#x6587;</span><br><span class="line">    %breaklines, %&#x81EA;&#x52A8;&#x6298;&#x884C;</span><br><span class="line">    captionpos=b</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">\begin{document}</span><br><span class="line">\begin{CJK*}{GBK}{kai}</span><br><span class="line">......</span><br><span class="line">\end{CJK*}</span><br><span class="line">\end{document}</span><br></pre></td></tr></table></figure>
<p>&#x6CE8;&#x610F;&#x8BBE;&#x7F6E;&#x4EE3;&#x7801;&#x5757;&#x7684;PPT&#x9875;&#xFF1A;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\begin{frame}[fragile]</span><br><span class="line">...</span><br><span class="line">\end{frame}</span><br></pre></td></tr></table></figure>
<h4 id="&#x8BBE;&#x7F6E;&#x7A7A;&#x884C;"><a href="#&#x8BBE;&#x7F6E;&#x7A7A;&#x884C;" class="headerlink" title="&#x8BBE;&#x7F6E;&#x7A7A;&#x884C;"></a>&#x8BBE;&#x7F6E;&#x7A7A;&#x884C;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\vspace{6pt}</span><br></pre></td></tr></table></figure>
<h4 id="&#x8BBE;&#x7F6E;&#x5206;&#x680F;"><a href="#&#x8BBE;&#x7F6E;&#x5206;&#x680F;" class="headerlink" title="&#x8BBE;&#x7F6E;&#x5206;&#x680F;"></a>&#x8BBE;&#x7F6E;&#x5206;&#x680F;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">\begin{columns}[c]  %&#x5F00;&#x59CB;&#x8FDB;&#x5165;&#x5206;&#x680F;&#x73AF;&#x5883;&#xFF0C;&#x5C45;&#x4E2D;&#x8BBE;&#x7F6E;</span><br><span class="line"></span><br><span class="line">\column{5cm}  %&#x7B2C;&#x4E00;&#x680F;&#xFF08;&#x5DE6;&#x680F;&#xFF09;&#x5BBD;&#x5EA6;&#x4E3A;8cm</span><br><span class="line">    \begin{enumerate}  %&#x680F;&#x5185;&#x662F;&#x4E00;&#x4E2A;&#x5217;&#x8868;</span><br><span class="line">        \item{&#x5FEB;&#x901F;&#x5E42;&#x3001;&#x77E9;&#x9635;&#x5FEB;&#x901F;&#x5E42;}</span><br><span class="line">        \item{&#x8D39;&#x9A6C;&#x5C0F;&#x5B9A;&#x7406;}</span><br><span class="line">        \item{&#x4E58;&#x6CD5;&#x9006;&#x5143;}</span><br><span class="line">        \item{&#x6307;&#x6570;&#x964D;&#x5E42;&#x516C;&#x5F0F;}</span><br><span class="line">        \item{&#x7D20;&#x6570;&#x7B5B;&#x3001;&#x533A;&#x95F4;&#x7D20;&#x6570;&#x7B5B;}</span><br><span class="line">        \item {&#x6B27;&#x62C9;&#x51FD;&#x6570;}</span><br><span class="line">        \item{&#x5362;&#x5361;&#x65AF;&#x5B9A;&#x7406;}</span><br><span class="line">    \end{enumerate}</span><br><span class="line"></span><br><span class="line">\column{5cm}  %&#x7B2C;&#x4E8C;&#x680F;&#xFF08;&#x53F3;&#x680F;)&#x5BBD;&#x5EA6;&#x4E3A;3cm</span><br><span class="line">    \begin{enumerate}  %&#x680F;&#x5185;&#x662F;&#x4E8C;&#x4E2A;&#x5217;&#x8868;</span><br><span class="line">        \addtocounter{enumi}{7} %&#x6539;&#x53D8;&#x5217;&#x8868;&#x6807;&#x53F7;&#x8BA1;&#x6570;&#x5668;</span><br><span class="line">        \item{&#x6269;&#x5C55;&#x6B27;&#x51E0;&#x91CC;&#x5FB7;}</span><br><span class="line">        \item{&#x6A21;&#x7EBF;&#x6027;&#x65B9;&#x7A0B;&#x7EC4;}</span><br><span class="line">        \item{&#x4E2D;&#x56FD;&#x5269;&#x4F59;&#x5B9A;&#x7406;(CRT)}</span><br><span class="line">        \item{&#x79EF;&#x6027;&#x51FD;&#x6570;}</span><br><span class="line">        \item{&#x7EA6;&#x6570;&#x7B5B;}</span><br><span class="line">        \item{&#x83AB;&#x6BD4;&#x4E4C;&#x65AF;&#x53CD;&#x6F14;}</span><br><span class="line">        \item{FFT/NTT}</span><br><span class="line">    \end{enumerate}</span><br><span class="line"></span><br><span class="line">\end{columns}  %&#x5206;&#x680F;&#x73AF;&#x5883;&#x7ED3;&#x675F;</span><br></pre></td></tr></table></figure>
<h4 id="&#x6539;&#x53D8;&#x5B57;&#x4F53;&#x989C;&#x8272;"><a href="#&#x6539;&#x53D8;&#x5B57;&#x4F53;&#x989C;&#x8272;" class="headerlink" title="&#x6539;&#x53D8;&#x5B57;&#x4F53;&#x989C;&#x8272;"></a>&#x6539;&#x53D8;&#x5B57;&#x4F53;&#x989C;&#x8272;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\textcolor{red}{&#x5E38;&#x7528;&#x4E09;&#x89D2;&#x51FD;&#x6570;}</span><br></pre></td></tr></table></figure>
<h4 id="&#x6587;&#x5B57;&#x4E0A;&#x5220;&#x9664;&#x7EBF;&#x4E0B;&#x5212;&#x7EBF;"><a href="#&#x6587;&#x5B57;&#x4E0A;&#x5220;&#x9664;&#x7EBF;&#xFF0C;&#x4E0B;&#x5212;&#x7EBF;" class="headerlink" title="&#x6587;&#x5B57;&#x4E0A;&#x5220;&#x9664;&#x7EBF;&#xFF0C;&#x4E0B;&#x5212;&#x7EBF;"></a>&#x6587;&#x5B57;&#x4E0A;&#x5220;&#x9664;&#x7EBF;&#xFF0C;&#x4E0B;&#x5212;&#x7EBF;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\sout{&#x6587;&#x5B57;&#x4E0A;&#x5220;&#x9664;&#x7EBF;}</span><br><span class="line">\underline{&#x4E0B;&#x5212;&#x7EBF;}</span><br></pre></td></tr></table></figure>
<h4 id="&#x5206;&#x6B65;&#x6F14;&#x793A;"><a href="#&#x5206;&#x6B65;&#x6F14;&#x793A;" class="headerlink" title="&#x5206;&#x6B65;&#x6F14;&#x793A;"></a>&#x5206;&#x6B65;&#x6F14;&#x793A;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\pause</span><br></pre></td></tr></table></figure>
<h4 id="&#x5236;&#x4F5C;&#x8868;&#x683C;&#x4E0E;&#x5408;&#x5E76;&#x8868;&#x683C;"><a href="#&#x5236;&#x4F5C;&#x8868;&#x683C;&#x4E0E;&#x5408;&#x5E76;&#x8868;&#x683C;" class="headerlink" title="&#x5236;&#x4F5C;&#x8868;&#x683C;&#x4E0E;&#x5408;&#x5E76;&#x8868;&#x683C;"></a>&#x5236;&#x4F5C;&#x8868;&#x683C;&#x4E0E;&#x5408;&#x5E76;&#x8868;&#x683C;</h4><p><a href="http://jingyan.baidu.com/article/95c9d20d4c0920ec4e7561e1.html" target="_blank" rel="noopener">Link</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">\begin{tabular}{|l|c|c|c|c|c|}</span><br><span class="line">    \hline</span><br><span class="line">    &#x5F53;&#x524D;&#x904D;&#x5386;&#x5143;&#x7D20; &amp; \multicolumn{5}{|c|}{&#x6808;&#x4E2D;&#x4E0B;&#x6807;&#x76F8;&#x5E94;&#x5143;&#x7D20;} \\</span><br><span class="line">    \hline</span><br><span class="line">    \{1\} &amp; 1 &amp;  &amp; &amp; &amp; \\</span><br><span class="line">    \hline</span><br><span class="line">    \{1,3\} &amp; 1 &amp; 3 &amp; &amp; &amp; \\</span><br><span class="line">    \hline</span><br><span class="line">    \{1,3,2\} &amp; 1 &amp; 2 &amp; &amp; &amp; \\</span><br><span class="line">    \hline</span><br><span class="line">    \{1,3,2,5\} &amp; 1 &amp; 2 &amp; 5 &amp; &amp; \\</span><br><span class="line">    \hline</span><br><span class="line">    \{1,3,2,5,4\} &amp; 1 &amp;  2 &amp; 4 &amp; &amp; \\</span><br><span class="line">    \hline</span><br><span class="line">    \{1,3,2,5,4,3\} &amp; 1 &amp; 2  &amp; 3 &amp; &amp; \\</span><br><span class="line">    \hline</span><br><span class="line">    \{1,3,2,5,4,3,7\} &amp; 1 &amp; 2  &amp; 3 &amp; 7 &amp; \\</span><br><span class="line">    \hline</span><br><span class="line">\end{tabular}</span><br></pre></td></tr></table></figure>
<h4 id="&#x63D2;&#x5165;&#x56FE;&#x7247;"><a href="#&#x63D2;&#x5165;&#x56FE;&#x7247;" class="headerlink" title="&#x63D2;&#x5165;&#x56FE;&#x7247;"></a>&#x63D2;&#x5165;&#x56FE;&#x7247;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\begin{figure}[htpb]</span><br><span class="line">  \begin{center}</span><br><span class="line">    \includegraphics[width=1\linewidth]{pic.jpg}</span><br><span class="line">  \end{center}</span><br><span class="line">\end{figure}</span><br></pre></td></tr></table></figure>
<p>&#x6CE8;&#x610F;&#x56FE;&#x7247;&#x7684;&#x540D;&#x79F0;&#x4E0E;&#x56FE;&#x7247;&#x7684;&#x683C;&#x5F0F;&#x3002;</p>
<h4 id="&#x8BBE;&#x7F6E;&#x5206;&#x6B65;&#x6F14;&#x793A;&#x65F6;&#x8986;&#x76D6;&#x4E4B;&#x524D;&#x7684;&#x5185;&#x5BB9;"><a href="#&#x8BBE;&#x7F6E;&#x5206;&#x6B65;&#x6F14;&#x793A;&#x65F6;&#x8986;&#x76D6;&#x4E4B;&#x524D;&#x7684;&#x5185;&#x5BB9;" class="headerlink" title="&#x8BBE;&#x7F6E;&#x5206;&#x6B65;&#x6F14;&#x793A;&#x65F6;&#x8986;&#x76D6;&#x4E4B;&#x524D;&#x7684;&#x5185;&#x5BB9;"></a>&#x8BBE;&#x7F6E;&#x5206;&#x6B65;&#x6F14;&#x793A;&#x65F6;&#x8986;&#x76D6;&#x4E4B;&#x524D;&#x7684;&#x5185;&#x5BB9;</h4><p>&#x4F8B;&#x5982;&#x56FE;&#x7247;&#xFF1A;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">\begin{figure}[htpb]</span><br><span class="line">  \begin{center}</span><br><span class="line">    \only&lt;1&gt;{\includegraphics[width=0.4\linewidth]{1.jpg}}</span><br><span class="line">    \only&lt;2&gt;{\includegraphics[width=0.4\linewidth]{2.jpg}}</span><br><span class="line">    \only&lt;3&gt;{\includegraphics[width=0.4\linewidth]{3.jpg}}</span><br><span class="line">    \only&lt;4&gt;{\includegraphics[width=0.4\linewidth]{4.jpg}}</span><br><span class="line">    \only&lt;5&gt;{\includegraphics[width=0.4\linewidth]{5.jpg}}</span><br><span class="line">    \only&lt;6&gt;{\includegraphics[width=0.4\linewidth]{6.jpg}}</span><br><span class="line">    \only&lt;7&gt;{\includegraphics[width=0.4\linewidth]{7.jpg}}</span><br><span class="line">    \only&lt;8&gt;{\includegraphics[width=0.4\linewidth]{8.jpg}}</span><br><span class="line">    \only&lt;9&gt;{\includegraphics[width=0.4\linewidth]{9.jpg}}</span><br><span class="line">    \only&lt;10&gt;{\includegraphics[width=0.4\linewidth]{10.jpg}}</span><br><span class="line">    \only&lt;11&gt;{\includegraphics[width=0.4\linewidth]{11.jpg}}</span><br><span class="line">    \only&lt;12&gt;{\includegraphics[width=0.4\linewidth]{12.jpg}}</span><br><span class="line">  \end{center}</span><br><span class="line">\end{figure}</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;装必有方。&lt;br&gt;
    
    </summary>
    
      <category term="利其器" scheme="http://yoursite.com/categories/%E5%88%A9%E5%85%B6%E5%99%A8/"/>
    
    
      <category term="Latex" scheme="http://yoursite.com/tags/Latex/"/>
    
  </entry>
  
  <entry>
    <title>2017 SUDA ACM-ICPC Team Winter Training Day6</title>
    <link href="http://yoursite.com/2017/01/18/2017-SUDA-ACM-ICPC-Team-Winter-Training-Day6/"/>
    <id>http://yoursite.com/2017/01/18/2017-SUDA-ACM-ICPC-Team-Winter-Training-Day6/</id>
    <published>2017-01-18T05:11:12.000Z</published>
    <updated>2017-01-21T12:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/pdf/2017Day6.pdf">PDF&#x4E0B;&#x8F7D;</a><br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/pdf/2017Day6.pdf&quot;&gt;PDF下载&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
  </entry>
  
  <entry>
    <title>2017 Facebook Hacker Cup Round1</title>
    <link href="http://yoursite.com/2017/01/17/2017-Facebook-Hacker-Cup-Round1/"/>
    <id>http://yoursite.com/2017/01/17/2017-Facebook-Hacker-Cup-Round1/</id>
    <published>2017-01-17T07:14:31.000Z</published>
    <updated>2017-01-27T08:17:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x9898;&#x76EE;&#x94FE;&#x63A5;&#xFF1A;<a href="https://www.facebook.com/hackercup/problem/1760870734198100/" target="_blank" rel="noopener">Here</a><br><a id="more"></a></p>
<h4 id="a-pie-progress"><a href="#A-Pie-Progress" class="headerlink" title="A: Pie Progress"></a>A: Pie Progress</h4><p>$n\leq 300$&#x5929;&#x6BCF;&#x5929;&#x5FC5;&#x987B;&#x5403;&#x4E00;&#x4E2A;&#x86CB;&#x7CD5;,&#x8FD9;&#x4E2A;&#x86CB;&#x7CD5;&#x53EF;&#x4EE5;&#x662F;&#x4E4B;&#x524D;&#x4E70;&#x7684;&#x4E5F;&#x53EF;&#x4EE5;&#x662F;&#x5F53;&#x5929;&#x4E70;&#x7684;&#xFF0C;&#x79CD;&#x7C7B;&#x4E0D;&#x9650;&#x3002;&#x6709;$m\leq 300$&#x79CD;&#x86CB;&#x7CD5;&#xFF0C;&#x7ED9;&#x51FA;&#x5546;&#x5E97;$n$&#x5929;&#x552E;&#x5356;&#x8FD9;$m$&#x79CD;&#x86CB;&#x7CD5;&#x6BCF;&#x5929;&#x7684;&#x4EF7;&#x683C;&#xFF0C;&#x6BCF;&#x5929;&#x6BCF;&#x79CD;&#x86CB;&#x7CD5;&#x53EA;&#x552E;&#x5356;&#x4E00;&#x4E2A;&#xFF0C;&#x6C42;&#x6700;&#x5C0F;&#x82B1;&#x8D39;&#xFF1F;</p>
<p>dp&#x89E3;&#x51B3;&#x3002;&#x7528;$dp[i][j]$&#x8868;&#x793A;&#x524D;$i$&#x5929;&#x8D2D;&#x4E70;$j$&#x4E2A;&#x86CB;&#x7CD5;&#x7684;&#x6700;&#x5C0F;&#x82B1;&#x8D39;&#x3002;&#x8003;&#x8651;&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#xFF1A;<br>$$dp[i][j] = dp[i - 1][j - k] + sum[i][k]$$<br>$sum[i][k]$&#x8868;&#x793A;&#x7B2C;$i$&#x5929;&#x552E;&#x5356;&#x7684;&#x524D;$k$&#x4E2A;&#x4FBF;&#x5B9C;&#x7684;&#x86CB;&#x7CD5;&#x4EF7;&#x683C;&#x4E4B;&#x548C;&#x3002;</p>
<p>&#x6709;&#x4E2A;trick point&#x554A;&#x3002;&#x8981;&#x6CE8;&#x610F;$j - k \geq i - 1$&#x554A;&#xFF0C;&#x56E0;&#x4E3A;&#x8981;&#x4FDD;&#x8BC1;&#x524D;$i$&#x5929;&#x6BCF;&#x5929;&#x90FD;&#x8981;&#x6709;&#x86CB;&#x7CD5;&#x3002;</p>
<p>&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;$O(n*m*\log m + n^{2}*m)$</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f</span>ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">310</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_M = <span class="number">310</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, m, cases = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> dp[MAX_N][MAX_M], sum[MAX_N][MAX_M], data[MAX_N][MAX_M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{    </span><br><span class="line"> <span class="comment">//   freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">  <span class="comment">//  freopen(&quot;1.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) {</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data[i][j]);</span><br><span class="line">            }</span><br><span class="line">            sort(data[i] + <span class="number">1</span>, data[i] + <span class="number">1</span> + m);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) {</span><br><span class="line">                sum[i][j] = sum[i][j - <span class="number">1</span>] + data[i][j];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> (dp));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= min(n, i * m); ++j) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= min(j, m); ++k) {</span><br><span class="line">                    <span class="keyword">if</span> (j - k &lt; i - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">                    dp[i][j] = min(dp[i][j], dp[i - <span class="number">1</span>][j - k] + sum[i][k] + k * k);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case #%d: %d\n&quot;</span>, ++cases, dp[n][n]);</span><br><span class="line">    }   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h4 id="bfighting-the-zombies"><a href="#B-Fighting-the-Zombies" class="headerlink" title="B:Fighting the Zombies"></a>B:Fighting the Zombies</h4><p>&#x5E73;&#x9762;&#x4E0A;&#x7ED9;&#x51FA;$n\leq 50$&#x6574;&#x6570;&#x70B9;&#x7684;&#x5750;&#x6807;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x9009;&#x62E9;&#x7528;&#x4E00;&#x4E2A;&#x8FB9;&#x957F;&#x4E3A;$R\leq 10^9$&#x7684;&#x6B63;&#x65B9;&#x5F62;&#x6846;&#x4F4F;&#x4E00;&#x4E9B;&#x70B9;&#xFF0C;&#x540C;&#x65F6;&#x8FD8;&#x53EF;&#x4EE5;&#x9009;&#x62E9;&#x4EFB;&#x610F;&#x4E00;&#x70B9;$(x_0,y_0)$&#x4E3A;&#x5706;&#x5FC3;&#xFF0C;&#x534A;&#x5F84;&#x4EFB;&#x610F;&#x5927;&#xFF0C;&#x628A;&#x8FD9;&#x4E2A;&#x5706;&#x8986;&#x76D6;&#x7684;&#x70B9;&#xFF0C;&#x5411;&#x4E0A;&#x5411;&#x4E0B;&#x5411;&#x5DE6;&#x5411;&#x53F3;&#x4EFB;&#x610F;&#x6A2A;&#x5E73;&#x7AD6;&#x76F4;&#x5E73;&#x79FB;&#xFF0C;&#x7136;&#x540E;&#x4F7F;&#x5F97;&#x9009;&#x62E9;&#x7684;&#x6B63;&#x65B9;&#x5F62;&#x6846;&#x4F4F;&#x7684;&#x70B9;&#x6700;&#x591A;&#xFF0C;&#x8F93;&#x51FA;&#x6700;&#x591A;&#x53EF;&#x4EE5;&#x6846;&#x4F4F;&#x591A;&#x5C11;&#x70B9;&#xFF1F;&#x70B9;&#x5728;&#x6B63;&#x65B9;&#x5F62;&#x8FB9;&#x4E0A;&#x4E5F;&#x662F;&#x5141;&#x8BB8;&#x7684;&#x3002;</p>
<p>&#x505A;&#x8FD9;&#x4E2A;&#x9898;&#x4E4B;&#x524D;&#x53EF;&#x4EE5;&#x505A;&#x4E00;&#x505A;<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4007" target="_blank" rel="noopener">HDU 4007</a>&#x3002;</p>
<p>&#x56E0;&#x4E3A;&#x9009;&#x62E9;&#x7684;&#x5706;&#x7684;&#x5706;&#x5FC3;&#x4EFB;&#x610F;&#x7684;&#xFF0C;&#x534A;&#x5F84;&#x4EFB;&#x610F;&#x7684;&#xFF0C;&#x5E73;&#x79FB;&#x4E5F;&#x53EA;&#x80FD;&#x6A2A;&#x5E73;&#x7AD6;&#x76F4;&#x5E73;&#x79FB;&#xFF0C;&#x6240;&#x4EE5;&#x7B49;&#x4EF7;&#x4E8E;&#x5C06;&#x53E6;&#x4E00;&#x4E2A;&#x8FB9;&#x957F;&#x4E3A;$R$&#x7684;&#x6B63;&#x65B9;&#x5F62;&#x6846;&#x4F4F;&#x7684;&#x70B9;&#x5E73;&#x79FB;&#x8FC7;&#x6765;&#xFF0C;&#x7136;&#x540E;&#x4E24;&#x4E2A;&#x6B63;&#x65B9;&#x5F62;&#x91CC;&#x7684;&#x70B9;&#x53D6;&#x5E76;&#xFF08;&#x56E0;&#x4E3A;&#x53EF;&#x80FD;&#x6709;&#x7684;&#x70B9;&#x88AB;&#x6846;&#x4F4F;&#x4E86;&#x4E24;&#x6B21;&#xFF09;&#x3002;</p>
<p>&#x662F;&#x4E0D;&#x662F;&#x53EF;&#x4EE5;&#x9009;&#x62E9;&#x679A;&#x4E3E;&#x6B63;&#x65B9;&#x5F62;&#x9876;&#x70B9;&#x7136;&#x540E;&#x56DB;&#x4E2A;&#x65B9;&#x5411;&#x679A;&#x4E3E;&#x5462;&#xFF1F;too naive&#x3002;&#x3002;&#x3002;&#x3002;&#x3002;&#x3002;</p>
<p>&#x5B9E;&#x9645;&#x4E0A;&#x53EF;&#x4EE5;&#x5148;&#x628A;&#x6240;&#x6709;&#x70B9;&#x6309;&#x7167;y&#x4F18;&#x5148;x&#x5176;&#x6B21;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5E8F;&#xFF0C;&#x7136;&#x540E;&#x5C3A;&#x53D6;&#x9009;&#x62E9;$Y[i]+R$&#x4E4B;&#x5185;&#x7684;&#x6240;&#x6709;&#x70B9;(&#x4E0A;&#x4E0B;&#x754C;&#x786E;&#x5B9A;&#x4E86;)&#xFF0C;&#x518D;&#x628A;&#x8FD9;&#x4E9B;&#x70B9;&#x6309;&#x7167;x&#x4F18;&#x5148;y&#x5176;&#x6B21;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5E8F;&#xFF0C;&#x518D;&#x5C3A;&#x53D6;&#x9009;&#x62E9;$X[j]+R$&#x4E4B;&#x5185;&#x7684;&#x6240;&#x6709;&#x70B9;(&#x5DE6;&#x53F3;&#x754C;)&#x3002;&#x8FD9;&#x91CC;&#x7684;&#x590D;&#x6742;&#x5EA6;&#x662F;&#xFF1A;$O(n^2\log n)$</p>
<p>&#x9009;&#x62E9;&#x4E00;&#x4E2A;&#x6B63;&#x65B9;&#x5F62;&#x6846;&#x4F4F;&#x4E4B;&#x540E;&#xFF0C;&#x53EF;&#x4EE5;&#x628A;&#x8FD9;&#x4E9B;&#x70B9;&#x6807;&#x8BB0;&#x6389;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x91CD;&#x65B0;&#x5904;&#x7406;&#x4E00;&#x6B21;&#x5C31;&#x53BB;&#x91CD;&#x4E86;&#x3002;</p>
<p>&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;$O(n^4\log ^{2}{n})$</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f</span>ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = {{<span class="number">1</span>, <span class="number">1</span>}, {<span class="number">-1</span>, <span class="number">1</span>}, {<span class="number">-1</span>, <span class="number">-1</span>}, {<span class="number">1</span>, <span class="number">-1</span>}};</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, cases = <span class="number">0</span>, R;</span><br><span class="line"><span class="keyword">int</span> vis[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> {</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line"></span><br><span class="line">    Point() {}</span><br><span class="line">    Point(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y): x(_x), y(_y) {}</span><br><span class="line">} P[<span class="number">55</span>], store[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; S; </span><br><span class="line"><span class="built_in">set</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt;:: iterator it;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp_y</span><span class="params">(<span class="keyword">const</span> Point P1, <span class="keyword">const</span> Point P2)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> P1.y == P2.y ? P1.x &lt; P2.x : P1.y &lt; P2.y;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp_x</span><span class="params">(<span class="keyword">const</span> Point P1, <span class="keyword">const</span> Point P2)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> P1.x == P2.x ? P1.y &lt; P2.y : P1.x &lt; P2.x;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="built_in">set</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; tS)</span> </span>{</span><br><span class="line">    Point V[<span class="number">55</span>], Q[<span class="number">55</span>];</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (it = tS.begin(); it != tS.end(); ++it) {</span><br><span class="line">        V[tot++] = Point((*it).fi, (*it).se);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    sort(V, V + tot, cmp_y);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>, ed = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i) {</span><br><span class="line">        <span class="keyword">while</span> (ed &lt; tot &amp;&amp; V[ed].y &lt;= V[i].y + R) ++ed;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; ed; ++j) Q[cnt++] = V[j];</span><br><span class="line">        sort(Q, Q + cnt, cmp_x);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ed1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; ++j) {</span><br><span class="line">            <span class="keyword">while</span> (ed1 &lt; cnt &amp;&amp; Q[ed1].x &lt;= Q[j].x + R) ++ed1;</span><br><span class="line">            ret = max(ret, ed1 - j);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{    </span><br><span class="line">   <span class="comment">// freopen(&quot;2.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">   <span class="comment">// freopen(&quot;2.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) {</span><br><span class="line">        S.clear();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;R);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) {</span><br><span class="line">            <span class="keyword">int</span> x, y;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;P[i].x, &amp;P[i].y);</span><br><span class="line">            S.insert(mp(P[i].x, P[i].y));</span><br><span class="line">        }</span><br><span class="line">        sort(P, P + n, cmp_y);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, ed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) {</span><br><span class="line">            <span class="keyword">while</span> (ed &lt; n &amp;&amp; P[ed].y &lt;= R + P[i].y) ++ed;</span><br><span class="line">            <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; ed; ++j) store[tot++] = P[j];</span><br><span class="line"></span><br><span class="line">            sort(store, store + tot, cmp_x);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> ed2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tot; ++j) {</span><br><span class="line">                <span class="keyword">while</span> (ed2 &lt; tot &amp;&amp; store[ed2].x &lt;= R + store[j].x) {</span><br><span class="line">                    S.erase(mp(store[ed2].x, store[ed2].y));</span><br><span class="line">                    ++ed2;</span><br><span class="line">                }</span><br><span class="line">                ans = max(ans, ed2 - j + solve(S));</span><br><span class="line">                S.insert(mp(store[j].x, store[j].y));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case #%d: %d\n&quot;</span>, ++cases, ans);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h4 id="cmanic-moving"><a href="#C-Manic-Moving" class="headerlink" title="C:Manic Moving"></a>C:Manic Moving</h4><p>&#x6709;$K\leq 5000$&#x4E2A;&#x8D27;&#x7269;&#x8981;&#x642C;&#x8FD0;&#xFF0C;$n\leq 100$&#x4E2A;&#x70B9;&#x548C;$m\leq 5000$&#x6761;&#x65E0;&#x5411;&#x8FB9;&#xFF0C;&#x7136;&#x540E;&#x6709;&#x4E00;&#x8F86;&#x8D27;&#x8F66;&#xFF0C;&#x521D;&#x59CB;&#x65F6;&#x5728;1&#x53F7;&#x70B9;&#xFF0C;&#x8D27;&#x8F66;&#x6700;&#x591A;&#x53EF;&#x4EE5;&#x5BB9;&#x7EB3;&#x4E24;&#x4E2A;&#x8D27;&#x7269;&#x3002;&#x4F46;&#x662F;&#x642C;&#x8FD0;&#x65F6;&#x8981;&#x9075;&#x5FAA;&#x4E24;&#x4E2A;&#x6761;&#x4EF6;&#xFF1A;&#x5BF9;&#x4E8E;$i$&#x53F7;&#x8D27;&#x7269;&#x548C;$j$&#x53F7;&#x8D27;&#x7269;&#x4E14;$i &lt; j$&#xFF1A;</p>
<ul>
<li>&#x7B2C;$i$&#x53F7;&#x8D27;&#x7269;&#x5FC5;&#x987B;&#x6BD4;&#x7B2C;$j$&#x53F7;&#x8D27;&#x7269;&#x5148;&#x4E0A;&#x8F66;</li>
<li>&#x7B2C;$i$&#x53F7;&#x8D27;&#x7269;&#x5FC5;&#x987B;&#x6BD4;&#x7B2C;$j$&#x53F7;&#x8D27;&#x7269;&#x5148;&#x4E0B;&#x8F66;</li>
</ul>
<p>&#x6C42;&#x642C;&#x8FD0;&#x5B8C;&#x7684;&#x6700;&#x5C11;&#x884C;&#x9A76;&#x8DEF;&#x7A0B;&#xFF1F;&#x65E0;&#x6CD5;&#x5B8C;&#x6210;&#xFF0C;&#x8F93;&#x51FA;-1&#x3002;</p>
<p>&#x5148;&#x7528;Floyd()&#x7B97;&#x6CD5;&#x6C42;&#x51FA;&#x5168;&#x6E90;&#x6700;&#x77ED;&#x8DEF;&#x3002;&#x5982;&#x679C;&#x56FE;&#x4E0D;&#x8FDE;&#x901A;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x662F;-1&#x3002;&#x5426;&#x5219;&#x5F00;&#x59CB;dp&#x3002;&#x5176;&#x5B9E;&#x89C4;&#x5219;&#x5C31;&#x662F;&#x8F66;&#x4E0A;&#x6700;&#x591A;&#x53EA;&#x4F1A;&#x5B58;&#x5728;$i-1,i$&#x4E24;&#x4E2A;&#x8D27;&#x7269;&#xFF0C;&#x6CE8;&#x610F;&#x884C;&#x9A76;&#x987A;&#x5E8F;&#x5C31;&#x597D;&#x4E86;&#x3002;</p>
<p>&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;$O(n^3+K^2)$<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, m, K, cases = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5010</span>], b[<span class="number">5010</span>];</span><br><span class="line">ll dp[<span class="number">5010</span>], dis[MAX_N][MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k) {</span><br><span class="line">                <span class="keyword">if</span> (dis[i][k] == INF || dis[k][j] == INF) <span class="keyword">continue</span>;</span><br><span class="line">                dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{    </span><br><span class="line">    freopen(<span class="string">&quot;3.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">&quot;3_1.out&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) {</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> (dp));</span><br><span class="line">        <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> (dis));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;K);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) dis[i][i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) {</span><br><span class="line">            <span class="keyword">int</span> u, v, w;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">            dis[u][v] = dis[v][u] = min(dis[u][v], <span class="number">1l</span>l * w);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Floyd();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= K; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a[i], &amp;b[i]);</span><br><span class="line">        <span class="keyword">if</span> (dis[<span class="number">1</span>][a[<span class="number">1</span>]] == INF) flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= K; ++i) {</span><br><span class="line">            <span class="keyword">if</span> (flag) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= K; ++j) {</span><br><span class="line">                <span class="keyword">if</span> (dis[a[i]][b[j]] == INF) flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (flag) <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (flag) <span class="built_in">printf</span>(<span class="string">&quot;Case #%d: -1\n&quot;</span>, ++cases);</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            a[<span class="number">0</span>] = b[<span class="number">0</span>] = <span class="number">1</span>; dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= K; ++i) {</span><br><span class="line">                dp[i] = dp[i - <span class="number">1</span>] + dis[b[i - <span class="number">1</span>]][a[i]] + dis[a[i]][b[i]];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (i &gt;= <span class="number">2</span>) {</span><br><span class="line">                    ll tmp = dis[b[i - <span class="number">2</span>]][a[i - <span class="number">1</span>]] + dis[a[i - <span class="number">1</span>]][a[i]];</span><br><span class="line">                    tmp += dis[a[i]][b[i - <span class="number">1</span>]] + dis[b[i - <span class="number">1</span>]][b[i]];</span><br><span class="line">                    dp[i] = min(dp[i], dp[i - <span class="number">2</span>] + tmp);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Case #%d: %lld\n&quot;</span>, ++cases, dp[K]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
<h4 id="dbeach-umbrellas"><a href="#D-Beach-Umbrellas" class="headerlink" title="D:Beach Umbrellas"></a>D:Beach Umbrellas</h4><p>&#x6709;$n\leq 2000$&#x628A;&#x96E8;&#x4F1E;&#xFF0C;&#x6BCF;&#x4E2A;&#x96E8;&#x4F1E;&#x7684;&#x534A;&#x5F84;&#x662F;$R[i]\leq 2000$&#xFF0C;&#x4E00;&#x6392;&#x6709;$m\leq 10^9$&#x4E2A;&#x653E;&#x4F1E;&#x70B9;&#xFF0C;&#x76F8;&#x90BB;&#x653E;&#x4F1E;&#x70B9;&#x95F4;&#x8DDD;1&#x7C73;&#xFF0C;&#x8981;&#x6C42;&#x653E;&#x4F1E;&#x4E0D;&#x80FD;&#x76F8;&#x4E92;&#x91CD;&#x53E0;(&#x96E8;&#x4F1E;&#x662F;&#x5B8C;&#x5168;&#x6253;&#x5F00;&#x7684;)&#x3002;&#x6C42;&#x65B9;&#x6848;&#x6570;&#x6A21;$1e9+7$&#x3002;</p>
<p>&#x6CE8;&#x610F;&#x96E8;&#x4F1E;&#x53EF;&#x4EE5;&#x653E;&#x5728;&#x6700;&#x5DE6;&#x6700;&#x53F3;&#x4E24;&#x70B9;&#x3002;&#x5F53;$n=1$&#x65F6;&#xFF0C;$Ans=m$&#x3002;</p>
<p>&#x9996;&#x5148;&#x8003;&#x8651;&#x5F53;&#x4E00;&#x6392;&#x6709;$L$&#x4E2A;&#x653E;&#x4F1E;&#x70B9;&#x65F6;&#xFF0C;&#x5E76;&#x4E14;&#x653E;&#x4F1E;&#x4E0D;&#x80FD;&#x8D85;&#x51FA;&#x4F1E;&#x7684;&#x8FB9;&#x754C;&#x65F6;&#x7684;&#x60C5;&#x51B5;&#x3002;&#x8BBE;<br>$$sum = \sum_{i=1}^{n} 2*R[i]$$<br>&#x90A3;&#x4E48;&#x653E;&#x5B8C;&#x8FD9;&#x4E9B;&#x4F1E;&#x540E;&#x8FD8;&#x5269;&#x4E0B;$L - sum$&#x4E2A;&#x7A7A;&#x70B9;&#xFF0C;&#x5982;&#x4F55;&#x8BA1;&#x7B97;&#x65B9;&#x6848;&#x6570;&#x5462;&#xFF1F;&#x6211;&#x4EEC;&#x8003;&#x8651;&#x76F8;&#x90BB;&#x4E24;&#x628A;&#x4F1E;&#x7684;&#x95F4;&#x8DDD;$x_i(i\in [0,n])$&#xFF0C;&#x5176;&#x4E2D;$x_0$&#x662F;&#x7B2C;&#x4E00;&#x628A;&#x4F1E;&#x4E4B;&#x524D;&#x7684;&#x7A7A;&#x70B9;&#x6570;&#xFF0C;$x_1$&#x662F;&#x7B2C;&#x4E8C;&#x628A;&#x4F1E;&#x548C;&#x7B2C;&#x4E00;&#x628A;&#x4F1E;&#x4E4B;&#x95F4;&#x7684;&#x7A7A;&#x70B9;&#x6570;&#xFF0C;$x_2$&#x662F;&#x7B2C;&#x4E09;&#x628A;&#x4F1E;&#x548C;&#x7B2C;&#x4E8C;&#x628A;&#x4F1E;&#x4E4B;&#x95F4;&#x7684;&#x7A7A;&#x70B9;&#x6570;&#x3002;&#x3002;&#x3002;&#x3002;&#x3002;$x_{n-1}$&#x662F;&#x7B2C;$n$&#x628A;&#x4F1E;&#x548C;&#x7B2C;$n-1$&#x4F1E;&#x4E4B;&#x95F4;&#x7684;&#x7A7A;&#x70B9;&#x6570;&#xFF0C;$x_n$&#x662F;&#x7B2C;$n$&#x628A;&#x4F1E;&#x4E4B;&#x540E;&#x7684;&#x7A7A;&#x70B9;&#x6570;&#x3002;&#x663E;&#x7136;&#x9700;&#x8981;&#x6EE1;&#x8DB3;:<br>$$<br>\sum_{i=0}^{n} x_{i} = L - sum (x_{i} \geq 0)<br>$$<br>&#x8F6C;&#x5316;&#x4E00;&#x4E0B;&#xFF1A;<br>$$<br>\sum_{i=0}^{n} x_{i} = L - sum + n + 1 (x_{i} \geq 1)<br>$$<br>&#x8FD9;&#x4E2A;&#x7528;&#x63D2;&#x677F;&#x6CD5;&#x5C31;&#x77E5;&#x9053;&#x89E3;&#x7684;&#x65B9;&#x6848;&#x6570;&#x662F;$C_{L-sum + n + 1}^{n}$&#x3002;</p>
<p>&#x8FD9;&#x4E2A;&#x65B9;&#x6848;&#x7684;&#x5B9E;&#x9645;&#x542B;&#x4E49;&#x662F;&#x4EC0;&#x4E48;&#xFF1F;&#x5176;&#x5B9E;&#x5C31;&#x662F;&#x5F53;&#x6211;&#x4EEC;&#x63D2;&#x7B2C;&#x4E00;&#x628A;&#x4F1E;&#x4E4B;&#x524D;&#xFF0C;&#x5148;&#x7A7A;&#x4E0B;$x_0$&#x4E2A;&#x70B9;&#xFF0C;&#x7136;&#x540E;&#x63D2;&#x7B2C;&#x4E00;&#x628A;&#x4F1E;&#xFF0C;&#x7136;&#x540E;&#x7B2C;&#x4E00;&#x628A;&#x4F1E;&#x4E4B;&#x540E;&#x7A7A;$x_1$&#x4E2A;&#x7A7A;&#x70B9;&#x3002;&#x3002;&#x3002;&#x3002;&#x3002;&#x8FD9;&#x6837;&#x5B50;&#x5B89;&#x6392;&#x4E00;&#x5B9A;&#x662F;&#x5408;&#x6CD5;&#x7684;&#x3002;&#x518D;&#x8003;&#x8651;&#x9009;&#x62E9;&#x63D2;&#x4F1E;&#x7684;&#x987A;&#x5E8F;&#xFF0C;&#x6709;$n!$&#x79CD;&#x3002;</p>
<p>&#x90A3;&#x4E48;&#x56DE;&#x5230;&#x539F;&#x6765;&#x7684;&#x95EE;&#x9898;&#x5462;&#xFF1F;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x679A;&#x4E3E;&#x4E24;&#x7AEF;&#x653E;&#x7F6E;&#x7684;&#x4F1E;:$R[i]$&#x548C;$R[j]$&#x3002;&#x7136;&#x540E;&#x603B;&#x7684;&#x957F;&#x5EA6;&#x5C31;&#x53EF;&#x4EE5;&#x53D8;&#x6210;&#x4E86;$L = m + R[i] + R[j]$&#x4E86;&#x3002;&#x8FD8;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#xFF0C;&#x65B9;&#x6848;&#x6570;&#x53EA;&#x548C;$R[i]+R[j]$&#x7684;&#x5177;&#x4F53;&#x503C;&#x6709;&#x5173;&#xFF0C;&#x53EF;&#x4EE5;&#x5148;&#x9884;&#x5904;&#x7406;&#x51FA;&#x6765;&#xFF0C;&#x8BB0;&#x5F55;&#x4E2A;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x626B;&#x4E00;&#x904D;&#x5C31;&#x7D2F;&#x52A0;&#x6C42;&#x548C;&#x5C31;&#x884C;&#x4E86;&#x3002;</p>
<p>&#x8FD8;&#x5269;&#x4E0B;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x7B80;&#x5316;&#x4E3A;$C_{n}^{m} % mod (mod = 10^9+7, n\leq 10^9, m\leq 10^3)$&#x600E;&#x4E48;&#x6C42;&#xFF1F;&#x5F88;&#x7B80;&#x5355;&#x7684;&#xFF1A;$C_{n}^{m}=\frac{n!}{(n-m)! * m!}=\frac{n*(n-1)*&#x2026;*(n-m+1)}{m!}$&#x3002;$m$&#x53EA;&#x6709;$10^3$&#x7EA7;&#x522B;&#xFF0C;&#x90A3;&#x5C31;&#x53EF;&#x4EE5;&#x89E3;&#x51B3;&#x4E86;&#xFF1A;&#x6C42;&#x51FA;&#x5206;&#x5B50;&#xFF0C;&#x5206;&#x6BCD;&#xFF0C;&#x518D;&#x7528;&#x9006;&#x5143;&#x548C;&#x8D39;&#x9A6C;&#x5C0F;&#x5B9A;&#x7406;&#x3002;</p>
<p>&#x6700;&#x540E;&#x8FD8;&#x53EF;&#x80FD;&#x9700;&#x8981;fix&#x4E00;&#x4E0B;&#x3002;&#x3002;&#x3002;&#x3002;&#x3002;&#x3002;</p>
<p>&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;$O(n^2)$</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = (ll)(<span class="number">1e9</span>) + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Qpow</span><span class="params">(ll a, ll b)</span> </span>{</span><br><span class="line">    ll ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) {</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = ret * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">C</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (y &gt; x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll ret1 = <span class="number">1</span>, ret2 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) {</span><br><span class="line">        ret1 = ret1 * x % mod;</span><br><span class="line">        ret2 = ret2 * y % mod;</span><br><span class="line">        y--, x--;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ret1 * Qpow(ret2, mod - <span class="number">2</span>) % mod;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">2010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, m, cases = <span class="number">0</span>, sum = <span class="number">0</span>, Max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> R[MAX_N], cnt[MAX_N * <span class="number">2</span>];</span><br><span class="line">ll fac[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>{</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Max; ++i) {</span><br><span class="line">        <span class="keyword">if</span> (cnt[i] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> t = m + i - sum + n - <span class="number">1</span>;</span><br><span class="line">        ans += C(t, n) * cnt[i] % mod;</span><br><span class="line">      <span class="comment">//  printf(&quot;C(%d, %d) = %lld cnt[%d] = %d\n&quot;, t, n, C(t, n), i, cnt[i]);</span></span><br><span class="line">        <span class="keyword">if</span> (ans &gt;= mod) ans -= mod;</span><br><span class="line">    }</span><br><span class="line">    ans = ans * fac[n - <span class="number">2</span>] % mod * <span class="number">2</span> % mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Case #%d: %lld\n&quot;</span>, ++cases, ans);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAX_N; ++i) fac[i] = fac[i - <span class="number">1</span>] * i % mod;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;R[i]), sum += <span class="number">2</span> * R[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Case #%d: %d\n&quot;</span>, ++cases, m);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Max = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> (cnt));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j) {</span><br><span class="line">                cnt[R[i] + R[j]]++;</span><br><span class="line">                Max = max(Max, R[i] + R[j]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        solve();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://www.facebook.com/hackercup/problem/1760870734198100/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Here&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="Facebook Hacker Cup" scheme="http://yoursite.com/tags/Facebook-Hacker-Cup/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 383E 二分图</title>
    <link href="http://yoursite.com/2016/12/07/Codeforces-383E-%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    <id>http://yoursite.com/2016/12/07/Codeforces-383E-二分图/</id>
    <published>2016-12-07T06:21:06.000Z</published>
    <updated>2016-12-07T06:26:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x6709;$n\leq 10^5$&#x5BF9;&#x7537;&#x751F;&#x548C;&#x5973;&#x751F;&#x56F4;&#x6210;&#x4E00;&#x5708;&#xFF0C;&#x5750;&#x5728;$2*n$&#x4E2A;&#x4F4D;&#x7F6E;&#x4E0A;&#xFF0C;&#x7ED9;&#x51FA;&#x6BCF;&#x5BF9;&#x7537;&#x751F;&#x548C;&#x5973;&#x751F;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x7136;&#x540E;&#x8981;&#x7ED9;&#x6BCF;&#x4E2A;&#x4EBA;&#x5B89;&#x6392;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x6570;&#x5B57;&#x975E;1&#x5373;2&#xFF0C;&#x5E76;&#x4E14;&#x6BCF;&#x5BF9;&#x7537;&#x751F;&#x548C;&#x5973;&#x751F;&#x7684;&#x6570;&#x5B57;&#x4E0D;&#x80FD;&#x76F8;&#x540C;&#xFF0C;&#x5373;&#xFF1A;&#x4E24;&#x4E2A;&#x4EBA;&#x4E00;&#x4E2A;&#x662F;1&#xFF0C;&#x53E6;&#x4E00;&#x4E2A;&#x5FC5;&#x987B;&#x662F;2.&#x7136;&#x540E;&#x8FD8;&#x8981;&#x4FDD;&#x8BC1;&#x8FDE;&#x7EED;&#x7684;&#x4E09;&#x4E2A;&#x4EBA;&#x7684;&#x6570;&#x5B57;&#x4E0D;&#x80FD;&#x5B8C;&#x5168;&#x76F8;&#x540C;&#xFF0C;&#x6C42;&#x51FA;&#x4E00;&#x79CD;&#x5408;&#x6CD5;&#x7684;&#x5B89;&#x6392;&#x65B9;&#x6848;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x5B58;&#x5728;&#x8F93;&#x51FA;-1.<br><a id="more"></a><br>&#x4ECA;&#x5929;<del> gkp&#x8001;&#x5E08;&#x4E0D;&#x5728;&#x72B6;&#x6001; </del>&#x3002;&#x81EA;&#x5DF1;&#x53C8;&#x8FC7;&#x4E8E;&#x6FC0;&#x52A8;&#xFF0C;B&#x9898;&#x88AB;fst&#xFF0C;GG&#x3002;</p>
<p>&#x9898;&#x76EE;&#x94FE;&#x63A5;&#xFF1A;<a href="http://codeforces.com/contest/742/problem/E" target="_blank" rel="noopener">Here</a></p>
<p>&#x5148;&#x628A;&#x6BCF;&#x5BF9;&#x7537;&#x5973;&#x7684;&#x4F4D;&#x7F6E;&#x5EFA;&#x65E0;&#x5411;&#x8FB9;&#xFF0C;&#x7136;&#x540E;&#x5BF9;&#x6240;&#x6709;&#x7684;$i*2$&#x548C;$i*2-1$&#x4F4D;&#x7F6E;&#x5EFA;&#x65E0;&#x5411;&#x8FB9;&#xFF0C;<strong>&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#x56FE;&#x4E2D;&#x65E0;&#x5947;&#x6570;&#x73AF;</strong>&#xFF0C;&#x56E0;&#x6B64;&#x8FD9;&#x4E2A;&#x56FE;&#x662F;&#x4E8C;&#x5206;&#x56FE;&#xFF0C;&#x76F4;&#x63A5;dfs&#x67D3;&#x8272;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002;&#x3002;&#x3002;<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">200010</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; data[MAX_N];</span><br><span class="line"><span class="keyword">int</span> vis[MAX_N], ans[MAX_N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edge[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> d)</span> </span>{</span><br><span class="line">    ans[u] = d, vis[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edge[u].size(); ++i) {</span><br><span class="line">        <span class="keyword">if</span> (vis[edge[u][i]]) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(edge[u][i], d ^ <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n)) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; ++i) edge[i].clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;data[i].fi, &amp;data[i].se);</span><br><span class="line">            edge[data[i].fi].pb(data[i].se);</span><br><span class="line">            edge[data[i].se].pb(data[i].fi);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">            edge[i * <span class="number">2</span>].pb(i * <span class="number">2</span> - <span class="number">1</span>);</span><br><span class="line">            edge[i * <span class="number">2</span> - <span class="number">1</span>].pb(i * <span class="number">2</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> (vis));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; ++i) {</span><br><span class="line">            <span class="keyword">if</span> (!vis[i]) dfs(i, <span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, ans[data[i].fi] + <span class="number">1</span>, ans[data[i].se] + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有$n\leq 10^5$对男生和女生围成一圈，坐在$2*n$个位置上，给出每对男生和女生的位置，然后要给每个人安排一个数字，数字非1即2，并且每对男生和女生的数字不能相同，即：两个人一个是1，另一个必须是2.然后还要保证连续的三个人的数字不能完全相同，求出一种合法的安排方案，如果不存在输出-1.&lt;br&gt;
    
    </summary>
    
      <category term="思无涯" scheme="http://yoursite.com/categories/%E6%80%9D%E6%97%A0%E6%B6%AF/"/>
    
    
      <category term="Codeforces" scheme="http://yoursite.com/tags/Codeforces/"/>
    
      <category term="二分图" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces GYM 101173H 图转树 + LCA</title>
    <link href="http://yoursite.com/2016/12/06/Codeforces-GYM-101173H-%E5%9B%BE%E8%BD%AC%E6%A0%91-LCA/"/>
    <id>http://yoursite.com/2016/12/06/Codeforces-GYM-101173H-图转树-LCA/</id>
    <published>2016-12-06T07:01:40.000Z</published>
    <updated>2016-12-07T06:05:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x7ED9;&#x4E00;&#x4E2A;$n*n(n\leq 1000)$&#x7684;&#x5B57;&#x7B26;&#x77E9;&#x9635;:&#x2019;.&#x2019;&#x8868;&#x793A;&#x7A7A;&#x683C;&#xFF0C;&#x2018;#&#x2019;&#x8868;&#x793A;&#x969C;&#x788D;&#x7269;&#x3002;&#x6709;$Q\leq 3e5$&#x6B21;&#x8BE2;&#x95EE;&#xFF1A;&#x4EE5;&#x5750;&#x6807;$(a,b)$&#x4E3A;&#x4E2D;&#x5FC3;&#x4EA7;&#x751F;&#x4E00;&#x4E2A;&#x957F;&#x5EA6;&#x4E3A;$d$&#x7684;&#x6B63;&#x65B9;&#x5F62;&#xFF0C;&#x7136;&#x540E;&#x8FD9;&#x4E2A;&#x6B63;&#x65B9;&#x5F62;&#x79FB;&#x52A8;&#x5230;&#x4EE5;$(c,d)$&#x4E3A;&#x4E2D;&#x5FC3;&#xFF0C;&#x79FB;&#x52A8;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#x4E0D;&#x80FD;&#x78B0;&#x5230;&#x969C;&#x788D;&#x7269;&#xFF0C;&#x6C42;$d$&#x7684;&#x6700;&#x5927;&#x503C;&#x3002;<br><a id="more"></a><br>&#x5148;&#x5BF9;&#x6BCF;&#x4E2A;&#x7A7A;&#x683C;&#x6C42;&#x51FA;&#x4EE5;&#x5B83;&#x4E3A;&#x4E2D;&#x5FC3;&#x53EF;&#x4EE5;&#x4EA7;&#x751F;&#x7684;&#x6700;&#x5927;&#x8FB9;&#x957F;$d$&#x7684;&#x6B63;&#x65B9;&#x5F62;&#xFF0C;&#x7136;&#x540E;&#x628A;&#x6BCF;&#x4E2A;&#x70B9;&#x5750;&#x6807;$(i,j)$&#x770B;&#x6210;&#x4E00;&#x4E2A;&#x65B0;&#x70B9;$i*n+j$&#xFF0C;&#x6BCF;&#x4E2A;&#x70B9;&#x7684;&#x6743;&#x503C;&#x662F;$d_{i,j}$&#xFF0C;&#x628A;&#x6240;&#x6709;&#x70B9;&#x6309;&#x7167;&#x6743;&#x503C;&#x4ECE;&#x5927;&#x5230;&#x5C0F;&#x6392;&#x5E8F;&#x3002;&#x8003;&#x8651;&#x628A;&#x70B9;&#x751F;&#x6210;&#x6811;&#xFF0C;&#x800C;&#x4E14;&#x6811;&#x4ECE;&#x5E95;&#x5411;&#x4E0A;&#x6743;&#x503C;&#x4F9D;&#x6B21;&#x51CF;&#x5C0F;&#xFF0C;&#x6BCF;&#x4E2A;&#x70B9;&#x627E;&#x5B83;&#x4E0A;&#x4E0B;&#x5DE6;&#x53F3;&#x56DB;&#x4E2A;&#x65B9;&#x5411;&#x7684;&#x8FDE;&#x901A;&#x5757;&#xFF08;&#x5DF2;&#x7ECF;&#x52A0;&#x8FDB;&#x6811;&#x4E2D;&#xFF09;&#x7684;&#x6700;&#x5C0F;&#x6743;&#x503C;&#x70B9;&#xFF0C;&#x628A;&#x8FD9;&#x4E2A;&#x70B9;&#x7684;&#x7236;&#x4EB2;&#x8D4B;&#x4E3A;&#x5F53;&#x524D;&#x70B9;&#xFF0C;&#x8FD9;&#x6837;&#x5B50;&#x8BE2;&#x95EE;&#x5C31;&#x53D8;&#x6210;&#x4E86;<strong>&#x6C42;&#x6811;&#x4E0A;&#x7684;LCA</strong>&#xFF0C;&#x5224;&#x65AD;&#x70B9;&#x7684;&#x8FDE;&#x901A;&#x6027;&#x7528;&#x5E76;&#x67E5;&#x96C6;&#x5373;&#x53EF;&#x3002;</p>
<p>&#x5BF9;&#x4E8E;&#x7B2C;&#x4E00;&#x6B65;&#xFF1A;&#x5982;&#x4F55;&#x6C42;&#x51FA;&#x6BCF;&#x4E2A;&#x7A7A;&#x683C;&#x4EE5;&#x5B83;&#x4E3A;&#x4E2D;&#x5FC3;&#x53EF;&#x4EE5;&#x4EA7;&#x751F;&#x8FC7;&#x7684;&#x6700;&#x5927;&#x8FB9;&#x957F;&#x6B63;&#x65B9;&#x5F62;&#x5462;&#xFF1F;&#x4E00;&#x5F00;&#x59CB;&#x662F;&#x60F3;&#x4ECE;&#x8FB9;&#x754C;&#x548C;&#x969C;&#x788D;&#x7269;&#x4F4D;&#x7F6E;bfs&#xFF0C;&#x6BCF;&#x6B21;&#x5224;&#x65AD;&#x4E00;&#x4E2A;&#x70B9;&#x7684;&#x5468;&#x56F4;&#x516B;&#x4E2A;&#x65B9;&#x5411;&#x7684;&#x6700;&#x5927;&#x6B63;&#x65B9;&#x5F62;&#x8FB9;&#x957F;&#x662F;&#x5426;&#x76F8;&#x540C;&#xFF0C;<del>&#x4F46;&#x662F;&#x8FD9;&#x6837;&#x5B50;WA&#x4E86;&#xFF0C; &#x4E0D;&#x61C2;&#x554A; <del>   &#x3002;&#x3002;&#x3002;&#x3002; (&#x53EA;&#x8981;&#x6BCF;&#x6B21;bfs&#x65F6;&#x4E5F;&#x662F;8&#x4E2A;&#x65B9;&#x5411;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;)</del></del></p>
<p>&#x53EF;&#x4EE5;&#x8FD9;&#x6837;&#x5B50;&#xFF1A;&#x5148;&#x5BF9;&#x969C;&#x788D;&#x7269;&#x4E2A;&#x6570;&#x6C42;&#x4E2A;&#x524D;&#x7F00;&#x548C;&#xFF1A;$sum[i][j]$&#x8868;&#x793A;&#x5DE6;&#x4E0A;&#x89D2;&#x4E3A;$(1,1)$&#x53F3;&#x4E0B;&#x89D2;&#x4E3A;$(i,j)$&#x7684;&#x77E9;&#x9635;&#x5185;&#x7684;&#x969C;&#x788D;&#x7269;&#x4E2A;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x5BF9;&#x6BCF;&#x4E2A;&#x7A7A;&#x683C;&#x70B9;&#x4E8C;&#x5206;&#x67E5;&#x627E;&#x4EE5;&#x5B83;&#x4E3A;&#x4E2D;&#x5FC3;&#x7684;&#x6B63;&#x65B9;&#x5F62;&#x5185;&#x662F;&#x5426;&#x6709;&#x969C;&#x788D;&#x7269;&#x5373;&#x53EF;&#xFF0C;&#x7B80;&#x5355;&#x7684;&#x5BB9;&#x65A5;&#x3002;</p>
<p>&#x603B;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x662F;&#xFF1A;$O(n^2\log n+Q\log n)$<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_M = <span class="number">1010000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = {{<span class="number">1</span>, <span class="number">0</span>}, {<span class="number">0</span>, <span class="number">1</span>}, {<span class="number">-1</span>, <span class="number">0</span>}, {<span class="number">0</span>, <span class="number">-1</span>}};</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dir2[<span class="number">8</span>][<span class="number">2</span>] = {{<span class="number">-1</span>, <span class="number">-1</span>}, {<span class="number">-1</span>, <span class="number">0</span>}, {<span class="number">-1</span>, <span class="number">1</span>}, {<span class="number">0</span>, <span class="number">-1</span>}, {<span class="number">0</span>, <span class="number">1</span>}, {<span class="number">1</span>, <span class="number">-1</span>}, {<span class="number">1</span>, <span class="number">0</span>}, {<span class="number">1</span>, <span class="number">1</span>}};</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> str[MAX_N][MAX_N];</span><br><span class="line"><span class="keyword">int</span> fa[MAX_M], vis[MAX_N][MAX_N], Max[MAX_N][MAX_N], sum[MAX_N][MAX_N];</span><br><span class="line"><span class="keyword">int</span> anc[MAX_M][<span class="number">25</span>], depth[MAX_M], gao[MAX_M];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edge[MAX_M];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> {</span></span><br><span class="line">    <span class="keyword">int</span> x, y, z;</span><br><span class="line"></span><br><span class="line">    TreeNode() {}</span><br><span class="line">    TreeNode(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y, <span class="keyword">int</span> _z): x(_x), y(_y), z(_z) {}</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> TreeNode&amp; rhs) <span class="keyword">const</span> {</span><br><span class="line">        <span class="keyword">return</span> z &gt; rhs.z;</span><br><span class="line">    }</span><br><span class="line">} info[MAX_M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> sum[x2][y2] - sum[x2][y1 - <span class="number">1</span>] - sum[x1 - <span class="number">1</span>][y2] + sum[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>] == <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetMax</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span> (sum));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) {</span><br><span class="line">            sum[i][j] = sum[i - <span class="number">1</span>][j] + sum[i][j - <span class="number">1</span>] - sum[i - <span class="number">1</span>][j - <span class="number">1</span>] + (str[i][j] == <span class="string">&apos;#&apos;</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">memset</span>(Max, <span class="number">0</span>, <span class="keyword">sizeof</span> (Max));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) {</span><br><span class="line">            <span class="keyword">if</span> (str[i][j] == <span class="string">&apos;#&apos;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> low = <span class="number">0</span>, high = min(min(i - <span class="number">1</span>, n - i), min(j - <span class="number">1</span>, n - j)), t;</span><br><span class="line">            <span class="keyword">while</span> (low &lt;= high) {</span><br><span class="line">                <span class="keyword">int</span> mid = (low + high) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (check(i - mid, j - mid, i + mid, j + mid)) t = mid, low = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> high = mid - <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">            Max[i][j] = t * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> fa[x] == x ? x : fa[x] = find(fa[x]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; GetPos(<span class="keyword">int</span> val) {</span><br><span class="line">    <span class="keyword">int</span> x = (val - <span class="number">1</span>) / n, y = val % n;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">0</span>) y = n;</span><br><span class="line">    <span class="keyword">return</span> mp(x, y);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateTree</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) {</span><br><span class="line">            fa[i * n + j] = i * n + j;</span><br><span class="line">            edge[i * n + j].clear();</span><br><span class="line">            info[tot++] = TreeNode(i, j, Max[i][j]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    sort(info, info + tot);</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> (vis));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i) {</span><br><span class="line">        <span class="keyword">int</span> x = info[i].x, y = info[i].y, z = info[i].z;</span><br><span class="line"><span class="comment">//        printf(&quot; i = %d (%d, %d): z = %d****************\n&quot;, i, x, y, z);</span></span><br><span class="line">        vis[x][y] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (z == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) {</span><br><span class="line">            <span class="keyword">int</span> nx = x + dir[k][<span class="number">0</span>], ny = y + dir[k][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (nx &lt;= <span class="number">0</span> || ny &lt;= <span class="number">0</span> || nx &gt; n || ny &gt; n || !vis[nx][ny]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">//            printf(&quot;nx = %d ny = %d\n&quot;, nx, ny);</span></span><br><span class="line">            <span class="keyword">int</span> fn = find(nx * n + ny);</span><br><span class="line">            pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; root = GetPos(fn);</span><br><span class="line"><span class="comment">//            printf(&quot;x = %d y = %d rootx = %d rooty = %d\n&quot;, x, y, rootx, rooty);</span></span><br><span class="line">            <span class="keyword">if</span> (Max[root.fi][root.se] &lt; z || fn == x * n + y) <span class="keyword">continue</span>;</span><br><span class="line">            fa[fn] = x * n + y;</span><br><span class="line">            edge[x * n + y].pb(fn);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> d)</span> </span>{</span><br><span class="line">    depth[u] = d;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; ++i) {</span><br><span class="line">        anc[u][i] = anc[anc[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edge[u].size(); ++i) {</span><br><span class="line">        <span class="keyword">int</span> v = edge[u][i];</span><br><span class="line">        anc[v][<span class="number">0</span>] = u;</span><br><span class="line">        dfs(v, d + <span class="number">1</span>);</span><br><span class="line">    } </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (depth[u] &gt; depth[v]) swap(u, v);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">20</span>; ++i) {</span><br><span class="line">        <span class="keyword">if</span> (((depth[v] - depth[u]) &gt;&gt; i) &amp; <span class="number">1</span>) v = anc[v][i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (u == v) <span class="keyword">return</span> v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">20</span>; k &gt;= <span class="number">0</span>; --k) {</span><br><span class="line">        <span class="keyword">if</span> (anc[u][k] != anc[v][k]) {</span><br><span class="line">            u = anc[u][k], v = anc[v][k];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> anc[u][<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>{</span><br><span class="line">    GetMax();</span><br><span class="line">    CreateTree();</span><br><span class="line">    <span class="built_in">memset</span>(gao, <span class="number">0</span>, <span class="keyword">sizeof</span> (gao));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) {</span><br><span class="line">        <span class="keyword">int</span> a, b, c, d;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">        <span class="keyword">int</span> f1 = find(a * n + b), f2 = find(c * n + d);</span><br><span class="line">        <span class="keyword">if</span> (f1 != f2) <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">if</span> (!gao[f1]) dfs(f1, <span class="number">0</span>), gao[f1] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> p = LCA(a * n + b, c * n + d);</span><br><span class="line">            pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; now = GetPos(p);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Max[now.fi][now.se]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n)) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str[i] + <span class="number">1</span>);</span><br><span class="line">        solve();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> x, y, size;</span><br><span class="line"></span><br><span class="line">    Node() {}</span><br><span class="line">    Node(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y, <span class="keyword">int</span> _size): x(_x), y(_y), size(_size) {}</span><br><span class="line">} ;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;Node&gt; que;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> size)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) {</span><br><span class="line">        <span class="keyword">int</span> tx = x + dir2[i][<span class="number">0</span>], ty = y + dir2[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (Max[tx][ty] != <span class="number">-1</span> &amp;&amp; Max[tx][ty] &lt; size) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetMax</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">while</span> (!que.empty()) que.pop();</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> (vis));</span><br><span class="line">    <span class="built_in">memset</span>(Max, <span class="number">-1</span>, <span class="keyword">sizeof</span> (Max));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) {</span><br><span class="line">            <span class="keyword">if</span> (str[i][j] == <span class="string">&apos;.&apos;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            que.push(Node(i, j, <span class="number">0</span>)), Max[i][j] = <span class="number">0</span>;</span><br><span class="line">            vis[i][j] = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">        <span class="keyword">if</span> (str[<span class="number">1</span>][i] == <span class="string">&apos;.&apos;</span>) que.push(Node(<span class="number">1</span>, i, <span class="number">1</span>)), Max[<span class="number">1</span>][i] = vis[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (str[n][i] == <span class="string">&apos;.&apos;</span>) que.push(Node(n, i, <span class="number">1</span>)), Max[n][i] = vis[n][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (str[i][<span class="number">1</span>] == <span class="string">&apos;.&apos;</span>) que.push(Node(i, <span class="number">1</span>, <span class="number">1</span>)), Max[i][<span class="number">1</span>] = vis[i][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (str[i][n] == <span class="string">&apos;.&apos;</span>) que.push(Node(i, n, <span class="number">1</span>)), Max[i][n] = vis[i][n] = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; ++i) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; n; ++j) {</span><br><span class="line">            <span class="keyword">if</span> (str[i][j] == <span class="string">&apos;#&apos;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">8</span>; ++k) {</span><br><span class="line">                <span class="keyword">int</span> ni = i + dir2[k][<span class="number">0</span>], nj = j + dir2[k][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (str[ni][nj] == <span class="string">&apos;#&apos;</span>) flag = <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (flag) que.push(Node(i, j, <span class="number">1</span>)), Max[i][j] = vis[i][j] = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!que.empty()) {</span><br><span class="line">        Node cur = que.front(); que.pop();</span><br><span class="line">        <span class="keyword">int</span> cx = cur.x, cy = cur.y;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) {</span><br><span class="line">            <span class="keyword">int</span> tx = cx + dir2[i][<span class="number">0</span>], ty = cy + dir2[i][<span class="number">1</span>], nsize = cur.size;</span><br><span class="line">            <span class="keyword">if</span> (tx &lt;= <span class="number">0</span> || ty &lt;= <span class="number">0</span> || tx &gt;= n || ty &gt;= n || vis[tx][ty]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (check(tx, ty, cur.size)) nsize += <span class="number">2</span>;</span><br><span class="line">            que.push(Node(tx, ty, nsize));</span><br><span class="line">            Max[tx][ty] = nsize;</span><br><span class="line">            vis[tx][ty] = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给一个$n*n(n\leq 1000)$的字符矩阵:’.’表示空格，‘#’表示障碍物。有$Q\leq 3e5$次询问：以坐标$(a,b)$为中心产生一个长度为$d$的正方形，然后这个正方形移动到以$(c,d)$为中心，移动的过程中不能碰到障碍物，求$d$的最大值。&lt;br&gt;
    
    </summary>
    
      <category term="思无涯" scheme="http://yoursite.com/categories/%E6%80%9D%E6%97%A0%E6%B6%AF/"/>
    
    
      <category term="Codeforces" scheme="http://yoursite.com/tags/Codeforces/"/>
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
      <category term="LCA" scheme="http://yoursite.com/tags/LCA/"/>
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces GYM101137F dp+特判</title>
    <link href="http://yoursite.com/2016/12/05/Codeforces-GYM101137-F-dp-%E7%89%B9%E5%88%A4/"/>
    <id>http://yoursite.com/2016/12/05/Codeforces-GYM101137-F-dp-特判/</id>
    <published>2016-12-05T15:25:35.000Z</published>
    <updated>2016-12-05T15:26:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x9898;&#x610F;&#x6709;&#x70B9;&#x8FF7;&#x554A;&#x3002;&#x3002;&#x3002;<br><a id="more"></a><br>&#x7ED9;&#x4E00;&#x884C;&#x53EA;&#x542B;&#x7A7A;&#x683C;&#x3001;&#x5927;&#x5C0F;&#x5199;&#x82F1;&#x6587;&#x5B57;&#x6BCD;&#x548C;&#x6570;&#x5B57;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x6839;&#x636E;&#x8FD9;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x7684;&#x8F93;&#x5165;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x5236;&#x5B9A;&#x4E00;&#x4E2A;&#x89C4;&#x5219;&#x5B57;&#x7B26;&#x4E32;&#x8868;&#x793A;&#x53EA;&#x5141;&#x8BB8;&#x8F93;&#x5165;&#x5B57;&#x7B26;&#x6216;&#x8005;&#x4E0D;&#x5141;&#x8BB8;&#x8F93;&#x5165;&#x54EA;&#x4E9B;&#x5B57;&#x6BCD;&#xFF0C;&#x6C42;&#x957F;&#x5EA6;&#x6700;&#x77ED;&#x7684;&#x7136;&#x540E;&#x5B57;&#x5178;&#x5E8F;&#x6700;&#x77ED;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x3002;</p>
<p>&#x4E00;&#x5F00;&#x59CB;&#x505A;&#x662F;&#x5404;&#x79CD;&#x7279;&#x5224;&#xFF0C;&#x7136;&#x540E;&#x72D7;&#x5E26;&#x4E86;&#x3002;</p>
<p>&#x53EF;&#x4EE5;&#x5148;&#x628A;&#x6240;&#x6709;&#x7684;&#x5B57;&#x7B26;&#x5206;&#x6210;&#x4E09;&#x7C7B;&#xFF1A;&#x5FC5;&#x987B;&#x542B;&#x6709;&#x7684;&#xFF0C;&#x53EF;&#x6709;&#x53EF;&#x65E0;&#x7684;&#xFF0C;&#x5FC5;&#x987B;&#x4E0D;&#x80FD;&#x542B;&#x6709;&#x7684;&#x3002;&#x7528;<code>pair&lt;int, string&gt; dp[i]</code>&#x8868;&#x793A;&#x5904;&#x7406;&#x524D;$i$&#x4E2A;&#x5B57;&#x7B26;&#x7684;&#x6700;&#x4F18;&#x89E3;&#xFF0C;&#x7136;&#x540E;&#x679A;&#x4E3E;&#x6700;&#x540E;&#x4E00;&#x4E32;&#x7684;&#x4F5C;&#x7528;&#x8303;&#x56F4;&#xFF0C;&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x3002;</p>
<p>&#x5236;&#x5B9A;&#x53CD;&#x9762;&#x89C4;&#x5219;&#x65F6;&#x53EA;&#x8981;&#x628A;&#x6240;&#x6709;&#x5FC5;&#x987B;&#x542B;&#x6709;&#x7684;&#x548C;&#x5FC5;&#x987B;&#x4E0D;&#x80FD;&#x542B;&#x6709;&#x7684;&#x98A0;&#x5012;&#x4E00;&#x4E0B;&#x5373;&#x53EF;&#x3002;</p>
<p>&#x8FD8;&#x8981;&#x6CE8;&#x610F;&#x5F53;&#x8F93;&#x5165;&#x4E86;&#x6240;&#x6709;&#x7684;&#x5B57;&#x7B26;&#x65F6;&#xFF0C;&#x56E0;&#x4E3A;&#x53CD;&#x9762;&#x89C4;&#x5219;&#x8981;&#x4FDD;&#x8BC1;&#x975E;&#x7A7A;&#xFF0C;&#x6240;&#x4EE5;&#x5B9E;&#x9645;&#x4E0A;&#x662F;<code>^!</code>&#x3002;&#x9700;&#x8981;&#x7279;&#x5224;&#x3002;</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">100010</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">300</span>];</span><br><span class="line"><span class="built_in">string</span> read;</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; dp[<span class="number">300</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">char</span> c)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&apos; &apos;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (c &lt;= <span class="string">&apos;9&apos;</span> &amp;&amp; c &gt;= <span class="string">&apos;0&apos;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (c &lt;= <span class="string">&apos;z&apos;</span> &amp;&amp; c &gt;= <span class="string">&apos;a&apos;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (c &lt;= <span class="string">&apos;Z&apos;</span> &amp;&amp; c &gt;= <span class="string">&apos;A&apos;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">32</span>; i &lt;= <span class="number">126</span>; ++i) {</span><br><span class="line">        dp[i] = mp(<span class="number">300</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (vis[i] == <span class="number">0</span> || vis[i] == <span class="number">2</span>) {</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (vis[i] == <span class="number">0</span> || vis[i] == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= <span class="number">32</span>; --j) {</span><br><span class="line">                <span class="keyword">if</span> (vis[j] == <span class="number">2</span>) <span class="keyword">break</span>;</span><br><span class="line">                pair&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; tmp = dp[j - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (j == i) {</span><br><span class="line">                    tmp.fi++;</span><br><span class="line">                    tmp.se += <span class="keyword">char</span>(i);</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (j + <span class="number">1</span> == i) {</span><br><span class="line">                    tmp.fi += <span class="number">2</span>;</span><br><span class="line">                    tmp.se += <span class="keyword">char</span>(j); tmp.se += <span class="keyword">char</span>(i);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    tmp.fi += <span class="number">3</span>;</span><br><span class="line">                    tmp.se += <span class="keyword">char</span>(j); tmp.se += <span class="string">&apos;-&apos;</span>; tmp.se += <span class="keyword">char</span>(i);</span><br><span class="line">                }</span><br><span class="line">                dp[i] = min(dp[i], tmp);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="comment">//    IOS;</span></span><br><span class="line">    getline(<span class="built_in">cin</span>, read);</span><br><span class="line">    <span class="comment">// vis[i] = 0: &#x53EF;&#x6709;&#x53EF;&#x65E0; vis[i] = 1: &#x5FC5;&#x987B;&#x6709; vis[i] = 2: &#x4E0D;&#x80FD;&#x6709;</span></span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> (vis));</span><br><span class="line">    <span class="keyword">int</span> len = read.length();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) <span class="keyword">if</span> (check(read[i])) vis[read[i]] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">32</span>; i &lt;= <span class="number">126</span>; ++i) <span class="keyword">if</span> (vis[i] == <span class="number">0</span> &amp;&amp; check(<span class="keyword">char</span>(i))) vis[i] = <span class="number">2</span>;</span><br><span class="line">    dp[<span class="number">31</span>] = mp(<span class="number">0</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    work();</span><br><span class="line">    pair&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; ans = dp[<span class="number">126</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">32</span>; i&lt;= <span class="number">126</span>; ++i) <span class="keyword">if</span> (vis[i]) vis[i] = <span class="number">3</span> - vis[i];</span><br><span class="line">    dp[<span class="number">31</span>] = mp(<span class="number">1</span>, <span class="string">&quot;^&quot;</span>);</span><br><span class="line">    work();</span><br><span class="line">    <span class="keyword">if</span> (dp[<span class="number">126</span>].fi &gt; <span class="number">1</span>) ans = min(ans, dp[<span class="number">126</span>]);</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        pair&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; tmp = mp(<span class="number">2</span>, <span class="string">&quot;^!&quot;</span>);</span><br><span class="line">        ans = min(ans, tmp);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\%[&quot;</span> &lt;&lt; ans.se &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题意有点迷啊。。。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="Codeforces" scheme="http://yoursite.com/tags/Codeforces/"/>
    
      <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces GYM101150G 已知叶子结点两两距离构造树</title>
    <link href="http://yoursite.com/2016/12/02/Codeforces-GYM101150G-%E5%B7%B2%E7%9F%A5%E5%8F%B6%E5%AD%90%E7%BB%93%E7%82%B9%E4%B8%A4%E4%B8%A4%E8%B7%9D%E7%A6%BB%E6%9E%84%E9%80%A0%E6%A0%91/"/>
    <id>http://yoursite.com/2016/12/02/Codeforces-GYM101150G-已知叶子结点两两距离构造树/</id>
    <published>2016-12-02T13:11:52.000Z</published>
    <updated>2016-12-02T13:12:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x5DF2;&#x77E5;&#x4E00;&#x68F5;&#x6811;&#x7684;$n\leq 50$&#x4E2A;&#x53F6;&#x5B50;&#x7ED3;&#x70B9;&#x7684;&#x4E24;&#x4E24;&#x8DDD;&#x79BB;&#xFF0C;&#x6C42;&#x8FD9;&#x68F5;&#x6811;&#x4E0A;&#x6240;&#x6709;&#x975E;&#x53F6;&#x5B50;&#x7ED3;&#x70B9;&#x7684;&#x5EA6;&#xFF0C;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x8F93;&#x51FA;&#x3002;<br><a id="more"></a><br>&#x9898;&#x76EE;&#x94FE;&#x63A5;&#xFF1A;<a href="http://codeforces.com/gym/101150" target="_blank" rel="noopener">Here</a><br>&#x4E5F;&#x662F;<a href="http://vjudge.net/problem/Aizu-1263" target="_blank" rel="noopener">Aizu 1263</a></p>
<p>&#x5148;&#x627E;&#x5230;&#x6811;&#x76F4;&#x5F84;&#xFF1A;&#x8DDD;&#x79BB;&#x6700;&#x5927;&#x7684;&#x4E00;&#x5BF9;&#x53F6;&#x5B50;&#x7ED3;&#x70B9;&#xFF0C;&#x7136;&#x540E;&#x6240;&#x6709;&#x53F6;&#x5B50;&#x7ED3;&#x70B9;&#x5C31;&#x53EF;&#x4EE5;&#x6309;&#x7167;&#x8DDD;&#x79BB;&#x54EA;&#x4E2A;&#x76F4;&#x5F84;&#x7AEF;&#x70B9;&#x66F4;&#x8FD1;&#x5206;&#x6210;&#x4E24;&#x90E8;&#x5206;&#xFF0C;&#x63A5;&#x7740;&#x628A;&#x76F4;&#x5F84;&#x8FD9;&#x6761;&#x94FE;&#x4ECE;&#x6B63;&#x4E2D;&#x95F4;&#x90E8;&#x5206;&#x5206;&#x6210;&#x4E24;&#x6BB5;&#xFF0C;&#x9012;&#x5F52;&#x89E3;&#x51B3;&#x3002;&#x5206;&#x6210;&#x4E24;&#x6BB5;&#x53EF;&#x80FD;&#x4F1A;&#x6DFB;&#x52A0;&#x4E24;&#x4E2A;&#x65B0;&#x7684;&#x7ED3;&#x70B9;&#xFF0C;&#x56E0;&#x4E3A;&#x8FD9;&#x65F6;&#x8FD9;&#x4E24;&#x4E2A;&#x7ED3;&#x70B9;&#x8FD8;&#x6CA1;&#x5728;&#x6574;&#x68F5;&#x6811;&#x4E2D;&#x51FA;&#x73B0;&#x3002;&#x5F53;&#x4E00;&#x4E2A;&#x6811;&#x4E0A;&#x7684;&#x65B0;&#x7ED3;&#x70B9;&#x51FA;&#x73B0;&#x65F6;&#xFF0C;&#x5C31;&#x8981;&#x66F4;&#x65B0;&#x6240;&#x6709;&#x8FD9;&#x68F5;&#x6811;&#x4E0A;&#x5DF2;&#x77E5;&#x7ED3;&#x70B9;&#x5230;&#x8FD9;&#x4E2A;&#x7ED3;&#x70B9;&#x7684;&#x8DDD;&#x79BB;&#x3002;</p>
<p>&#x56E0;&#x4E3A;&#x5206;&#x6210;&#x4E86;&#x4E24;&#x90E8;&#x5206;&#xFF0C;&#x6240;&#x4EE5;&#x76F8;&#x5F53;&#x4E8E;&#x6BCF;&#x4E2A;&#x90E8;&#x5206;&#x90FD;&#x53C8;&#x662F;&#x5DF2;&#x77E5;&#x6240;&#x6709;&#x53F6;&#x5B50;&#x7ED3;&#x70B9;&#x8DDD;&#x79BB;&#x7684;&#x6811;&#x6784;&#x9020;&#x3002;</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PB push_back</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> dis[MAX_N][MAX_N], degree[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindMidpoint</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> st, <span class="keyword">int</span> ed)</span> </span>{ <span class="comment">// x + y = len</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vec.size(); ++i) {</span><br><span class="line">        <span class="keyword">int</span> cur = vec[i];</span><br><span class="line">        <span class="keyword">if</span> (dis[st][cur] == x &amp;&amp; dis[cur][ed] == y) <span class="keyword">return</span> cur;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddNewPoint</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec, <span class="keyword">int</span> p, <span class="keyword">int</span> d)</span> </span>{</span><br><span class="line">    ++m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vec.size(); ++i) {</span><br><span class="line">        dis[m][vec[i]] = dis[vec[i]][m] = dis[vec[i]][p] - d;</span><br><span class="line">    }</span><br><span class="line">    degree[m]++;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (vec.size() &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec1, vec2;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>, a, b, size = vec.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; size; ++j) {</span><br><span class="line">            <span class="keyword">if</span> (dis[vec[i]][vec[j]] &gt; len) {</span><br><span class="line">                len = dis[vec[i]][vec[j]];</span><br><span class="line">                a = vec[i], b = vec[j];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) {</span><br><span class="line">        <span class="keyword">if</span> (dis[a][vec[i]] &lt;= dis[b][vec[i]]) vec1.PB(vec[i]);</span><br><span class="line">        <span class="keyword">else</span> vec2.PB(vec[i]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x = FindMidpoint(vec, len / <span class="number">2</span>, len - len / <span class="number">2</span>, a, b);</span><br><span class="line">    <span class="keyword">int</span> y = FindMidpoint(vec, len - (len / <span class="number">2</span> + <span class="number">1</span>), len / <span class="number">2</span> + <span class="number">1</span>, b, a);</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">-1</span>) AddNewPoint(vec1, b, len - len / <span class="number">2</span>), vec1.PB(m);</span><br><span class="line">    <span class="keyword">else</span> degree[x]++;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">-1</span>) AddNewPoint(vec2, a, len / <span class="number">2</span> + <span class="number">1</span>), vec2.PB(m);</span><br><span class="line">    <span class="keyword">else</span> degree[y]++;</span><br><span class="line"></span><br><span class="line">    solve(vec1); solve(vec2);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) &amp;&amp; n) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) {</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;dis[i][j]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec, ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) vec.PB(i);</span><br><span class="line">        <span class="built_in">memset</span>(degree, <span class="number">0</span>, <span class="keyword">sizeof</span> (degree));</span><br><span class="line">        m = n;</span><br><span class="line">        solve(vec);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n + <span class="number">1</span>; i &lt;= m; ++i) ans.PB(degree[i]);</span><br><span class="line">        sort(ans.begin(), ans.end());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); ++i) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans[i]);</span><br><span class="line">            <span class="keyword">if</span> (i &lt; ans.size() - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;已知一棵树的$n\leq 50$个叶子结点的两两距离，求这棵树上所有非叶子结点的度，从小到大输出。&lt;br&gt;
    
    </summary>
    
      <category term="思无涯" scheme="http://yoursite.com/categories/%E6%80%9D%E6%97%A0%E6%B6%AF/"/>
    
    
      <category term="Codeforces" scheme="http://yoursite.com/tags/Codeforces/"/>
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
      <category term="构造" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces GYM 101150E DFS+子集枚举</title>
    <link href="http://yoursite.com/2016/12/02/Codeforces-GYM-101150E-DFS-%E5%AD%90%E9%9B%86%E6%9E%9A%E4%B8%BE/"/>
    <id>http://yoursite.com/2016/12/02/Codeforces-GYM-101150E-DFS-子集枚举/</id>
    <published>2016-12-02T13:10:32.000Z</published>
    <updated>2016-12-02T13:11:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x7ED9;$s\in [1,6]$&#x4E2A;&#x77F3;&#x5934;&#x7684;&#x91CD;&#x91CF;&#xFF0C;&#x6309;&#x7167;&#x7C7B;&#x4F3C;&#x5929;&#x5E73;&#x7684;&#x65B9;&#x5F0F;&#x60AC;&#x6302;&#xFF1A;&#x4FDD;&#x8BC1;&#x529B;&#x77E9;&#x76F8;&#x7B49;&#x3002;&#x6C42;&#x5728;&#x4E0D;&#x8D85;&#x8FC7;$r\leq 10$&#x957F;&#x5EA6;&#x6761;&#x4EF6;&#x4E0B;&#x53EF;&#x4EE5;&#x5F62;&#x6210;&#x7684;&#x6700;&#x957F;&#x957F;&#x5EA6;&#x3002;<br><a id="more"></a><br>&#x9898;&#x76EE;&#x94FE;&#x63A5;&#xFF1A;<a href="http://codeforces.com/gym/101150" target="_blank" rel="noopener">Here</a></p>
<p>&#x9898;&#x76EE;&#x63CF;&#x8FF0;&#x7684;&#x53EF;&#x80FD;&#x6709;&#x70B9;&#x62BD;&#x8C61;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x770B;<a href="http://vjudge.net/problem/UVA-1354" target="_blank" rel="noopener">UVA 1354</a>&#x3002;&#x3002;&#x3002;&#x3002;</p>
<p>&#x4ECE;&#x6839;&#x5F00;&#x59CB;<code>dfs</code>&#x679A;&#x4E3E;&#x5DE6;&#x53F3;&#x5B50;&#x6811;&#x9009;&#x62E9;&#x77F3;&#x5934;&#x7684;&#x96C6;&#x5408;&#xFF0C;&#x8FD9;&#x91CC;&#x5C31;&#x6D89;&#x53CA;&#x5230;&#x5B50;&#x96C6;&#x7684;&#x679A;&#x4E3E;&#x6280;&#x5DE7;&#xFF1A;&#x5C0F;&#x767D;&#x4E66;P286&#x3002;&#x8FD9;&#x91CC;&#x4ECB;&#x7ECD;&#x7684;&#x679A;&#x4E3E;$1\sim n$&#x7684;&#x6BCF;&#x4E2A;&#x96C6;&#x5408;$S$&#x7684;&#x6240;&#x6709;&#x5B50;&#x96C6;&#x7684;&#x603B;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;&#xFF1A;$O(3^n)$&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x6240;&#x6709;&#x5B50;&#x96C6;&#x7684;&#x4E2A;&#x6570;&#x3002;</p>
<p>&#x7136;&#x540E;&#x5F53;&#x5DE6;&#x53F3;&#x5B50;&#x6811;&#x7684;&#x77F3;&#x5934;&#x786E;&#x5B9A;&#x4E86;&#x4E4B;&#x540E;&#x5982;&#x4F55;&#x786E;&#x5B9A;&#x6811;&#x7684;&#x5BBD;&#x5EA6;&#x5462;&#xFF1F;&#x8FD8;&#x8981;&#x5BF9;&#x6BCF;&#x4E2A;&#x72B6;&#x6001;&#x8BB0;&#x5F55;&#x6240;&#x6709;&#x53EF;&#x80FD;&#x201C;&#x6446;&#x8BBE;&#x201D;&#x96C6;&#x5408;&#x7684;&#x6700;&#x5927;&#x5DE6;&#x53F3;&#x504F;&#x79FB;&#x91CF;&#xFF0C;&#x7136;&#x540E;<code>dfs</code>&#x7ED3;&#x675F;&#x540E;&#xFF0C;&#x518D;&#x66F4;&#x65B0;&#x5F53;&#x524D;&#x72B6;&#x6001;&#xFF08;&#x5F53;&#x524D;&#x7684;&#x4E00;&#x9897;&#x6574;&#x6811;&#xFF09;&#x3002;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x53F3;&#x5B50;&#x6811;&#x7684;&#x6700;&#x5DE6;&#x7AEF;&#x53EF;&#x80FD;&#x6BD4;&#x5DE6;&#x5B50;&#x6811;&#x7684;&#x6700;&#x5DE6;&#x7AEF;&#x8FD8;&#x8981;&#x504F;&#x5DE6;&#xFF0C;&#x5DE6;&#x5B50;&#x6811;&#x7684;&#x6700;&#x53F3;&#x7AEF;&#x53EF;&#x80FD;&#x6BD4;&#x53F3;&#x5B50;&#x6811;&#x7684;&#x6700;&#x53F3;&#x7AEF;&#x8FD8;&#x8981;&#x504F;&#x53F3;&#x3002;&#x9012;&#x5F52;&#x7ED3;&#x675F;&#x6761;&#x4EF6;&#x662F;&#xFF1A;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x77F3;&#x5934;&#x3002;</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">    <span class="keyword">double</span> L, R;</span><br><span class="line"></span><br><span class="line">    Node() {}</span><br><span class="line">    Node(<span class="keyword">double</span> _L, <span class="keyword">double</span> _R): L(_L), R(_R) {}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, vis[<span class="number">1</span> &lt;&lt; MAX_N];</span><br><span class="line"><span class="keyword">double</span> m, w[MAX_N], sum[<span class="number">1</span> &lt;&lt; MAX_N];</span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt; vec[<span class="number">1</span> &lt;&lt; MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> state)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (vis[state]) <span class="keyword">return</span>;</span><br><span class="line">    vis[state] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (__builtin_popcount(state) == <span class="number">1</span>) {</span><br><span class="line">        vec[state].push_back(Node(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> left = state &amp; (state - <span class="number">1</span>); left &gt; <span class="number">0</span>; left = (left - <span class="number">1</span>) &amp; state) {</span><br><span class="line">        <span class="keyword">int</span> right = state ^ left;</span><br><span class="line">        dfs(left); dfs(right);</span><br><span class="line">        <span class="keyword">double</span> a = sum[right] / (sum[left] + sum[right]);</span><br><span class="line">        <span class="keyword">double</span> b = sum[left] / (sum[left] + sum[right]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vec[left].size(); ++i) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vec[right].size(); ++j) {</span><br><span class="line">                <span class="keyword">double</span> L = min(-a + vec[left][i].L, b + vec[right][j].L);</span><br><span class="line">                <span class="keyword">double</span> R = max(-a + vec[left][i].R, b + vec[right][j].R);</span><br><span class="line">                vec[state].push_back(Node(L, R));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> limit = (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> (vis));</span><br><span class="line">    dfs(limit);</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">-1.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vec[limit].size(); ++i) {</span><br><span class="line">        <span class="keyword">double</span> diff = vec[limit][i].R - vec[limit][i].L;</span><br><span class="line">        <span class="keyword">if</span> (diff &lt; m) ans = max(ans, diff);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.10lf\n&quot;</span>, ans);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;w[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); ++i) {</span><br><span class="line">            sum[i] = <span class="number">0</span>, vec[i].clear();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) {</span><br><span class="line">                <span class="keyword">if</span> (i &amp; (<span class="number">1</span> &lt;&lt; j)) sum[i] += w[j];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        solve();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给$s\in [1,6]$个石头的重量，按照类似天平的方式悬挂：保证力矩相等。求在不超过$r\leq 10$长度条件下可以形成的最长长度。&lt;br&gt;
    
    </summary>
    
      <category term="思无涯" scheme="http://yoursite.com/categories/%E6%80%9D%E6%97%A0%E6%B6%AF/"/>
    
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces  382E 树型dp</title>
    <link href="http://yoursite.com/2016/12/02/Codeforces-382E-%E6%A0%91%E5%9E%8Bdp/"/>
    <id>http://yoursite.com/2016/12/02/Codeforces-382E-树型dp/</id>
    <published>2016-12-02T13:09:32.000Z</published>
    <updated>2016-12-02T13:10:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x8981;&#x6C42;&#x628A;&#x4E00;&#x4E2A;$n\leq 100$&#x4E2A;&#x70B9;&#x7684;&#x6811;&#x7684;&#x4E00;&#x4E9B;&#x7ED3;&#x70B9;&#x67D3;&#x6210;&#x9ED1;&#x8272;&#xFF0C;&#x4F7F;&#x5F97;&#x6BCF;&#x4E2A;&#x7ED3;&#x70B9;$u$&#x90FD;&#x81F3;&#x5C11;&#x53EF;&#x4EE5;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x9ED1;&#x8272;&#x7ED3;&#x70B9;$v$&#x6EE1;&#x8DB3;$dis(u,v)\leq K(K\in [0, 20])$&#x3002;&#x6C42;&#x65B9;&#x6848;&#x6570;&#xFF0C;&#x5BF9;$1e9+7$&#x53D6;&#x6A21;&#x3002;<br><a id="more"></a><br>&#x9898;&#x76EE;&#x94FE;&#x63A5;&#xFF1A;<a href="http://codeforces.com/contest/735/problem/E" target="_blank" rel="noopener">Here</a></p>
<p>&#x7528;$dp[u][i]$&#x8868;&#x793A;&#x4EE5;$u$&#x4E3A;&#x6839;&#x7684;&#x5B50;&#x6811;&#x8DDD;&#x79BB;$u$&#x6700;&#x8FD1;&#x7684;&#x9ED1;&#x70B9;&#x8DDD;&#x79BB;&#x4E3A;$i$&#x7684;&#x5408;&#x6CD5;&#x65B9;&#x6848;&#x6570;&#x3002;&#x8003;&#x8651;&#x7531;&#x513F;&#x5B50;&#x9012;&#x63A8;&#x7236;&#x4EB2;&#x3002;<strong>&#x9700;&#x8981;&#x628A;&#x6240;&#x6709;&#x513F;&#x5B50;&#x7684;&#x65B9;&#x6848;&#x7EC4;&#x5408;&#x60C5;&#x51B5;&#x5206;&#x7C7B;&#x3002;</strong>&#x5BF9;&#x4E8E;$dp[v_1][j]$&#x548C;$dp[v_2][k]$&#x53EF;&#x4EE5;&#x6309;&#x7167;$v_1$&#x548C;$v_2$&#x662F;&#x5426;&#x76F8;&#x4E92;&#x5F71;&#x54CD;&#xFF0C;&#x5206;&#x6210;&#x4E24;&#x7C7B;&#xFF1A;</p>
<p>&#x5F53;$j+k+2\leq 2*K$&#x65F6;&#xFF0C;&#x8FD9;&#x65F6;&#x8FD9;&#x4E24;&#x9897;&#x5B50;&#x6811;&#x7684;&#x6700;&#x8FD1;&#x9ED1;&#x70B9;&#x901A;&#x8FC7;$u$&#x7ED3;&#x70B9;&#x662F;&#x53EF;&#x4EE5;&#x76F8;&#x4E92;&#x5F71;&#x54CD;&#x7684;&#xFF0C;&#x90A3;&#x4E48;&#x5B9E;&#x9645;&#x4E0A;&#x5BF9;&#x4E8E;$u$&#x800C;&#x8A00;&#xFF0C;&#x771F;&#x6B63;&#x6709;&#x6548;&#x7684;&#x53EA;&#x662F;$\min (j,k)$&#x3002;</p>
<p>&#x5F53;$j+k+2 &gt; 2 * K$&#x65F6;&#xFF0C;&#x8FD9;&#x65F6;&#x4E24;&#x9897;&#x5B50;&#x6811;&#x4E0A;&#x7684;&#x6700;&#x8FD1;&#x9ED1;&#x70B9;&#x5C31;&#x65E0;&#x6CD5;&#x901A;&#x8FC7;$u$&#x7ED3;&#x70B9;&#x76F8;&#x4E92;&#x5F71;&#x54CD;&#x4E86;&#xFF0C;&#x90A3;&#x4E48;&#x9700;&#x8981;&#x8BB0;&#x5F55;$\max (j,k)$&#x3002;</p>
<p>&#x8FD9;&#x6837;&#x5B50;&#x5C31;&#x53EF;&#x4EE5;&#x6709;&#x6548;&#x5F97;<strong>&#x628A;&#x6240;&#x6709;&#x513F;&#x5B50;&#x7684;&#x7EC4;&#x5408;&#x60C5;&#x51B5;&#x533A;&#x5206;&#x5F00;&#x6765;&#x8FDB;&#x884C;&#x7EDF;&#x8BA1;&#x3002;</strong>&#x6BCF;&#x66F4;&#x65B0;&#x4E00;&#x6B21;&#x5B50;&#x8282;&#x70B9;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x5C31;&#x8981;&#x66F4;&#x65B0;&#x7236;&#x8282;&#x70B9;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x7236;&#x8282;&#x70B9;&#x7684;&#x65B9;&#x6848;&#x662F;&#x513F;&#x5B50;&#x8282;&#x70B9;&#x5408;&#x6CD5;&#x65B9;&#x6848;&#x7684;&#x7D2F;&#x4E58;&#xFF0C;&#x521D;&#x59CB;&#x5316;&#xFF1A;$dp[u][0]=dp[u][K+1]=1$&#x3002;</p>
<p>&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;$O(n*K^2)$</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = (ll)(<span class="number">1e9</span>) + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, K;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[MAX_N];</span><br><span class="line">ll dp[MAX_N][<span class="number">50</span>], f[<span class="number">50</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span> </span>{</span><br><span class="line">    dp[u][<span class="number">0</span>] = dp[u][K + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; son[u].size(); ++i) {</span><br><span class="line">        <span class="keyword">int</span> v = son[u][i];</span><br><span class="line">        <span class="keyword">if</span> (v == p) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v, u);</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span> (f));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">2</span> * K; ++j) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">2</span> * K + <span class="number">1</span>; ++k) {</span><br><span class="line">                <span class="keyword">if</span> (j + k &lt;= <span class="number">2</span> * K) {</span><br><span class="line">                    f[min(j, k + <span class="number">1</span>)] += dp[u][j] * dp[v][k] % mod;</span><br><span class="line">                    f[min(j, k + <span class="number">1</span>)] %= mod;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    f[max(j, k + <span class="number">1</span>)] += dp[u][j] * dp[v][k] % mod;</span><br><span class="line">                    f[max(j, k + <span class="number">1</span>)] %= mod;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">memcpy</span>(dp[u], f, <span class="keyword">sizeof</span> (f));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;K)) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) son[i].clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) {</span><br><span class="line">            <span class="keyword">int</span> a, b;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">            son[a].pb(b); son[b].pb(a);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> (dp));</span><br><span class="line">        dfs(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= K; ++i) ans = (ans + dp[<span class="number">1</span>][i]) % mod;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要求把一个$n\leq 100$个点的树的一些结点染成黑色，使得每个结点$u$都至少可以找到一个黑色结点$v$满足$dis(u,v)\leq K(K\in [0, 20])$。求方案数，对$1e9+7$取模。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/tags/Codeforces/"/>
    
      <category term="树型dp" scheme="http://yoursite.com/tags/%E6%A0%91%E5%9E%8Bdp/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 381D 树上二分+后缀和</title>
    <link href="http://yoursite.com/2016/12/02/Codeforces-381D-%E6%A0%91%E4%B8%8A%E4%BA%8C%E5%88%86-%E5%90%8E%E7%BC%80%E5%92%8C/"/>
    <id>http://yoursite.com/2016/12/02/Codeforces-381D-树上二分-后缀和/</id>
    <published>2016-12-02T13:08:03.000Z</published>
    <updated>2016-12-02T13:09:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x7ED9;&#x4E00;&#x4E2A;$n\leq 2*10^5$&#x4E2A;&#x70B9;&#x7684;&#x6811;&#xFF0C;&#x6839;&#x8282;&#x70B9;&#x4E3A;1&#x3002;&#x6BCF;&#x4E2A;&#x7ED3;&#x70B9;&#x7684;&#x6743;&#x503C;&#x4E3A;$value[i]$&#xFF0C;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;$u$&#x53EF;&#x4EE5;&#x63A7;&#x5236;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;$v$&#x5F53;&#x4E14;&#x4EC5;&#x5F53;$v$&#x662F;&#x4EE5;$u$&#x4E3A;&#x6839;&#x7684;&#x5B50;&#x6811;&#x4E0A;&#x7684;&#x70B9;&#x4E14;$u!=v$&#x4E14;$dis(u,v)\leq value[v]$&#x3002;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x70B9;&#x6C42;&#x51FA;&#x5B83;&#x53EF;&#x4EE5;&#x63A7;&#x5236;&#x7684;&#x70B9;&#x6570;&#x91CF;&#x3002;<br><a id="more"></a><br>&#x9898;&#x76EE;&#x94FE;&#x63A5;&#xFF1A;<a href="http://codeforces.com/contest/740/problem/D" target="_blank" rel="noopener">Here</a></p>
<p>&#x6BCF;&#x4E2A;&#x70B9;&#x53EF;&#x4EE5;&#x88AB;&#x63A7;&#x5236;&#x7684;&#x8303;&#x56F4;&#x6709;&#x4E2A;&#x4E0A;&#x754C;&#x7684;&#x3002;&#x5728;&#x4ECE;&#x6839;<code>dfs</code>&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x8BB0;&#x5F55;&#x5F53;&#x524D;&#x7ED3;&#x70B9;&#x5230;&#x6839;&#x8DEF;&#x5F84;&#x4E0A;&#x70B9;&#x96C6;&#x5408;&#x4EE5;&#x53CA;&#x6240;&#x6709;&#x8DEF;&#x5F84;&#x4E0A;&#x70B9;&#x5230;&#x6839;&#x7684;&#x8DDD;&#x79BB;&#xFF0C;&#x8DDD;&#x79BB;&#x5177;&#x6709;&#x5355;&#x8C03;&#x6027;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x4E8C;&#x5206;&#x67E5;&#x627E;&#x6216;&#x8005;<code>lower_bound</code>&#x67E5;&#x627E;&#xFF0C;&#x627E;&#x5230;&#x4F5C;&#x7528;&#x7684;&#x4E0A;&#x754C;&#x4E4B;&#x540E;&#xFF0C;&#x5728;&#x4E0A;&#x754C;&#x7684;&#x4F4D;&#x7F6E;-1&#xFF0C;&#x5728;&#x5F53;&#x524D;&#x4F4D;&#x7F6E;+1&#xFF0C;&#x7136;&#x540E;&#x641E;&#x4E00;&#x4E2A;&#x540E;&#x7F00;&#x548C;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002;</p>
<p>$$dis[u]-dis[w]\leq value[u]\rightarrow dis[w]\geq dis[u]-value[u]$$</p>
<p>&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;$O(n\log n)$<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> value[MAX_N], sta[MAX_N], ans[MAX_N];</span><br><span class="line">ll dis[MAX_N];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; son[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, ll d, <span class="keyword">int</span> depth)</span> </span>{</span><br><span class="line">    sta[depth] = u, dis[depth] = d;</span><br><span class="line">    <span class="keyword">int</span> pos = lower_bound(dis, dis + depth + <span class="number">1</span>, d - value[u]) - dis - <span class="number">1</span>;</span><br><span class="line">    ans[sta[pos]]--, ans[u]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; son[u].size(); ++i) {</span><br><span class="line">        <span class="keyword">int</span> v = son[u][i].first, w = son[u][i].second;</span><br><span class="line">        dfs(v, d + w, depth + <span class="number">1</span>);</span><br><span class="line">        ans[u] += ans[v];</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;value[i]), son[i].clear();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) {</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        son[a].push_back(make_pair(i, b));</span><br><span class="line">    }</span><br><span class="line">    dis[<span class="number">0</span>] = <span class="number">-1l</span>l &lt;&lt; <span class="number">60</span>;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i] - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
<h4 id="&#x62D3;&#x5C55;"><a href="#&#x62D3;&#x5C55;" class="headerlink" title="&#x62D3;&#x5C55;"></a>&#x62D3;&#x5C55;</h4><p>&#x53E6;&#x5916;&#x5982;&#x679C;&#x9898;&#x76EE;&#x6539;&#x6210;&#xFF1A;</p>
<blockquote>
<p>&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;$u$&#x53EF;&#x4EE5;&#x63A7;&#x5236;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;$v$&#x5F53;&#x4E14;&#x4EC5;&#x5F53;$v$&#x662F;&#x4EE5;$u$&#x4E3A;&#x6839;&#x7684;&#x5B50;&#x6811;&#x4E0A;&#x7684;&#x70B9;&#x4E14;$u!=v$&#x4E14;$dis(u,v)\leq value[u]$&#x3002;</p>
</blockquote>
<p>&#x90A3;&#x4E48;&#x662F;&#x4E0D;&#x662F;&#x53EF;&#x4EE5;dfs&#x5E8F;+&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x505A;&#x4E86;&#x5462;&#xFF1F;&#x5199;&#x4E86;&#x4EE3;&#x7801;&#xFF0C;&#x8FD8;&#x6CA1;&#x9A8C;&#x8BC1;&#x3002;&#x3002;&#x3002;&#x3002;&#x3002;&#x3002;&#x3002;<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> left[MAX_N], right[MAX_N], ans[MAX_N];</span><br><span class="line">ll store[MAX_N * <span class="number">2</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; son[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dis</span> {</span></span><br><span class="line">    ll x;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Dis&amp; rhs) <span class="keyword">const</span> {</span><br><span class="line">        <span class="keyword">return</span> x &lt; rhs.x;</span><br><span class="line">    }</span><br><span class="line">} dis[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Value</span> {</span></span><br><span class="line">    ll x;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Value&amp; rhs) <span class="keyword">const</span> {</span><br><span class="line">        <span class="keyword">return</span> x &lt; rhs.x;</span><br><span class="line">    }</span><br><span class="line">} value[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Bit</span> {</span></span><br><span class="line">    <span class="keyword">int</span> arr[MAX_N * <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="built_in">memset</span>(arr, <span class="number">0</span>, <span class="keyword">sizeof</span> (arr));</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= <span class="number">2</span> * n; i += lowbit(i)) {</span><br><span class="line">            arr[i]++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &gt; <span class="number">0</span>; i -= lowbit(i)) {</span><br><span class="line">            ret += arr[i];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line">} bit;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span>&amp; d)</span> </span>{</span><br><span class="line">    left[u] = ++d;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; son[u].size(); ++i) {</span><br><span class="line">        dfs2(son[u][i].first, d);</span><br><span class="line">    }</span><br><span class="line">    right[u] = d;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; son[u].size(); ++i) {</span><br><span class="line">        pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; cur = son[u][i];</span><br><span class="line">        <span class="keyword">int</span> v = cur.first, w = cur.second;</span><br><span class="line">        dis[v].x = dis[u].x + w;</span><br><span class="line">        dfs1(v);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>{</span><br><span class="line">    dis[<span class="number">1</span>].x = <span class="number">0</span>;</span><br><span class="line">    dfs1(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">        value[i].x += dis[i].x;</span><br><span class="line">        store[i - <span class="number">1</span>] = dis[i].x, store[i + n - <span class="number">1</span>] = value[i].x;</span><br><span class="line">        dis[i].id = value[i].id = i;</span><br><span class="line">    }</span><br><span class="line">    sort(store, store + <span class="number">2</span> * n);</span><br><span class="line">    <span class="keyword">int</span> m = unique(store, store + <span class="number">2</span> * n) - store;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">        value[i].x = lower_bound(store, store + m, value[i].x) - store + <span class="number">1</span>;</span><br><span class="line">        dis[i].x = lower_bound(store, store + m, dis[i].x) - store + <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    sort(value + <span class="number">1</span>, value + n + <span class="number">1</span>); sort(dis + <span class="number">1</span>, dis + n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> d = <span class="number">0</span>, st = <span class="number">1</span>;</span><br><span class="line">    dfs2(<span class="number">1</span>, d);</span><br><span class="line">    bit.init();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">        <span class="keyword">while</span> (st &lt;= n &amp;&amp; dis[st].x &lt;= value[i].x) {</span><br><span class="line">            bit.update(left[dis[st].id]);</span><br><span class="line">            st++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> id = value[i].id;</span><br><span class="line">        ans[id] = bit.query(right[id]) - bit.query(left[id] - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i] - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;value[i].x), son[i].clear();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) {</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        son[a].push_back(make_pair(i, b));</span><br><span class="line">    }</span><br><span class="line">    solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给一个$n\leq 2*10^5$个点的树，根节点为1。每个结点的权值为$value[i]$，一个结点$u$可以控制一个结点$v$当且仅当$v$是以$u$为根的子树上的点且$u!=v$且$dis(u,v)\leq value[v]$。对于每个点求出它可以控制的点数量。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="Codeforces" scheme="http://yoursite.com/tags/Codeforces/"/>
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 378F 区间dp，递归型dp，博弈，复杂度证明</title>
    <link href="http://yoursite.com/2016/11/25/Codeforces-378F-%E5%8C%BA%E9%97%B4dp%EF%BC%8C%E9%80%92%E5%BD%92%E5%9E%8Bdp%EF%BC%8C%E5%8D%9A%E5%BC%88%EF%BC%8C%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%AF%81%E6%98%8E/"/>
    <id>http://yoursite.com/2016/11/25/Codeforces-378F-区间dp，递归型dp，博弈，复杂度证明/</id>
    <published>2016-11-25T15:19:54.000Z</published>
    <updated>2016-11-26T12:59:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x7ED9;$n \leq 4000$&#x4E2A;&#x6570;$data[i]\in [-10^5, 10^5]$&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x4EBA;&#x9996;&#x5148;&#x4ECE;&#x5DE6;&#x8FB9;&#x53D6;&#x4E00;&#x4E2A;&#x6216;&#x4E24;&#x4E2A;&#x6570;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x4EBA;&#x4ECE;&#x53F3;&#x8FB9;&#x53D6;&#xFF0C;&#x4E14;&#x5982;&#x679C;&#x4E0A;&#x4E00;&#x4E2A;&#x4EBA;&#x53D6;$x$&#x4E2A;&#x6570;&#xFF0C;&#x90A3;&#x4E48;&#x4E0B;&#x4E00;&#x4E2A;&#x4EBA;&#x53EA;&#x80FD;&#x53D6;$x$&#x6216;&#x8005;$x+1$&#x4E2A;&#x6570;&#xFF0C;&#x53D6;&#x5230;&#x4E0D;&#x591F;$x$&#x4E2A;&#x6570;&#x4E3A;&#x6B62;&#x3002;&#x4EE4;$diff$&#x4E3A;&#x7B2C;&#x4E00;&#x4E2A;&#x4EBA;&#x53D6;&#x51FA;&#x7684;&#x6570;&#x5B57;&#x4E4B;&#x548C;&#x51CF;&#x53BB;&#x7B2C;&#x4E8C;&#x4E2A;&#x4EBA;&#x53D6;&#x51FA;&#x7684;&#x6570;&#x5B57;&#x4E4B;&#x548C;&#xFF0C;&#x5E76;&#x4E14;&#x7B2C;&#x4E00;&#x4E2A;&#x4EBA;&#x53EA;&#x80FD;&#x4ECE;&#x5DE6;&#x8FB9;&#x8FDE;&#x7EED;&#x53D6;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x4EBA;&#x53EA;&#x80FD;&#x4ECE;&#x53F3;&#x8FB9;&#x8FDE;&#x7EED;&#x53D6;&#x3002;&#x7B2C;&#x4E00;&#x4E2A;&#x4EBA;&#x60F3;&#x8981;&#x4F7F;$diff$&#x5C3D;&#x53EF;&#x80FD;&#x5927;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x4EBA;&#x60F3;&#x8981;&#x4F7F;$diff$&#x5C3D;&#x53EF;&#x80FD;&#x5C0F;&#x3002;&#x6C42;&#x6700;&#x7EC8;&#x7684;$diff$&#x662F;&#x591A;&#x5C11;&#xFF1F;<br><a id="more"></a><br>&#x9898;&#x76EE;&#x94FE;&#x63A5;&#xFF1A;<a href="http://codeforces.com/contest/738/problem/F" target="_blank" rel="noopener">Here</a></p>
<p>&#x5176;&#x5B9E;&#x610F;&#x601D;&#x5C31;&#x662F;&#x6BCF;&#x4E2A;&#x4EBA;&#x90FD;&#x60F3;&#x4F7F;&#x81EA;&#x5DF1;&#x53D6;&#x51FA;&#x6765;&#x7684;&#x6570;&#x5B57;&#x4E4B;&#x548C;&#x6700;&#x5927;&#x3002;&#x770B;&#x5230;&#x8FD9;&#x4E2A;&#x9898;&#x76EE;&#x5E94;&#x8BE5;&#xFF08;&#xFF1F;&#xFF09;&#x9996;&#x5148;&#x60F3;&#x5230;&#x7684;&#x662F;&#x533A;&#x95F4;dp&#xFF1A;&#x7528;$dp[a][b][k][0]$&#x8868;&#x793A;&#x7B2C;&#x4E00;&#x4E2A;&#x4EBA;&#x5728;&#x533A;&#x95F4;$[a,b]$&#x65F6;&#xFF0C;&#x5E76;&#x4E14;&#x4E0A;&#x4E00;&#x6B21;&#x7B2C;&#x4E8C;&#x4E2A;&#x4EBA;&#x53D6;&#x4E86;$k$&#x4E2A;&#x6570;&#x53EF;&#x4EE5;&#x83B7;&#x5F97;&#x7684;&#x6700;&#x5927;&#x5DEE;&#x503C;$diff$&#xFF0C;&#x7528;$dp[a][b][k][1]$&#x8868;&#x793A;&#x7B2C;&#x4E8C;&#x4E2A;&#x4EBA;&#x5728;&#x533A;&#x95F4;$[a,b]$&#x65F6;&#xFF0C;&#x5E76;&#x4E14;&#x4E0A;&#x4E00;&#x6B21;&#x7B2C;&#x4E00;&#x4E2A;&#x4EBA;&#x53D6;&#x4E86;$k$&#x4E2A;&#x6570;&#x53EF;&#x4EE5;&#x83B7;&#x5F97;&#x7684;&#x6700;&#x5C0F;&#x5DEE;&#x503C;$diff$&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x6700;&#x5927;&#x7684;$-diff$&#x3002;&#x8003;&#x8651;&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#xFF1A;<br>$$<br>dp[a][b][k][0] = \max(sum[a+k-1]-sum[a-1]-dp[a+k][b][k][1],sum[a+k]-sum[a-1]-dp[a+k+1][b][k +1][1])<br>$$<br>$dp[a][b][k][1]$&#x7C7B;&#x4F3C;&#x3002;&#x4F46;&#x662F;&#x8FD9;&#x6837;&#x5B50;&#x8F6C;&#x79FB;&#x662F;$O(n^3)$&#x7684;&#x3002;</p>
<p>&#x770B;&#x770B;&#x5B98;&#x65B9;&#x9898;&#x89E3;&#xFF1A;<a href="http://codeforces.com/blog/entry/48501" target="_blank" rel="noopener">Here</a></p>
<p>&#x8003;&#x8651;&#x4E00;&#x4E9B;&#x4E8B;&#x5B9E;&#x3002;&#x9996;&#x5148;$\frac{k(k+1)}{2}\leq n$&#xFF0C;&#x56E0;&#x4E3A;&#x5982;&#x679C;&#x4E4B;&#x524D;&#x7684;&#x4EBA;&#x5728;&#x4E0A;&#x4E00;&#x6B65;&#x53D6;&#x4E86;$k$&#x4E2A;&#x6570;&#xFF0C;&#x90A3;&#x4E48;&#x4E24;&#x4E2A;&#x4EBA;&#x81F3;&#x5C11;&#x53D6;&#x4E86;$1+2+3+\cdots + k = \frac{k(k+1)}{2}$&#x4E2A;&#x6570;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x5F97;&#x5230;$k\leq \sqrt {2n}$&#x3002;</p>
<p>&#x5176;&#x6B21;&#x7B2C;&#x4E8C;&#x4E2A;&#x4EBA;&#x7684;&#x53D6;&#x6570;&#x5B57;&#x4E2A;&#x6570;&#x4E00;&#x5B9A;&#x662F;&#x4E0D;&#x5C11;&#x4E8E;&#x7B2C;&#x4E00;&#x4E2A;&#x4EBA;&#x7684;&#x3002;&#x5E76;&#x4E14;&#x7B2C;&#x4E8C;&#x4E2A;&#x4EBA;&#x53D6;&#x6570;&#x5B57;&#x7684;&#x4E2A;&#x6570;&#x4E0D;&#x4F1A;&#x6BD4;&#x7B2C;&#x4E00;&#x4E2A;&#x4EBA;&#x53D6;&#x6570;&#x5B57;&#x4E2A;&#x6570;&#x591A;$\sqrt {2n}$&#x4E2A;&#x7684;&#x3002;&#x7136;&#x540E;&#x518D;&#x6765;&#x8003;&#x8651;&#x6BCF;&#x6B21;&#x7684;&#x533A;&#x95F4;&#x957F;&#x5EA6;&#xFF1A;$d=(n-r)-(l-1)$&#x3002;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x4EC5;&#x8003;&#x8651;&#x6BCF;&#x6B21;&#x4E24;&#x4E2A;&#x4EBA;&#x53D6;&#x76F8;&#x540C;&#x4E2A;&#x6570;&#x7684;&#x6570;&#x5B57;&#xFF0C;&#x90A3;&#x4E48;&#x6709;&#xFF1A;$0\leq d \leq k - 1$&#xFF0C;&#x5982;&#x679C;&#x7B2C;&#x4E8C;&#x4E2A;&#x4EBA;&#x6BCF;&#x6B21;&#x591A;&#x53D6;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#x7684;&#x8BDD;&#x90A3;&#x4E48;&#x5F53;&#x8003;&#x8651;$[a,b,k]$&#x72B6;&#x6001;&#x65F6;&#x7B2C;&#x4E8C;&#x4E2A;&#x4EBA;&#x5C31;&#x591A;&#x53D6;&#x4E86;$k-1$&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x56E0;&#x6B64;<strong>&#x53EF;&#x4EE5;&#x91CD;&#x65B0;&#x8BBE;&#x8BA1;&#x72B6;&#x6001;&#x5B9A;&#x4E49;</strong>&#xFF1A;$dp[a][b][k][]$&#x8868;&#x793A;&#x5F53;&#x524D;&#x4EBA;&#x8003;&#x8651;&#x5F53;&#x524D;&#x8D77;&#x59CB;&#x4F4D;&#x7F6E;&#x662F;$a$&#xFF0C;&#x5E76;&#x4E14;&#x4E0A;&#x4E00;&#x4E2A;&#x4EBA;&#x4E0A;&#x4E00;&#x6B21;&#x53D6;&#x4E86;$k$&#x4E2A;&#x6570;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x4EBA;&#x6BD4;&#x7B2C;&#x4E00;&#x4E2A;&#x4EBA;&#x591A;&#x53D6;&#x4E86;$b$&#x4E2A;&#x6570;&#x65F6;&#xFF0C;$diff$&#x7684;&#x6700;&#x5927;&#x503C;&#x3002;&#x6700;&#x540E;&#x4E00;&#x7EF4;01&#x3002;&#x56E0;&#x4E3A;$b$&#x548C;$k$&#x90FD;&#x662F;$O(\sqrt {n})$&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x72B6;&#x6001;&#x6570;&#x4E5F;&#x662F;$O(n^2)$&#x7684;&#x3002;</p>
<p>&#x5BF9;&#x4E8E;&#x7B2C;&#x4E00;&#x4E2A;&#x4EBA;&#x72B6;&#x6001;$(a,b,k)$&#x65F6;&#xFF0C;&#x5B9E;&#x9645;&#x8003;&#x8651;&#x7684;&#x533A;&#x95F4;&#x662F;&#xFF1A;$L=a,R=n-a-b+1$&#xFF0C;&#x5BF9;&#x4E8E;&#x7B2C;&#x4E8C;&#x4E2A;&#x4EBA;&#x72B6;&#x6001;$(a,b,k)$&#x65F6;&#xFF0C;&#x5B9E;&#x9645;&#x8003;&#x8651;&#x7684;&#x533A;&#x95F4;&#x662F;$L=a,R=n-a-b+1+k$&#xFF0C;&#x56E0;&#x4E3A;&#x7B2C;&#x4E00;&#x4E2A;&#x4EBA;&#x4E0A;&#x6B21;&#x53D6;&#x4E86;$k$&#x4E2A;&#x6570;&#xFF0C;&#x7B97;&#x5728;&#x4E86;$a$&#x91CC;&#x9762;&#xFF0C;&#x4F46;&#x662F;&#x7B2C;&#x4E8C;&#x4E2A;&#x4EBA;&#x8FD8;&#x6CA1;&#x6709;&#x53D6;&#xFF0C;&#x56E0;&#x6B64;&#x8981;&#x52A0;&#x4E0A;$k$&#x3002;&#x63A5;&#x4E0B;&#x6765;&#x7684;&#x5C31;&#x7B80;&#x5355;&#x4E86;&#xFF0C;&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x4E00;&#x4E0B;&#x548C;&#x5224;&#x65AD;&#x4E00;&#x4E0B;&#x8FB9;&#x754C;&#x5373;&#x53EF;&#x3002;</p>
<p>&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;$O(n^2)$</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">4010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> data[MAX_N], vis[MAX_N][<span class="number">75</span>][<span class="number">75</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> dp[MAX_N][<span class="number">75</span>][<span class="number">75</span>][<span class="number">2</span>], sum[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> k, <span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> L, R;</span><br><span class="line">    <span class="keyword">if</span> (id == <span class="number">0</span>) L = a, R = n - a - b + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> L = a, R = n - a - b + <span class="number">1</span> + k;</span><br><span class="line">    <span class="keyword">if</span> (R - L + <span class="number">1</span> &lt; k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (vis[a][b][k][id]) <span class="keyword">return</span> dp[a][b][k][id];</span><br><span class="line">    vis[a][b][k][id] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>* cur = &amp;dp[a][b][k][id];</span><br><span class="line">    <span class="keyword">if</span> (id == <span class="number">0</span>) {</span><br><span class="line">        *cur = sum[a + k - <span class="number">1</span>] - sum[a - <span class="number">1</span>] - work(a + k, b, k, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (R - L &gt;= k) *cur = max(*cur, sum[a + k] - sum[a - <span class="number">1</span>] - work(a + k + <span class="number">1</span>, b, k + <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        *cur = sum[R] - sum[R - k] - work(a, b, k, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (R - L &gt;= k) *cur = max(*cur, sum[R] - sum[R - k - <span class="number">1</span>] - work(a, b + <span class="number">1</span>, k + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> *cur;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n); </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data[i]);</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + data[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> ans = work(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给$n \leq 4000$个数$data[i]\in [-10^5, 10^5]$，第一个人首先从左边取一个或两个数，第二个人从右边取，且如果上一个人取$x$个数，那么下一个人只能取$x$或者$x+1$个数，取到不够$x$个数为止。令$diff$为第一个人取出的数字之和减去第二个人取出的数字之和，并且第一个人只能从左边连续取，第二个人只能从右边连续取。第一个人想要使$diff$尽可能大，第二个人想要使$diff$尽可能小。求最终的$diff$是多少？&lt;br&gt;
    
    </summary>
    
      <category term="思无涯" scheme="http://yoursite.com/categories/%E6%80%9D%E6%97%A0%E6%B6%AF/"/>
    
    
      <category term="Codeforces" scheme="http://yoursite.com/tags/Codeforces/"/>
    
      <category term="区间dp" scheme="http://yoursite.com/tags/%E5%8C%BA%E9%97%B4dp/"/>
    
      <category term="递归型dp" scheme="http://yoursite.com/tags/%E9%80%92%E5%BD%92%E5%9E%8Bdp/"/>
    
      <category term="博弈" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%BC%88/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 378E 好玩啊~</title>
    <link href="http://yoursite.com/2016/11/24/Codeforces-378E-%E5%A5%BD%E7%8E%A9%E5%95%8A/"/>
    <id>http://yoursite.com/2016/11/24/Codeforces-378E-好玩啊/</id>
    <published>2016-11-24T14:57:00.000Z</published>
    <updated>2016-11-24T15:04:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x6709;$n\leq 10^6$&#x4E2A;&#x4F4D;&#x7F6E;&#xFF0C;&#x6BCF;&#x4E2A;&#x4F4D;&#x7F6E;&#x6709;&#x6307;&#x793A;&#x724C;&#xFF1A;&#x2019;U&#x2019;&#x8868;&#x793A;&#x5411;&#x4E0A;&#x8D70;&#xFF0C;&#x2018;D&#x2019;&#x8868;&#x793A;&#x5411;&#x4E0B;&#x8D70;&#xFF0C;&#x5E76;&#x4E14;&#x6BCF;&#x7ECF;&#x8FC7;&#x4E00;&#x4E2A;&#x6307;&#x793A;&#x724C;&#x540E;&#x6307;&#x793A;&#x724C;&#x4F1A;&#x6307;&#x5411;&#x4E0E;&#x539F;&#x6765;&#x76F8;&#x53CD;&#x7684;&#x65B9;&#x5411;&#x3002;&#x7ED9;&#x51FA;&#x6BCF;&#x4E2A;&#x6307;&#x793A;&#x724C;&#x7684;&#x521D;&#x59CB;&#x6307;&#x5411;&#xFF0C;&#x6C42;&#x51FA;&#x6BCF;&#x4E2A;&#x4F4D;&#x7F6E;&#x8D70;&#x51FA;&#x8FD9;$n$&#x4E2A;&#x4F4D;&#x7F6E;&#x6700;&#x5C11;&#x9700;&#x8981;&#x591A;&#x5C11;&#x6B65;&#x3002;&#x4EE5;&#x6BCF;&#x4E2A;&#x4F4D;&#x7F6E;&#x4E3A;&#x8D77;&#x70B9;&#x65F6;&#xFF0C;&#x6240;&#x6709;&#x6307;&#x793A;&#x724C;&#x7684;&#x6307;&#x5411;&#x5C31;&#x662F;&#x7ED9;&#x51FA;&#x7684;&#x521D;&#x59CB;&#x6307;&#x5411;&#xFF0C;&#x5982;&#x679C;&#x65E0;&#x6CD5;&#x8D70;&#x51FA;&#x8F93;&#x51FA;-1.<br><a id="more"></a><br>&#x9898;&#x76EE;&#x94FE;&#x63A5;&#xFF1A;<a href="http://codeforces.com/contest/733/problem/E" target="_blank" rel="noopener">Here</a></p>
<p>&#x5BF9;&#x4E8E;&#x6837;&#x4F8B;</p>
<blockquote>
<p>3<br>UUD</p>
</blockquote>
<p>&#x5E94;&#x8BE5;&#x8F93;&#x51FA;&#xFF1A;</p>
<blockquote>
<p>5 6 3</p>
</blockquote>
<p>&#x9996;&#x5148;&#x6BCF;&#x4E2A;&#x4F4D;&#x7F6E;&#x4E00;&#x5B9A;&#x662F;&#x53EF;&#x4EE5;&#x8D70;&#x51FA;&#x53BB;&#x7684;&#x3002;&#x5E76;&#x4E14;&#x6BCF;&#x4E2A;&#x4F4D;&#x7F6E;&#x8D70;&#x51FA;&#x53BB;&#x7684;&#x6B65;&#x6570;&#x53EA;&#x548C;&#x201C;&#x62D0;&#x70B9;&#x201D;&#x6709;&#x5173;&#xFF0C;&#x62D0;&#x70B9;&#x5C31;&#x662F;&#x5047;&#x8BBE;&#x5F53;&#x524D;&#x5411;&#x4E0A;&#x8D70;&#xFF0C;&#x9047;&#x5230;&#x4E86;&#x201D;D&#x201D;&#x7684;&#x6307;&#x793A;&#x724C;&#xFF0C;&#x90A3;&#x4E48;&#x8FD9;&#x4E2A;&#x6307;&#x793A;&#x724C;&#x7684;&#x4F4D;&#x7F6E;&#x5C31;&#x662F;&#x62D0;&#x70B9;&#xFF0C;&#x6216;&#x8005;&#x5F53;&#x524D;&#x5411;&#x4E0B;&#x8D70;&#xFF0C;&#x9047;&#x5230;&#x4E86;&#x201C;U&#x201D;&#x7684;&#x6307;&#x793A;&#x724C;&#xFF0C;&#x90A3;&#x4E48;&#x8FD9;&#x4E2A;&#x6307;&#x793A;&#x724C;&#x7684;&#x4F4D;&#x7F6E;&#x4E5F;&#x662F;&#x62D0;&#x70B9;&#x3002;</p>
<p>&#x56E0;&#x6B64;&#xFF0C;&#x4E00;&#x5F00;&#x59CB;&#x6211;&#x662F;&#x60F3;&#x7EDF;&#x8BA1;&#x524D;&#x7F00;&#x2019;U&#x2019;&#x548C;&#x540E;&#x7F00;&#x2019;D&#x2019;&#x7684;&#x4E2A;&#x6570;&#xFF0C;&#x5DF2;&#x7ECF;&#x524D;&#x7F00;&#x2018;U&#x2019;&#x548C;&#x524D;&#x7F00;&#x2018;D&#x2019;&#x7684;&#x4F4D;&#x7F6E;&#x548C;&#xFF0C;&#x7136;&#x540E;&#x901A;&#x8FC7;&#x67D0;&#x79CD;&#x524D;&#x7F00;&#x548C;&#x641E;&#x51FA;&#x6765;&#xFF0C;&#x4F46;&#x662F;&#x5E76;&#x6CA1;&#x6709;&#x641E;&#x51FA;&#x6765;&#xFF0C;&#x5199;&#x4E86;&#x56DB;&#x79CD;&#x5206;&#x7C7B;&#x8BA8;&#x8BBA;&#xFF0C;&#x53EF;&#x80FD;&#x662F;&#x7EC6;&#x8282;&#x592A;&#x591A;&#x4E86;&#xFF0C;&#x8FB9;&#x754C;&#x4E0D;&#x597D;&#x628A;&#x63E1;&#xFF0C;GG&#x3002;&#x540E;&#x6765;&#x770B;&#x4E86;&#x522B;&#x4EBA;&#x7684;AC&#x4EE3;&#x7801;&#xFF0C;&#x7279;&#x522B;&#x7B80;&#x6D01;&#x3002;&#x3002;&#x3002;&#x3002;&#x3002;&#x3002;&#x3002; <del> &#x4E0B;&#x4E00;&#x79D2;&#x5C31;&#x662F;&#x6211;&#x7684;&#x4E86; <del></del></del></p>
<p>&#x6211;&#x4EEC;&#x8BB0;&#x6240;&#x6709;&#x4F4D;&#x7F6E;&#x4E2D;&#x2018;D&#x2019;&#x7684;&#x4E2A;&#x6570;&#x4E3A;$num_1$&#x4E2A;&#xFF0C;&#x2019;U&#x2019;&#x7684;&#x4E2A;&#x6570;&#x4E3A;$num_2$&#x4E2A;($num_1+num_2=n$)&#xFF0C;&#x90A3;&#x4E48;&#xFF1A;</p>
<p><strong>&#x524D;$num_1$&#x4E2A;&#x4F4D;&#x7F6E;&#x4E0A;&#x7684;&#x5C0F;&#x4EBA;&#x4E00;&#x5B9A;&#x662F;&#x4ECE;&#x524D;&#x9762;&#x8D70;&#x51FA;&#x7684;&#xFF0C;&#x540E;$num_2$&#x4E2A;&#x5C0F;&#x4EBA;&#x4E00;&#x5B9A;&#x662F;&#x4ECE;&#x540E;&#x9762;&#x8D70;&#x51FA;&#x7684;</strong></p>
<p>&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x8BC1;&#x660E;&#x8FD9;&#x4E2A;&#x6709;&#x8DA3;&#x7684;&#x7ED3;&#x8BBA;&#x3002;<br>&#x5BF9;&#x4E8E;$i\leq num_1$&#x4F4D;&#x7F6E;&#xFF0C;&#x6211;&#x4EEC;&#x8BB0;$1\sim i - 1$&#x4F4D;&#x7F6E;&#x4E00;&#x5171;&#x6709;$x &lt; num_1$&#x4E2A;&#x2019;D&#x2019;&#xFF0C;&#x540E;&#x9762;$i\sim n$&#x5171;&#x6709;$suf=num_1-x$&#x4E2A;&#x2018;D&#x2019;&#xFF0C;&#x90A3;&#x4E48;&#x524D;&#x9762;&#x2019;U&#x2019;&#x7684;&#x4E2A;&#x6570;&#x4E3A;$pre=i-1-x$&#x4E2A;&#xFF0C;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x5C0F;&#x4EBA;&#x60F3;&#x8981;&#x4ECE;&#x524D;&#x9762;&#x8D70;&#x51FA;&#xFF0C;&#x90A3;&#x4E48;&#x4E00;&#x5B9A;&#x8981;&#x6EE1;&#x8DB3;&#xFF1A;<br>$$pre &lt; suf$$<br>&#x90A3;&#x4E48;&#x4E5F;&#x5C31;&#x662F;&#x8BC1;&#x660E;&#xFF1A;$i-1-x &lt; num_1 - x$&#x3002;&#x56E0;&#x4E3A;&#x6709;$i\leq num_1$&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x4E2A;&#x5F0F;&#x5B50;&#x662F;&#x80AF;&#x5B9A;&#x6EE1;&#x8DB3;&#x7684;&#xFF0C;&#x90A3;&#x4E48;&#x4E5F;&#x5C31;&#x8BC1;&#x660E;&#x4E86;&#x524D;$num_1$&#x4E2A;&#x5C0F;&#x4EBA;&#x4E00;&#x5B9A;&#x662F;&#x4ECE;&#x524D;&#x9762;&#x8D70;&#x51FA;&#x7684;&#x3002;</p>
<p>&#x540C;&#x6837;&#x7684;&#x9053;&#x7406;&#x4E5F;&#x80FD;&#x8BC1;&#x660E;&#x540E;$num_2$&#x4E2A;&#x5C0F;&#x4EBA;&#x4E00;&#x5B9A;&#x662F;&#x4ECE;&#x540E;&#x9762;&#x8D70;&#x51FA;&#x53BB;&#x7684;&#x3002;&#x901A;&#x8FC7;&#x4E0A;&#x9762;&#x7684;&#x5F0F;&#x5B50;&#x4E5F;&#x80FD;&#x53D1;&#x73B0;&#x5BF9;&#x4E8E;&#x7B2C;$i$&#x4E2A;&#x4F4D;&#x7F6E;&#x7684;&#x5C0F;&#x4EBA;&#x60F3;&#x8981;&#x4ECE;&#x524D;&#x9762;&#x8D70;&#x51FA;&#x53BB;&#xFF0C;&#x90A3;&#x4E48;&#x4E5F;&#x53EA;&#x548C;&#x524D;$i$&#x4E2A;&#x2019;D&#x2019;&#x7684;&#x4F4D;&#x7F6E;&#x6709;&#x5173;&#x3002;&#xFF08;&#x4EE4;$num_1=i$&#x662F;&#x7B26;&#x5408;&#x4E0D;&#x7B49;&#x5F0F;&#x7684;&#x8FB9;&#x754C;&#xFF09;&#x3002;</p>
<p>&#x597D;&#x4E86;&#xFF0C;&#x73B0;&#x5728;&#x6211;&#x4EEC;&#x6682;&#x4E14;&#x53EA;&#x8003;&#x8651;&#x4ECE;&#x524D;&#x9762;&#x8D70;&#x51FA;&#x53BB;&#x3002;&#x5BF9;&#x4E8E;&#x7B2C;$i$&#x4E2A;&#x4F4D;&#x7F6E;&#xFF0C;&#x5047;&#x8BBE;$1\sim i-1$&#x6709;$x$&#x4E2A;&#x2018;U&#x2019;&#xFF0C;&#x90A3;&#x4E48;&#x4E0A;&#x65B9;&#xFF08;&#x5305;&#x62EC;$i$&#x4F4D;&#x7F6E;&#xFF09;&#x5E94;&#x8BE5;&#x4E5F;&#x8981;&#x6709;$x$&#x4E2A;&#x2018;D&#x2019;&#xFF0C;&#x6211;&#x4EEC;&#x6765;&#x8BA1;&#x7B97;&#x9700;&#x8981;&#x8D70;&#x7684;&#x6B65;&#x6570;&#xFF0C;&#x7528;$pos[d_j]$&#x548C;$pos[u_j]$&#x8868;&#x793A;&#x2018;D&#x2019;&#x548C;&#x2019;U&#x2019;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x7528;$down[i]$&#x8868;&#x793A;&#x524D;$i$&#x4E2A;&#x2018;D&#x2019;&#x4F4D;&#x7F6E;&#x7684;&#x524D;&#x7F00;&#x548C;&#xFF1A;<br>$$<br>\begin{aligned}<br>step &amp;= \sum (pos[d_j]- i) + \sum (i-pos[u_k]) \\<br>&amp;=(\sum (pos[d_j])-i*x)+(i*x-\sum (pos[u_k])) \qquad (j \geq i, k &lt; i) \\<br>&amp;=down[i] - \sum(pos[d_k]) - \sum (pos[u_k]) (k \leq i) \\<br>&amp;= down[i] - \frac{i*(i+1)}{2}<br>\end{aligned}<br>$$<br>&#x5BF9;&#x4E8E;&#x4ECE;&#x540E;&#x9762;&#x51FA;&#x53BB;&#x7684;&#x540C;&#x6837;&#x8003;&#x8651;&#x5C31;&#x597D;&#x4E86;&#xFF01;</p>
<p>&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;$O(n)$<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, num1, num2;</span><br><span class="line"><span class="keyword">char</span> str[MAX_N];</span><br><span class="line">ll down[MAX_N], up[MAX_N], ans[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>{</span><br><span class="line">    num1 = num2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">        <span class="keyword">if</span> (str[i] == <span class="string">&apos;D&apos;</span>) {</span><br><span class="line">            down[num1 + <span class="number">1</span>] = down[num1] + i;</span><br><span class="line">            num1++;</span><br><span class="line">        } </span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">        <span class="keyword">if</span> (str[n - i + <span class="number">1</span>] == <span class="string">&apos;U&apos;</span>) {</span><br><span class="line">            up[num2 + <span class="number">1</span>] = up[num2] + i;</span><br><span class="line">            num2++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num1; ++i) {</span><br><span class="line">        ans[i] = down[i] - <span class="number">1l</span>l * i * (i + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        ans[i] = ans[i] * <span class="number">2</span> + i;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num2; ++i) {</span><br><span class="line">        ans[n - i + <span class="number">1</span>] = up[i] - <span class="number">1l</span>l * i * (i + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        ans[n - i + <span class="number">1</span>] = ans[n - i + <span class="number">1</span>] * <span class="number">2</span> + i;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, ans[i]);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&apos;\n&apos;</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n)) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str + <span class="number">1</span>);</span><br><span class="line">        solve();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有$n\leq 10^6$个位置，每个位置有指示牌：’U’表示向上走，‘D’表示向下走，并且每经过一个指示牌后指示牌会指向与原来相反的方向。给出每个指示牌的初始指向，求出每个位置走出这$n$个位置最少需要多少步。以每个位置为起点时，所有指示牌的指向就是给出的初始指向，如果无法走出输出-1.&lt;br&gt;
    
    </summary>
    
      <category term="思无涯" scheme="http://yoursite.com/categories/%E6%80%9D%E6%97%A0%E6%B6%AF/"/>
    
    
      <category term="Codeforces" scheme="http://yoursite.com/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 378F 可修改最小生成树</title>
    <link href="http://yoursite.com/2016/11/24/Codeforces-378F-%E5%8F%AF%E4%BF%AE%E6%94%B9%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    <id>http://yoursite.com/2016/11/24/Codeforces-378F-可修改最小生成树/</id>
    <published>2016-11-24T14:54:02.000Z</published>
    <updated>2016-11-24T14:59:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x7ED9;$n\leq 2*10^5$&#x4E2A;&#x70B9;&#x548C;$m\leq 2 * 10^5$&#x6761;&#x53CC;&#x5411;&#x8FB9;&#xFF0C;&#x6BCF;&#x6761;&#x8FB9;&#x7684;&#x6743;&#x503C;&#x4E3A;$w_i$&#x548C;&#x5355;&#x4F4D;&#x51CF;&#x5C11;&#x4EE3;&#x4EF7;&#x4E3A;$c_i$&#xFF0C;&#x8FB9;&#x6743;&#x53EF;&#x4EE5;&#x51CF;&#x5C11;&#x4E3A;&#x8D1F;&#xFF0C;&#x5728;&#x4E0D;&#x8D85;&#x8FC7;&#x4EE3;&#x4EF7;$S$&#x7684;&#x6761;&#x4EF6;&#x4E0B;&#x6C42;&#x51FA;&#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;&#x7684;&#x4EE3;&#x4EF7;&#x548C;&#xFF0C;&#x4EE5;&#x53CA;&#x9009;&#x62E9;&#x7684;&#x8FB9;&#x7684;&#x7F16;&#x53F7;&#x548C;&#x4FEE;&#x6539;&#x540E;&#x7684;&#x8FB9;&#x6743;&#x3002;<br><a id="more"></a><br>&#x9898;&#x76EE;&#x94FE;&#x63A5;&#xFF1A;<a href="http://codeforces.com/contest/733/problem/F" target="_blank" rel="noopener">Here</a></p>
<p>&#x5148;&#x628A;&#x8FB9;&#x6309;&#x7167;&#x8FB9;&#x6743;&#x6392;&#x5E8F;&#xFF0C;&#x6C42;&#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;&#x3002;&#x5F53;&#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;&#x7684;&#x6240;&#x6709;&#x8FB9;&#x786E;&#x5B9A;&#x4E86;&#x4EE5;&#x540E;&#xFF0C;&#x90A3;&#x4E48;&#x51CF;&#x5C11;&#x54EA;&#x4E00;&#x6761;&#x8FB9;&#x7684;&#x8FB9;&#x6743;&#x4E5F;&#x5C31;&#x786E;&#x5B9A;&#x4E86;&#xFF1A;&#x56E0;&#x4E3A;&#x8FB9;&#x6743;&#x53EF;&#x4EE5;&#x4E3A;&#x8D1F;&#xFF0C;&#x90A3;&#x4E48;&#x6700;&#x4F18;&#x4E00;&#x5B9A;&#x662F;&#x51CF;&#x5C11;$c$&#x6700;&#x5C0F;&#x7684;&#x8FB9;&#x3002;</p>
<p>&#x7136;&#x540E;&#x679A;&#x4E3E;&#x4E0D;&#x5728;&#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;&#x4E2D;&#x7684;&#x8FB9;&#xFF0C;&#x5BF9;&#x4E8E;&#x4E00;&#x5F00;&#x59CB;&#x6C42;&#x597D;&#x7684;&#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;&#xFF0C;&#x6700;&#x591A;&#x53EA;&#x4F1A;&#x6539;&#x53D8;&#x4E00;&#x6761;&#x8FB9;&#x3002;&#x5BF9;&#x4E8E;&#x8FB9;$i$&#x5982;&#x679C;&#x8981;&#x628A;&#x5B83;&#x4F5C;&#x4E3A;&#x6700;&#x7EC8;&#x7684;&#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;&#x4E2D;&#x7684;&#x8FB9;&#xFF0C;&#x90A3;&#x4E48;&#x628A;&#x8FD9;&#x6761;&#x8FB9;&#x6DFB;&#x52A0;&#x8FDB;&#x6C42;&#x597D;&#x7684;&#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;&#x4F1A;&#x5F62;&#x6210;&#x4E00;&#x4E2A;&#x73AF;&#xFF0C;&#x5B83;&#x8981;&#x66FF;&#x6362;&#x7684;&#x4E00;&#x5B9A;&#x662F;&#x73AF;&#x4E0A;&#x8FB9;&#x6743;&#x6700;&#x5927;&#x7684;&#x8FB9;&#xFF0C;&#x90A3;&#x4E48;&#x95EE;&#x9898;&#x5C31;&#x53D8;&#x6210;&#x4E86;&#xFF1A;&#x6C42;&#x6811;&#x4E0A;&#x4E24;&#x70B9;&#x8DEF;&#x5F84;&#x4E0A;&#x6700;&#x5927;&#x8FB9;&#x6743;&#x3002;&#x5229;&#x7528;LCA&#x548C;&#x500D;&#x589E;&#x89E3;&#x51B3;&#x3002;</p>
<p>&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;$O(m\log m + m\log n + n\log n)$<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">200010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_M = <span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, S, MinC, MinId;</span><br><span class="line"><span class="keyword">int</span> fa[MAX_N], vis[MAX_M], depth[MAX_N], anc[MAX_N][<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> {</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w, c, id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Edge&amp; rhs) <span class="keyword">const</span> {</span><br><span class="line">        <span class="keyword">return</span> w &lt; rhs.w;</span><br><span class="line">    }</span><br><span class="line">} ;</span><br><span class="line"></span><br><span class="line">Edge edge[MAX_M], dp[MAX_N][<span class="number">20</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; g[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp_id</span><span class="params">(Edge a, Edge b)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> a.id &lt; b.id;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> fa[x] == x ? x : fa[x] = find(fa[x]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Kruskal</span><span class="params">()</span> </span>{</span><br><span class="line">    MinC = (<span class="keyword">int</span>)(<span class="number">1e9</span>) + <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> (vis));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) fa[i] = i, g[i].clear();</span><br><span class="line"></span><br><span class="line">    sort(edge + <span class="number">1</span>, edge + m + <span class="number">1</span>);</span><br><span class="line">    ll ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) {</span><br><span class="line">        <span class="keyword">int</span> u = edge[i].u, v = edge[i].v;</span><br><span class="line">        <span class="keyword">int</span> fu = find(u), fv = find(v);</span><br><span class="line">        <span class="keyword">if</span> (fu != fv) {</span><br><span class="line">            fa[fu] = fv;</span><br><span class="line">            ret += edge[i].w;</span><br><span class="line">            <span class="keyword">if</span> (MinC &gt; edge[i].c) {</span><br><span class="line">                MinC = edge[i].c;</span><br><span class="line">                MinId = edge[i].id; </span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            vis[edge[i].id] = <span class="number">1</span>;</span><br><span class="line">            Edge tmp = edge[i];</span><br><span class="line">            g[u].push_back(tmp);</span><br><span class="line">            swap(tmp.u, tmp.v);</span><br><span class="line">            g[v].push_back(tmp);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p, <span class="keyword">int</span> d)</span> </span>{</span><br><span class="line">    depth[u] = d;</span><br><span class="line">    <span class="keyword">if</span> (u != <span class="number">1</span>) dp[u][<span class="number">0</span>] = edge[p];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">20</span>; ++i) {</span><br><span class="line">        anc[u][i] = anc[anc[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">        dp[u][i] = max(dp[u][i - <span class="number">1</span>], dp[anc[u][i - <span class="number">1</span>]][i - <span class="number">1</span>]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g[u].size(); ++i) {</span><br><span class="line">        <span class="keyword">if</span> (g[u][i].id == p) <span class="keyword">continue</span>;</span><br><span class="line">        anc[g[u][i].v][<span class="number">0</span>] = u;</span><br><span class="line">        dfs(g[u][i].v, g[u][i].id, d + <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">Edge <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (depth[u] &gt; depth[v]) swap(u, v);</span><br><span class="line">    Edge ret;</span><br><span class="line">    ret.w = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; ++i) {</span><br><span class="line">        <span class="keyword">if</span> (((depth[v] - depth[u]) &gt;&gt; i) &amp; <span class="number">1</span>) {</span><br><span class="line">            ret = max(ret, dp[v][i]);</span><br><span class="line">            v = anc[v][i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (u == v) <span class="keyword">return</span> ret;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; --i) {</span><br><span class="line">        <span class="keyword">if</span> (anc[u][i] != anc[v][i]) {</span><br><span class="line">            ret = max(ret, dp[u][i]);</span><br><span class="line">            ret = max(ret, dp[v][i]);</span><br><span class="line">            u = anc[u][i], v = anc[v][i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    ret = max(ret, dp[u][<span class="number">0</span>]);</span><br><span class="line">    ret = max(ret, dp[v][<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>{</span><br><span class="line">    ll sum = Kruskal();</span><br><span class="line">    ll ans = sum - S / MinC;</span><br><span class="line">    sort(edge + <span class="number">1</span>, edge + m + <span class="number">1</span>, cmp_id);</span><br><span class="line">    anc[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">-1</span>, b = MinId;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) {</span><br><span class="line">        <span class="keyword">if</span> (vis[edge[i].id]) <span class="keyword">continue</span>;</span><br><span class="line">        Edge ee = LCA(edge[i].u, edge[i].v);</span><br><span class="line">        ll tmp = sum - ee.w + (edge[i].w - S / edge[i].c);</span><br><span class="line">        <span class="keyword">if</span> (tmp &lt; ans) {</span><br><span class="line">            ans = tmp;</span><br><span class="line">            a = ee.id, b = i;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) {</span><br><span class="line">        <span class="keyword">if</span> (!vis[i] || i == a || i == b) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, i, edge[i].w);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, b, edge[b].w - S / edge[b].c);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;edge[i].w);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;edge[i].c);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;edge[i].u, &amp;edge[i].v);</span><br><span class="line">        edge[i].id = i;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;S);</span><br><span class="line">    solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给$n\leq 2*10^5$个点和$m\leq 2 * 10^5$条双向边，每条边的权值为$w_i$和单位减少代价为$c_i$，边权可以减少为负，在不超过代价$S$的条件下求出最小生成树的代价和，以及选择的边的编号和修改后的边权。&lt;br&gt;
    
    </summary>
    
      <category term="思无涯" scheme="http://yoursite.com/categories/%E6%80%9D%E6%97%A0%E6%B6%AF/"/>
    
    
      <category term="Codeforces" scheme="http://yoursite.com/tags/Codeforces/"/>
    
      <category term="最小生成树" scheme="http://yoursite.com/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
      <category term="LCA" scheme="http://yoursite.com/tags/LCA/"/>
    
  </entry>
  
  <entry>
    <title>UVA 12012 Detection of Extraterrestrial</title>
    <link href="http://yoursite.com/2016/11/20/UVA-12012-Detection-of-Extraterrestrial/"/>
    <id>http://yoursite.com/2016/11/20/UVA-12012-Detection-of-Extraterrestrial/</id>
    <published>2016-11-20T05:45:57.000Z</published>
    <updated>2016-11-20T05:51:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x7ED9;&#x4E00;&#x4E2A;&#x957F;&#x5EA6;&#x4E3A;$n\leq 1000$&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x5BF9;&#x4E8E;&#x4E00;&#x4E2A;$x$&#x8981;&#x627E;&#x5230;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x6240;&#x6709;&#x5B50;&#x4E32;&#x4E2D;&#x7531;$x$&#x4E2A;&#x5B8C;&#x5168;&#x76F8;&#x540C;&#x7684;&#x4E32;&#x8FDE;&#x63A5;&#x6210;&#x7684;&#x6700;&#x5927;&#x5B50;&#x4E32;&#x957F;&#x5EA6;&#xFF0C;&#x5BF9;&#x6240;&#x6709;&#x7684;$x\in [1,n]$&#x8F93;&#x51FA;&#x7B54;&#x6848;&#x3002;<br><a id="more"></a><br>&#x9898;&#x76EE;&#x94FE;&#x63A5;&#xFF1A;<a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=3163" target="_blank" rel="noopener">Here</a></p>
<p>&#x4F8B;&#x5982;&#x5BF9;&#x4E8E;&#x5B57;&#x7B26;&#x4E32;&#xFF1A;</p>
<blockquote>
<p>noonnoonnoon</p>
</blockquote>
<p>&#x5F53;$x=2$&#x65F6;&#xFF0C;&#x7B54;&#x6848;&#x662F;8&#xFF0C;&#x4E0B;&#x9762;&#x7684;&#x4E09;&#x4E2A;&#x5B50;&#x4E32;&#x90FD;&#x662F;&#x7B26;&#x5408;&#x7684;&#xFF1A;</p>
<blockquote>
<p>noonnoon<br>oonnoonn<br>onnoonno</p>
</blockquote>
<p>&#x542C;&#x8BF4;&#x53EF;&#x4EE5;KMP&#x505A;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x6B21;&#x778E;&#x641E;&#x5C31;&#x8FC7;&#x4E86;&#x3002;(&#x5B9E;&#x9645;&#x4E0A;&#x662F;&#x4E0D;&#x4F1A;&#x554A;+_+)</p>
<p>&#x4E00;&#x5F00;&#x59CB;&#x9898;&#x610F;&#x786E;&#x5B9E;&#x8BFB;&#x5BF9;&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x505A;&#x7684;&#x65F6;&#x5019;&#x5374;&#x662F;&#x7406;&#x89E3;&#x9519;&#x4E86;&#xFF1A;</p>
<blockquote>
<p>&#x6C42;&#x6700;&#x957F;&#x7684;&#x5B50;&#x4E32;&#x957F;&#x5EA6;&#xFF0C;&#x6EE1;&#x8DB3;&#x662F;&#x7531;&#x82E5;&#x5E72;&#x4E2A;&#x957F;&#x5EA6;&#x662F;$x$&#x7684;&#x5C0F;&#x5B50;&#x4E32;&#x62FC;&#x6210;&#x3002;</p>
</blockquote>
<p>&#x4F46;&#x662F;&#x540E;&#x6765;&#x53D1;&#x73B0;&#x76F4;&#x63A5;&#x8FD9;&#x6837;&#x505A;&#xFF0C;fix&#x4E00;&#x4E0B;&#x5C31;&#x884C;&#x4E86;&#x3002;&#x3002;&#x3002;&#x3002;&#x3002;</p>
<p>&#x4E0A;&#x9762;&#x7684;&#x95EE;&#x9898;&#x53EF;&#x4EE5;&#x8FD9;&#x6837;&#x505A;&#x3002;&#x6211;&#x4EEC;&#x679A;&#x4E3E;&#x6BCF;&#x4E2A;&#x57FA;&#x672C;&#x5C0F;&#x4E32;&#x7684;&#x957F;&#x5EA6;$x:2\sim n$&#xFF0C;&#x7136;&#x540E;&#x5224;&#x65AD;&#x6700;&#x957F;&#x7684;&#x5B50;&#x4E32;&#x957F;&#x5EA6;&#xFF0C;&#x4F7F;&#x5F97;&#x8FD9;&#x4E2A;&#x5B50;&#x4E32;&#x662F;&#x7531;&#x957F;&#x5EA6;&#x662F;$x$&#x7684;&#x5C0F;&#x5B50;&#x4E32;&#x62FC;&#x6210;&#x7684;&#x3002;&#x5BF9;&#x6BCF;&#x4E2A;&#x4F4D;&#x7F6E;&#x8BB0;&#x4E2A;$flag[]$&#xFF0C;&#x5F53;$s[i]=s[i-x]$&#x65F6;&#xFF0C;$flag[i]=1$&#xFF0C;&#x5426;&#x5219;$flag[i]=0$&#x3002;&#x4EE4;$flag[]$&#x6570;&#x7EC4;&#x4E2D;&#x6700;&#x957F;&#x8FDE;&#x7EED;1&#x7684;&#x957F;&#x5EA6;&#x4E3A;$len$&#xFF0C;&#x957F;&#x5EA6;&#x4E3A;$x$&#x7684;&#x5B50;&#x4E32;&#x6700;&#x591A;&#x4F1A;&#x6709;&#x591A;&#x5C11;&#x4E2A;&#x8FDE;&#x7EED;&#x76F8;&#x540C;&#x7684;&#x5462;&#xFF1A;<br>$$<br>Max=\left\{<br>\begin{aligned}<br>0\quad len &lt; x \\<br>(\frac{len}{x}+1)*x\quad len \geq x<br>\end{aligned}&#x2019;<br>\right.<br>$$<br>&#x4F60;&#x770B;&#x770B;&#x8FD9;&#x4E0D;&#x5C31;&#x51FA;&#x6765;&#x4E2A;&#x6570;&#x4E86;&#x561B;&#x3002;&#x3002;&#x3002;&#x3002;&#x6211;&#x4EEC;&#x5728;&#x5BF9;&#x6BCF;&#x4E2A;&#x4E2A;&#x6570;&#x66F4;&#x65B0;&#x4E00;&#x4E0B;&#x7B54;&#x6848;&#xFF1A;<br>$$<br>ans[i]=\max (ans[i],  x * i) \quad (i\in [2,Max])<br>$$</p>
<p>&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;$O(n^2)$<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, cases = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ans[MAX_N], flag[MAX_N];</span><br><span class="line"><span class="keyword">char</span> s[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="keyword">sizeof</span> (ans));</span><br><span class="line">    n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    ans[<span class="number">1</span>] = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n / <span class="number">2</span>; ++x) {</span><br><span class="line">        <span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span> (flag));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) {</span><br><span class="line">            <span class="keyword">if</span> (i &lt; x) flag[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == s[i - x]) flag[i] = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> Max = <span class="number">0</span>, tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) {</span><br><span class="line">            <span class="keyword">if</span> (flag[i] == <span class="number">0</span>) {</span><br><span class="line">                Max = max(Max, tmp);</span><br><span class="line">                tmp = <span class="number">0</span>;</span><br><span class="line">            } <span class="keyword">else</span> tmp++;</span><br><span class="line">        }</span><br><span class="line">        Max = max(Max, tmp);</span><br><span class="line">        <span class="keyword">if</span> (Max &lt; x) <span class="keyword">continue</span>;</span><br><span class="line">        Max = Max / x + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= Max; ++j) {</span><br><span class="line">            ans[j] = max(ans[j], x * j);</span><br><span class="line">        }</span><br><span class="line">    }   </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Case #%d:&quot;</span>, ++cases);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, ans[i + <span class="number">1</span>]);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">        solve();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给一个长度为$n\leq 1000$的字符串，对于一个$x$要找到字符串的所有子串中由$x$个完全相同的串连接成的最大子串长度，对所有的$x\in [1,n]$输出答案。&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="UVA" scheme="http://yoursite.com/tags/UVA/"/>
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>UVA 12018 切水果 dp</title>
    <link href="http://yoursite.com/2016/11/20/UVA-12018-dp/"/>
    <id>http://yoursite.com/2016/11/20/UVA-12018-dp/</id>
    <published>2016-11-20T05:44:34.000Z</published>
    <updated>2016-11-20T05:45:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x7ED9;$n \leq 1000$&#x4E2A;&#x6C34;&#x679C;&#x51FA;&#x73B0;&#x5728;&#x5C4F;&#x5E55;&#x4E0A;&#x7684;&#x5F00;&#x59CB;&#x65F6;&#x95F4;&#x548C;&#x6D88;&#x5931;&#x65F6;&#x95F4;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x4EFB;&#x610F;&#x65F6;&#x523B;&#x201C;&#x5207;&#x4E00;&#x5200;&#x201D;&#x628A;&#x51FA;&#x73B0;&#x5728;&#x5C4F;&#x5E55;&#x4E0A;&#x7684;&#x6C34;&#x679C;&#x5207;&#x6389;&#xFF0C;&#x53EA;&#x6709;&#x5F53;&#x5207;&#x6389;&#x7684;&#x6C34;&#x679C;&#x4E2A;&#x6570;&#x5927;&#x4E8E;2&#xFF0C;&#x624D;&#x4F1A;&#x8BA1;&#x5206;&#xFF0C;&#x8BA1;&#x5206;&#x6570;&#x5C31;&#x662F;&#x5207;&#x6389;&#x7684;&#x6C34;&#x679C;&#x4E2A;&#x6570;&#x3002;&#x5E76;&#x4E14;&#x6BCF;&#x5207;&#x5B8C;&#x4E00;&#x5200;&#xFF0C;&#x5C4F;&#x5E55;&#x4E0A;&#x7684;&#x6C34;&#x679C;&#x90FD;&#x4F1A;&#x6D88;&#x5931;&#x3002;&#x6BCF;&#x4E2A;&#x6C34;&#x679C;&#x53EF;&#x4EE5;&#x5207;&#x7684;&#x65F6;&#x95F4;&#x662F;&#x51FA;&#x73B0;&#x548C;&#x7ED3;&#x675F;&#x65F6;&#x95F4;&#x7684;&#x95ED;&#x533A;&#x95F4;&#xFF0C;&#x6C42;&#x6700;&#x591A;&#x53EF;&#x4EE5;&#x5F97;&#x591A;&#x5C11;&#x5206;&#xFF1F;<br><a id="more"></a><br>&#x9898;&#x76EE;&#x94FE;&#x63A5;&#xFF1A;<a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=3169" target="_blank" rel="noopener">Here</a></p>
<p>&#x8D2A;&#x5FC3;&#x4E0D;&#x884C;&#x5C31;dp&#x3002;</p>
<p>&#x5148;&#x628A;&#x6240;&#x6709;&#x65F6;&#x95F4;&#x79BB;&#x6563;&#x5316;&#x3002;&#x7136;&#x540E;&#x628A;&#x65F6;&#x95F4;&#x533A;&#x95F4;&#x6309;&#x7167;&#x5DE6;&#x7AEF;&#x70B9;&#x7B2C;&#x4E00;&#x4F18;&#x5148;&#x7EA7;&#xFF0C;&#x53F3;&#x7AEF;&#x70B9;&#x7B2C;&#x4E8C;&#x4F18;&#x5148;&#x7EA7;&#x6392;&#x5E8F;&#x3002;</p>
<p>&#x6211;&#x89C9;&#x5F97;&#x5207;&#x6C34;&#x679C;&#x7684;&#x65F6;&#x95F4;&#x90FD;&#x662F;&#x5728;&#x4E00;&#x4E9B;&#x6C34;&#x679C;&#x7684;&#x51FA;&#x73B0;&#x65F6;&#x95F4;&#x6216;&#x8005;&#x7ED3;&#x675F;&#x65F6;&#x95F4;&#x4E0D;&#x4F1A;&#x4F7F;&#x7ED3;&#x679C;&#x66F4;&#x5DEE;&#x3002;&#xFF08;&#x627E;&#x4E0D;&#x5230;&#x53CD;&#x4F8B;&#x554A;&#x3002;&#x3002;&#x3002;&#x3002;&#xFF09;</p>
<p>&#x7136;&#x540E;&#x4E00;&#x5F00;&#x59CB;&#x662F;&#x60F3;&#x679A;&#x4E3E;&#x5207;&#x6700;&#x540E;&#x4E00;&#x5200;&#x7684;&#x6C34;&#x679C;&#x662F;&#x7B2C;&#x51E0;&#x4E2A;$i$&#xFF0C;&#x518D;&#x679A;&#x4E3E;&#x5207;&#x5012;&#x6570;&#x7B2C;&#x4E8C;&#x5200;&#x7684;&#x6C34;&#x679C;&#x662F;&#x7B2C;&#x51E0;&#x4E2A;$j$&#xFF0C;&#x518D;&#x679A;&#x4E3E;&#x5207;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x8FD9;&#x6837;&#x5B50;&#x662F;$O(n^3)$&#x7684;&#xFF0C;&#x5F53;&#x7136;&#x5B9E;&#x9645;&#x4E0A;&#x53EF;&#x80FD;&#x8FDC;&#x5C0F;&#x4E8E;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x6837;&#x5B50;&#x6211;&#x6CA1;&#x6709;&#x8003;&#x8651;&#x5230;&#x7684;&#x95EE;&#x9898;&#x662F;&#xFF1A;&#x6BCF;&#x5207;&#x5B8C;&#x4E00;&#x5200;&#xFF0C;&#x6240;&#x6709;&#x5C4F;&#x5E55;&#x4E0A;&#x51FA;&#x73B0;&#x7684;&#x6C34;&#x679C;&#x90FD;&#x4F1A;&#x6D88;&#x5931;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x5207;&#x5012;&#x6570;&#x7B2C;&#x4E8C;&#x5200;&#x65F6;&#xFF0C;&#x6709;&#x53EF;&#x80FD;$[j+1,i]$&#x4E4B;&#x95F4;&#x7684;&#x6C34;&#x679C;&#x4E5F;&#x88AB;&#x5207;&#x6389;&#x4E86;&#xFF0C;GG&#x3002;</p>
<p>&#x5176;&#x5B9E;&#x5B8C;&#x5168;&#x4E0D;&#x7528;&#x8FD9;&#x4E48;&#x9EBB;&#x70E6;&#xFF0C;&#x76F4;&#x63A5;&#x679A;&#x4E3E;&#x5207;&#x6700;&#x540E;&#x4E00;&#x5200;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x548C;&#x5207;&#x5012;&#x6570;&#x7B2C;&#x4E8C;&#x5200;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x90A3;&#x4E48;&#x8FD9;&#x4E24;&#x4E2A;&#x4F4D;&#x7F6E;&#x4E4B;&#x95F4;&#x7684;&#x6C34;&#x679C;&#x53EF;&#x4EE5;&#x88AB;&#x6700;&#x540E;&#x4E00;&#x5200;&#x5207;&#x4E2D;&#x7684;&#x4E2A;&#x6570;&#x600E;&#x4E48;&#x7B97;&#x5462;&#xFF1F;&#x628A;&#x6240;&#x6709;&#x6C34;&#x679C;&#x4ECE;&#x540E;&#x5F80;&#x524D;&#x68C0;&#x67E5;&#xFF0C;&#x5C31;&#x884C;&#x4E86;&#x3002;&#x3002;&#x3002;&#x3002;</p>
<p>&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;$O(n^2)$<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, cases = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> store[MAX_N * <span class="number">5</span>], pos[MAX_N * <span class="number">5</span>], Max[MAX_N * <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Interval</span> {</span></span><br><span class="line">    <span class="keyword">int</span> L, R;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Interval&amp; rhs) <span class="keyword">const</span> {</span><br><span class="line">        <span class="keyword">return</span> L == rhs.L ? R &lt; rhs.R : L &lt; rhs.L;</span><br><span class="line">    }</span><br><span class="line">} inter[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>{</span><br><span class="line">    sort(store, store + <span class="number">2</span> * n);</span><br><span class="line">    <span class="keyword">int</span> m = unique(store, store + <span class="number">2</span> * n) - store;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">        inter[i].L = lower_bound(store, store + m, inter[i].L) - store + <span class="number">1</span>;</span><br><span class="line">        inter[i].R = lower_bound(store, store + m, inter[i].R) - store + <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    sort(inter + <span class="number">1</span>, inter + n + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memset</span>(pos, <span class="number">0</span>, <span class="keyword">sizeof</span> (pos));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; ++k) {</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>, ed = n;</span><br><span class="line">        pos[k] = pos[k - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) {</span><br><span class="line">            <span class="keyword">while</span> (ed &gt;= <span class="number">1</span> &amp;&amp; inter[ed].L &gt; i) {</span><br><span class="line">                <span class="keyword">if</span> (inter[ed].L &lt;= k &amp;&amp; inter[ed].R &gt;= k) cnt++;</span><br><span class="line">                ed--;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (cnt &lt;= <span class="number">2</span>) pos[k] = max(pos[k], pos[i]);</span><br><span class="line">            <span class="keyword">else</span> pos[k] = max(pos[k], pos[i] + cnt);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Case #%d: %d\n&quot;</span>, ++cases, pos[m]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;inter[i].L, &amp;inter[i].R);</span><br><span class="line">            store[i - <span class="number">1</span>] = inter[i].L;</span><br><span class="line">            store[i + n - <span class="number">1</span>] = inter[i].R;</span><br><span class="line">        }</span><br><span class="line">        solve();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给$n \leq 1000$个水果出现在屏幕上的开始时间和消失时间，可以在任意时刻“切一刀”把出现在屏幕上的水果切掉，只有当切掉的水果个数大于2，才会计分，计分数就是切掉的水果个数。并且每切完一刀，屏幕上的水果都会消失。每个水果可以切的时间是出现和结束时间的闭区间，求最多可以得多少分？&lt;br&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
      <category term="UVA" scheme="http://yoursite.com/tags/UVA/"/>
    
  </entry>
  
  <entry>
    <title>字典树</title>
    <link href="http://yoursite.com/2016/11/18/%E5%AD%97%E5%85%B8%E6%A0%91/"/>
    <id>http://yoursite.com/2016/11/18/字典树/</id>
    <published>2016-11-18T04:53:28.000Z</published>
    <updated>2016-11-18T04:54:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x5B57;&#x5178;&#x6811;(Trie)&#x7528;&#x6765;&#x89E3;&#x51B3;&#x5B57;&#x7B26;&#x4E32;&#x524D;&#x7F00;&#xFF0C;&#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x5426;&#x51FA;&#x73B0;&#xFF0C;&#x5F02;&#x6216;&#x7B49;&#x76F8;&#x5173;&#x95EE;&#x9898;&#x3002;&#x7528;&#x7A7A;&#x95F4;&#x6362;&#x53D6;&#x65F6;&#x95F4;&#x3002;</p>
<a id="more"></a>
<p>&#x5728;VJ&#x4E0A;&#x62C9;&#x4E86;&#x4E00;&#x4E2A;&#x4E13;&#x9898;&#xFF1A;<a href="http://bak2.vjudge.net/contest/141731#overview" target="_blank" rel="noopener">Here</a>&#x3002;</p>
<h4 id="a"><a href="#A" class="headerlink" title="A"></a>A</h4><p>&#x8F93;&#x51FA;&#x6240;&#x6709;&#x7531;&#x5176;&#x4ED6;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x62FC;&#x63A5;&#x5F62;&#x6210;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x3002;</p>
<p>&#x5148;&#x628A;&#x6240;&#x6709;&#x5B57;&#x7B26;&#x4E32;&#x63D2;&#x8FDB;&#x5B57;&#x5178;&#x6811;&#xFF0C;&#x7136;&#x540E;&#x679A;&#x4E3E;&#x6BCF;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x65AD;&#x5F00;&#x4F4D;&#x7F6E;&#xFF0C;&#x5224;&#x65AD;&#x4E24;&#x90E8;&#x5206;&#x5B50;&#x4E32;&#x662F;&#x5426;&#x90FD;&#x5728;&#x5B57;&#x5178;&#x6811;&#x91CC;&#x3002;<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">50010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NUM = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span> {</span></span><br><span class="line">    <span class="keyword">int</span> tot, root;</span><br><span class="line">    <span class="keyword">int</span> child[MAX][NUM];</span><br><span class="line">    <span class="keyword">bool</span> flag[MAX];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="built_in">memset</span>(child[<span class="number">1</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> (child[<span class="number">1</span>]));</span><br><span class="line">        tot = root = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> *cur = &amp;root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">char</span> *p = str; *p; ++p) {</span><br><span class="line">            cur = &amp;child[*cur][*p - <span class="string">&apos;a&apos;</span>];</span><br><span class="line">            <span class="keyword">if</span> (*cur == <span class="number">0</span>) {</span><br><span class="line">                *cur = ++tot;</span><br><span class="line">                <span class="built_in">memset</span>(child[tot], <span class="number">0</span>, <span class="keyword">sizeof</span> (child[tot]));</span><br><span class="line">                flag[*cur] = <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        flag[*cur] = <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">query</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> *cur = &amp;root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">char</span>* p = str; *p &amp;&amp; *cur; ++p) {</span><br><span class="line">            cur = &amp;child[*cur][*p - <span class="string">&apos;a&apos;</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> *cur &amp;&amp; flag[*cur];</span><br><span class="line">    }</span><br><span class="line">} dic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[MAX_N][<span class="number">25</span>];</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    dic.init();</span><br><span class="line">    <span class="keyword">while</span> (gets(s[++n])) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(s[n], <span class="string">&quot;&quot;</span>) == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        dic.insert(s[n]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) {</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s[i]);</span><br><span class="line">        <span class="keyword">char</span> tmp1[<span class="number">20</span>], tmp2[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span>; ++j) {</span><br><span class="line">            tmp1[j] = s[i][j], tmp1[j + <span class="number">1</span>] = <span class="string">&apos;\0&apos;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt;= len; ++k) tmp2[k - j - <span class="number">1</span>] = s[i][k];</span><br><span class="line">            <span class="keyword">if</span> (dic.query(tmp1) &amp;&amp; dic.query(tmp2)) {</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, s[i]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    } </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
<h4 id="b"><a href="#B" class="headerlink" title="B"></a>B</h4><p>&#x5927;&#x6570;&#xFF0C;&#x7565;&#x3002;</p>
<h4 id="c"><a href="#C" class="headerlink" title="C"></a>C</h4><p>&#x5148;&#x7ED9;$P\leq 10000$&#x4E2A;&#x957F;&#x5EA6;&#x4E0D;&#x8D85;&#x8FC7;$20$&#x7684;&#x53EA;&#x542B;&#x5C0F;&#x5199;&#x5B57;&#x6BCD;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x518D;&#x6709;$Q\leq 100000$&#x4E2A;&#x8BE2;&#x95EE;&#xFF0C;&#x8F93;&#x51FA;$P$&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x5B50;&#x4E32;&#x4E2D;&#x5B58;&#x5728;&#x8BE2;&#x95EE;&#x4E32;&#x7684;&#x4E2A;&#x6570;&#x3002;</p>
<p>&#x4E3B;&#x8981;&#x8003;&#x8651;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x6240;&#x6709;&#x5B50;&#x4E32;&#x7684;&#x7EDF;&#x8BA1;&#x53BB;&#x91CD;&#xFF1A;&#x5148;&#x628A;&#x6240;&#x6709;&#x5B50;&#x4E32;&#x5728;&#x5B57;&#x5178;&#x6811;&#x4E2D;&#x7684;&#x4F4D;&#x7F6E;&#xFF08;&#x8DEF;&#x5F84;&#x4E0A;&#x7684;&#x70B9;&#xFF09;&#x5B58;&#x5728;<code>vector</code>&#x4E2D;&#xFF0C;&#x53BB;&#x91CD;&#x540E;&#x7EDF;&#x4E00;&#x52A0;1&#x3002;<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NUM = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;:: iterator it;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span> {</span></span><br><span class="line">    <span class="keyword">int</span> tot, root;</span><br><span class="line">    <span class="keyword">int</span> child[MAX][NUM], cnt[MAX];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="built_in">memset</span>(child[<span class="number">1</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> (child[<span class="number">1</span>]));</span><br><span class="line">        tot = root = <span class="number">1</span>, cnt[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> *cur = &amp;root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">char</span>* p = str; *p; ++p) {</span><br><span class="line">            cur = &amp;child[*cur][*p - <span class="string">&apos;a&apos;</span>];</span><br><span class="line">            <span class="keyword">if</span> (*cur == <span class="number">0</span>) {</span><br><span class="line">                *cur = ++tot;</span><br><span class="line">                <span class="built_in">memset</span>(child[tot], <span class="number">0</span>, <span class="keyword">sizeof</span> (child[tot]));</span><br><span class="line">                cnt[tot] = <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">            vec.push_back(*cur);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> *cur = &amp;root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">char</span>* p = str; *p; ++p) {</span><br><span class="line">            cur = &amp;child[*cur][*p - <span class="string">&apos;a&apos;</span>];</span><br><span class="line">            <span class="keyword">if</span> (*cur == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> cnt[*cur];</span><br><span class="line">    }</span><br><span class="line">} dic;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    dic.init();</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        vec.clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; ++j) dic.insert(s + j);</span><br><span class="line">        sort(vec.begin(), vec.end());</span><br><span class="line">        it = unique(vec.begin(), vec.end());</span><br><span class="line">        vec.erase(it, vec.end());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vec.size(); ++j) {</span><br><span class="line">            dic.cnt[vec[j]]++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dic.query(s));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
<h4 id="d"><a href="#D" class="headerlink" title="D"></a>D</h4><p>&#x6839;&#x636E;&#x624B;&#x673A;&#x952E;&#x76D8;&#x4E0A;&#x7684;&#x6570;&#x5B57;&#x548C;&#x5B57;&#x6BCD;&#x7684;&#x5BF9;&#x5E94;&#x5173;&#x7CFB;&#xFF0C;&#x8F93;&#x51FA;&#x6570;&#x5B57;&#x4E32;&#x53EF;&#x80FD;&#x5BF9;&#x5E94;&#x7684;&#x5B57;&#x6BCD;&#x4E32;&#x7684;&#x4E2A;&#x6570;&#x3002;</p>
<p>&#x641E;&#x6E05;&#x695A;&#x5BF9;&#x5E94;&#x5173;&#x7CFB;&#xFF0C;&#x5C31;&#x662F;&#x7EDF;&#x8BA1;&#x524D;&#x7F00;&#x4E32;&#x7684;&#x4E2A;&#x6570;&#x3002;<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NUM = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, m;</span><br><span class="line"><span class="keyword">int</span> match[MAX];</span><br><span class="line"><span class="keyword">char</span> id[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span> {</span></span><br><span class="line">    <span class="keyword">int</span> tot, root;</span><br><span class="line">    <span class="keyword">int</span> child[MAX][NUM], cnt[MAX];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="built_in">memset</span>(child[<span class="number">1</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> (child[<span class="number">1</span>]));</span><br><span class="line">        tot = root = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span>* cur = &amp;root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">char</span>* p = str; *p; ++p) {</span><br><span class="line">            cur = &amp;child[*cur][*p - <span class="string">&apos;2&apos;</span>];</span><br><span class="line">            <span class="keyword">if</span> (*cur == <span class="number">0</span>) {</span><br><span class="line">                *cur = ++tot;</span><br><span class="line">                <span class="built_in">memset</span>(child[tot], <span class="number">0</span>, <span class="keyword">sizeof</span> (child[tot]));</span><br><span class="line">                cnt[tot] = <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> *cur;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> *cur = &amp;root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">char</span>* p = str; *p; ++p) {</span><br><span class="line">            cur = &amp;child[*cur][*p - <span class="string">&apos;2&apos;</span>];</span><br><span class="line">            <span class="keyword">if</span> (*cur == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        cnt[*cur]++;</span><br><span class="line">    }</span><br><span class="line">} dic;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    id[<span class="number">0</span>] = id[<span class="number">1</span>] = id[<span class="number">2</span>] = <span class="string">&apos;2&apos;</span>, id[<span class="number">3</span>] = id[<span class="number">4</span>] = id[<span class="number">5</span>] = <span class="string">&apos;3&apos;</span>;</span><br><span class="line">    id[<span class="number">6</span>] = id[<span class="number">7</span>] = id[<span class="number">8</span>] = <span class="string">&apos;4&apos;</span>, id[<span class="number">9</span>] = id[<span class="number">10</span>] = id[<span class="number">11</span>] = <span class="string">&apos;5&apos;</span>;</span><br><span class="line">    id[<span class="number">12</span>] = id[<span class="number">13</span>] = id[<span class="number">14</span>] = <span class="string">&apos;6&apos;</span>;</span><br><span class="line">    id[<span class="number">15</span>] = id[<span class="number">16</span>] = id[<span class="number">17</span>] = id[<span class="number">18</span>] = <span class="string">&apos;7&apos;</span>;</span><br><span class="line">    id[<span class="number">19</span>] = id[<span class="number">20</span>] = id[<span class="number">21</span>] = <span class="string">&apos;8&apos;</span>;</span><br><span class="line">    id[<span class="number">22</span>] = id[<span class="number">23</span>] = id[<span class="number">24</span>] = id[<span class="number">25</span>] = <span class="string">&apos;9&apos;</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line">        dic.init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">            match[i] = dic.insert(s);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) {</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">            <span class="keyword">char</span> change[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; ++j) change[j] = id[s[j] - <span class="string">&apos;a&apos;</span>];</span><br><span class="line">            change[len] = <span class="string">&apos;\0&apos;</span>;</span><br><span class="line">            dic.update(change);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dic.cnt[match[i]]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
<h4 id="e"><a href="#E" class="headerlink" title="E"></a>E</h4><p>&#x7ED9;&#x51FA;&#x6BCF;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x5BF9;&#x5E94;&#x4E32;&#xFF0C;&#x8FDB;&#x884C;&#x8BED;&#x53E5;&#x7FFB;&#x8BD1;&#x3002;</p>
<p>&#x5E94;&#x8BE5;&#x4E5F;&#x53EF;&#x4EE5;<code>map</code>&#x505A;&#x7684;&#x3002;<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NUM = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> match[MAX];</span><br><span class="line"><span class="keyword">int</span> child[MAX][NUM];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span> {</span></span><br><span class="line">    <span class="keyword">int</span> tot, root;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="built_in">memset</span>(child[<span class="number">1</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> (child[<span class="number">1</span>]));</span><br><span class="line">        root = tot = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str, <span class="keyword">const</span> <span class="keyword">char</span>* rhs)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> *cur = &amp;root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">char</span>* p = str; *p; ++p) {</span><br><span class="line">            cur = &amp;child[*cur][*p - <span class="string">&apos;a&apos;</span>];</span><br><span class="line">            <span class="keyword">if</span> (*cur == <span class="number">0</span>) {</span><br><span class="line">                *cur = ++tot;</span><br><span class="line">                <span class="built_in">memset</span>(child[tot], <span class="number">0</span>, <span class="keyword">sizeof</span> (child[tot]));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        match[*cur] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(rhs);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) match[*cur] += rhs[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">query</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> *cur = &amp;root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">char</span>* p = str; *p; ++p) {</span><br><span class="line">            cur = &amp;child[*cur][*p - <span class="string">&apos;a&apos;</span>];</span><br><span class="line">            <span class="keyword">if</span> (*cur == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> match[*cur];</span><br><span class="line">    }</span><br><span class="line">} dic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">3010</span>], b[<span class="number">3010</span>], read[<span class="number">3010</span>];</span><br><span class="line"><span class="built_in">string</span> ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    dic.init();</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, a)) <span class="keyword">if</span> (<span class="built_in">strcmp</span>(a, <span class="string">&quot;START&quot;</span>) == <span class="number">0</span>) <span class="keyword">break</span>; </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, a);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(a, <span class="string">&quot;END&quot;</span>) == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, b);</span><br><span class="line">        dic.insert(b, a);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (gets(read)) <span class="keyword">if</span> (<span class="built_in">strcmp</span>(read, <span class="string">&quot;START&quot;</span>) == <span class="number">0</span>) <span class="keyword">break</span>; </span><br><span class="line">    <span class="keyword">while</span> (gets(read)) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(read, <span class="string">&quot;END&quot;</span>) == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(read), num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) {</span><br><span class="line">            <span class="keyword">if</span> (read[i] &lt; <span class="string">&apos;a&apos;</span> || read[i] &gt; <span class="string">&apos;z&apos;</span>) {</span><br><span class="line">                <span class="keyword">if</span> (num) {</span><br><span class="line">                    a[num] = <span class="string">&apos;\0&apos;</span>;</span><br><span class="line">                    <span class="built_in">string</span> change = dic.query(a);</span><br><span class="line">                    <span class="keyword">if</span> (change == <span class="string">&quot;&quot;</span>) {</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num; ++j) ans += a[j];</span><br><span class="line">                    } <span class="keyword">else</span> ans += change;</span><br><span class="line">                    num = <span class="number">0</span>;</span><br><span class="line">                }</span><br><span class="line">                ans += read[i];</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                a[num++] = read[i];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        ans += <span class="string">&apos;\n&apos;</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> len = ans.length();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) <span class="built_in">putchar</span>(ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
<h4 id="f"><a href="#F" class="headerlink" title="F"></a>F</h4><p>&#x8FD8;&#x662F;&#x6839;&#x636E;&#x624B;&#x673A;&#x952E;&#x76D8;&#x4E0A;&#x7684;&#x6570;&#x5B57;&#x548C;&#x5B57;&#x6BCD;&#x7684;&#x5BF9;&#x5E94;&#x5173;&#x7CFB;&#x3002;&#x7ED9;&#x51FA;&#x6BCF;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x9891;&#x7387;&#xFF0C;&#x7136;&#x540E;&#x8F93;&#x51FA;&#x5F53;&#x6253;&#x5165;&#x6BCF;&#x4E2A;&#x6570;&#x5B57;&#x4E32;&#x65F6;&#xFF0C;&#x6309;&#x7167;&#x9891;&#x7387;&#x663E;&#x793A;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x3002;</p>
<p>&#x8981;&#x8003;&#x8651;&#x524D;&#x7F00;&#x53E0;&#x52A0;&#x3002;&#x5148;&#x628A;&#x6240;&#x6709;&#x4E32;&#x63D2;&#x8FDB;&#x5B57;&#x5178;&#x6811;&#xFF0C;&#x7136;&#x540E;<code>dfs</code>&#x5224;&#x65AD;&#x6240;&#x6709;&#x957F;&#x5EA6;&#x7684;&#x5B57;&#x6BCD;&#x4E32;&#x3002;<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NUM = <span class="number">26</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> match[<span class="number">15</span>][<span class="number">5</span>] = {<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>, <span class="string">&quot;ghi&quot;</span>, <span class="string">&quot;jkl&quot;</span>, </span><br><span class="line"><span class="string">&quot;mno&quot;</span>, <span class="string">&quot;pqrs&quot;</span>, <span class="string">&quot;tuv&quot;</span>, <span class="string">&quot;wxyz&quot;</span>};</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> child[MAX][NUM], cnt[MAX], Max;</span><br><span class="line"><span class="keyword">char</span> store[<span class="number">110</span>], ans[<span class="number">110</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span> {</span></span><br><span class="line">    <span class="keyword">int</span> tot, root;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="built_in">memset</span>(child[<span class="number">1</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> (child[<span class="number">1</span>]));</span><br><span class="line">        tot = root = <span class="number">1</span>; cnt[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span>* str, <span class="keyword">const</span> <span class="keyword">int</span> num)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span>* cur = &amp;root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">char</span>* p = str; *p; ++p) {</span><br><span class="line">            cur = &amp;child[*cur][*p - <span class="string">&apos;a&apos;</span>];</span><br><span class="line">            <span class="keyword">if</span> (*cur == <span class="number">0</span>) {</span><br><span class="line">                *cur = ++tot;</span><br><span class="line">                <span class="built_in">memset</span>(child[tot], <span class="number">0</span>, <span class="keyword">sizeof</span> (child[tot]));</span><br><span class="line">                cnt[tot] = <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">            cnt[*cur] += num;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">} dic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, m, cases = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">char</span>* str, <span class="keyword">int</span> cur, <span class="keyword">int</span> limit, <span class="keyword">int</span>&amp; flag)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (cnt[x] == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (cur &gt;= limit) {</span><br><span class="line">        <span class="keyword">if</span> (cnt[x] &gt; Max) {</span><br><span class="line">            Max = cnt[x];</span><br><span class="line">            <span class="built_in">memcpy</span>(ans, store, <span class="keyword">sizeof</span> (store));</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> now = str[cur] - <span class="string">&apos;0&apos;</span>, K = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (now == <span class="number">7</span> || now == <span class="number">9</span>) K = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i) {</span><br><span class="line">        store[cur] = match[now][i], store[cur + <span class="number">1</span>] = <span class="string">&apos;\0&apos;</span>;</span><br><span class="line">        dfs(child[x][match[now][i] - <span class="string">&apos;a&apos;</span>], str, cur + <span class="number">1</span>, limit, flag);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">char</span> str[<span class="number">110</span>];</span><br><span class="line">        dic.init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">            <span class="keyword">int</span> num;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s%d&quot;</span>, str, &amp;num);</span><br><span class="line">            dic.insert(str, num);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Scenario #%d:\n&quot;</span>, ++cases);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) {</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">            <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span>; ++j) {</span><br><span class="line">                Max = <span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">                dfs(dic.root, str, <span class="number">0</span>, j + <span class="number">1</span>, flag);</span><br><span class="line">                <span class="keyword">if</span> (flag) <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, ans);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;MANUALLY\n&quot;</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&apos;\n&apos;</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&apos;\n&apos;</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
<h4 id="g"><a href="#G" class="headerlink" title="G"></a>G</h4><p>&#x7EDF;&#x8BA1;&#x524D;&#x7F00;&#x4E32;&#x7684;&#x4E2A;&#x6570;&#xFF0C;&#x7565;&#x3002;</p>
<h4 id="h"><a href="#H" class="headerlink" title="H"></a>H</h4><p>&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;$n*m(n,m\in [20,500])$&#x7684;&#x5B57;&#x6BCD;&#x8868;&#xFF0C;&#x5BF9;&#x6BCF;&#x4E2A;&#x8BE2;&#x95EE;&#x4E32;&#x8F93;&#x51FA;&#x5B83;&#x5728;&#x5B57;&#x6BCD;&#x8868;&#x4E2D;&#x7684;&#x4F4D;&#x7F6E;&#x3002;&#x53EF;&#x4EE5;&#x4ECE;&#x67D0;&#x4E2A;&#x4F4D;&#x7F6E;&#x4E00;&#x76F4;&#x5411;&#x53F3;&#xFF0C;&#x4E00;&#x76F4;&#x5411;&#x53F3;&#x4E0B;&#x67E5;&#x627E;&#x6216;&#x8005;&#x4E00;&#x76F4;&#x5411;&#x4E0B;&#xFF0C;&#x8F93;&#x51FA;&#x6700;&#x5DE6;&#x4E0A;&#x7684;&#x8D77;&#x59CB;&#x4F4D;&#x7F6E;&#x3002;&#x67E5;&#x627E;&#x4E0D;&#x5230;&#x8F93;&#x51FA;$(-1,-1)$&#x3002;</p>
<p>&#x5148;&#x628A;&#x6240;&#x6709;&#x7684;&#x8BE2;&#x95EE;&#x4E32;&#x521B;&#x5EFA;&#x5B57;&#x5178;&#x6811;&#xFF0C;&#x7136;&#x540E;&#x626B;&#x63CF;&#x5B57;&#x6BCD;&#x8868;&#xFF0C;&#x770B;&#x5B57;&#x6BCD;&#x8868;&#x4E2D;&#x7684;&#x4E32;&#x662F;&#x5426;&#x6709;&#x5728;&#x5B57;&#x5178;&#x6811;&#x4E2D;&#x51FA;&#x73B0;&#x3002;<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NUM = <span class="number">26</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = {{<span class="number">0</span>, <span class="number">1</span>}, {<span class="number">1</span>, <span class="number">1</span>}, {<span class="number">1</span>, <span class="number">0</span>}};</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> child[MAX][NUM], bel[MAX];</span><br><span class="line"><span class="keyword">char</span> mat[<span class="number">510</span>][<span class="number">510</span>];</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; ans[<span class="number">10010</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span> {</span></span><br><span class="line">    <span class="keyword">int</span> tot, root;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="built_in">memset</span>(child[<span class="number">1</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> (child[<span class="number">1</span>]));</span><br><span class="line">        tot = root = <span class="number">1</span>; bel[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str, <span class="keyword">const</span> <span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span>* cur = &amp;root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">char</span>* p = str; *p; ++p) {</span><br><span class="line">            cur = &amp;child[*cur][*p - <span class="string">&apos;A&apos;</span>];</span><br><span class="line">            <span class="keyword">if</span> (*cur == <span class="number">0</span>) {</span><br><span class="line">                *cur = ++tot;</span><br><span class="line">                <span class="built_in">memset</span>(child[tot], <span class="number">0</span>, <span class="keyword">sizeof</span> (child[tot]));</span><br><span class="line">                bel[tot] = <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        bel[*cur] = id;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> x, <span class="keyword">const</span> <span class="keyword">int</span> y, <span class="keyword">const</span> <span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> step = <span class="number">0</span>, tmpx = x, tmpy = y;</span><br><span class="line">        <span class="keyword">int</span>* cur = &amp;root;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">if</span> (step &gt; <span class="number">20</span> || tmpx &gt;= n || tmpy &gt;= m) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">char</span> ch = mat[tmpx][tmpy];</span><br><span class="line">            cur = &amp;child[*cur][ch - <span class="string">&apos;A&apos;</span>];</span><br><span class="line">            <span class="keyword">if</span> (*cur == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">int</span> pos = bel[*cur];</span><br><span class="line">            <span class="keyword">if</span> (pos != <span class="number">0</span> &amp;&amp; ans[pos].first == <span class="number">-1</span>) ans[pos] = make_pair(x, y);</span><br><span class="line">            tmpx += dir[id][<span class="number">0</span>], tmpy += dir[id][<span class="number">1</span>];</span><br><span class="line">            step++; </span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">} dic;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, mat[i]);</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">20</span>];</span><br><span class="line">    getchar(); getchar();</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    dic.init();</span><br><span class="line">    <span class="keyword">while</span> (gets(str) &amp;&amp; str[<span class="number">0</span>] != <span class="string">&apos;-&apos;</span>) {</span><br><span class="line">        dic.insert(str, ++num);</span><br><span class="line">        ans[num] = make_pair(<span class="number">-1</span>, <span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">3</span>; ++k) {</span><br><span class="line">                dic.query(i, j, k);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; ++i) <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, ans[i].first, ans[i].second);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
<h4 id="i"><a href="#I" class="headerlink" title="I"></a>I</h4><p>&#x7ED9;&#x51FA;$n\leq  10^5$&#x4E2A;&#x6B63;&#x6574;&#x6570;$a_i$&#xFF0C;&#x7136;&#x540E;$m\leq 10^5$&#x4E2A;&#x8BE2;&#x95EE;&#xFF0C;&#x8F93;&#x51FA;&#x4E0E;$b_i$&#x5F02;&#x6216;&#x503C;&#x6700;&#x5927;&#x7684;$a_j$&#x3002;&#x6240;&#x6709;&#x6B63;&#x6574;&#x6570;&#x4E0D;&#x8D85;&#x8FC7;$2^{32}$&#x3002;</p>
<p>&#x628A;&#x6240;&#x6709;$a_i$&#x4ECE;&#x9AD8;&#x4F4D;&#x5F00;&#x59CB;&#x63D2;&#x8FDB;&#x5B57;&#x5178;&#x6811;&#xFF0C;&#x8D2A;&#x5FC3;&#x67E5;&#x627E;&#x3002;<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">3200010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NUM = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tot, root;</span><br><span class="line"><span class="keyword">int</span> child[MAX][NUM];</span><br><span class="line">ll value[MAX];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span> {</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">        tot = root = <span class="number">1</span>;</span><br><span class="line">        child[<span class="number">1</span>][<span class="number">0</span>] = child[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> ll x)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span>* cur = &amp;root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">32</span>; i &gt;= <span class="number">0</span>; --i) {</span><br><span class="line">            cur = &amp;child[*cur][(x &gt;&gt; i) &amp; <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (*cur == <span class="number">0</span>) {</span><br><span class="line">                *cur = ++tot;</span><br><span class="line">                child[tot][<span class="number">0</span>] = child[tot][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                value[tot] = <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        value[*cur] = x;</span><br><span class="line">    }</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">const</span> ll x)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> *cur = &amp;root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">32</span>; i &gt;= <span class="number">0</span>; --i) {</span><br><span class="line">            <span class="keyword">if</span> (((x &gt;&gt; i) &amp; <span class="number">1</span>) == <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">if</span> (child[*cur][<span class="number">1</span>] != <span class="number">0</span>) cur = &amp;child[*cur][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">else</span> cur = &amp;child[*cur][<span class="number">0</span>];</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">if</span> (child[*cur][<span class="number">0</span>] != <span class="number">0</span>) cur = &amp;child[*cur][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">else</span> cur = &amp;child[*cur][<span class="number">1</span>];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> value[*cur];</span><br><span class="line">    }</span><br><span class="line">} dic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, m, cases = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        dic.init();</span><br><span class="line">        ll tmp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;tmp);</span><br><span class="line">            dic.insert(tmp);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case #%d:\n&quot;</span>, ++cases);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) {</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;tmp);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, dic.query(tmp));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
<h4 id="j"><a href="#J" class="headerlink" title="J"></a>J</h4><p>&#x5B9E;&#x9645;&#x4E0A;&#x662F;&#x4E2A;&#x6700;&#x77ED;&#x8DEF;&#x3002;&#x53EA;&#x662F;&#x7ED9;&#x6BCF;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x5EFA;&#x4E2A;&#x5B57;&#x5178;&#x6811;&#xFF0C;&#x7136;&#x540E;&#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x5426;&#x51FA;&#x73B0;&#x8FC7;&#xFF0C;<code>map</code>&#x4E5F;&#x53EF;&#x4EE5;&#x3002;&#x6CE8;&#x610F;&#x5EFA;&#x53CC;&#x5411;&#x8FB9;&#xFF0C;&#x8DD1;&#x4E00;&#x4E0B;<code>SPFA</code>&#x5C31;&#x884C;&#x4E86;&#x3002;<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NUM = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">20010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> child[MAX][NUM], id[MAX];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span> {</span></span><br><span class="line">    <span class="keyword">int</span> tot, root, left;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="built_in">memset</span>(child[<span class="number">1</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> (child[<span class="number">1</span>]));</span><br><span class="line">        id[<span class="number">1</span>] = left = <span class="number">0</span>, root = tot = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span>* cur = &amp;root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">char</span>* p = str; *p; ++p) {</span><br><span class="line">            cur = &amp;child[*cur][*p];</span><br><span class="line">            <span class="keyword">if</span> (*cur == <span class="number">0</span>) {</span><br><span class="line">                *cur = ++tot;</span><br><span class="line">                <span class="built_in">memset</span>(child[tot], <span class="number">0</span>, <span class="keyword">sizeof</span> (child[tot]));</span><br><span class="line">                id[*cur] = <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (id[*cur] == <span class="number">0</span>) id[*cur] = ++left;</span><br><span class="line">        <span class="keyword">return</span> id[*cur];</span><br><span class="line">    }</span><br><span class="line">} dic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, edge_num, st, ed;</span><br><span class="line"><span class="keyword">int</span> head[MAX_N], dis[MAX_N], vis[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> {</span></span><br><span class="line">    <span class="keyword">int</span> v, w, next;</span><br><span class="line"></span><br><span class="line">    Edge() {}</span><br><span class="line">    Edge(<span class="keyword">int</span> _v, <span class="keyword">int</span> _w, <span class="keyword">int</span> _next): v(_v), w(_w), next(_next) {}</span><br><span class="line">} edge[MAX_N * <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>{</span><br><span class="line">    edge[edge_num] = Edge(v, w, head[u]);</span><br><span class="line">    head[u] = edge_num++;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= dic.left; ++i) dis[i] = inf;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> (vis));</span><br><span class="line">    dis[st] = <span class="number">0</span>, vis[st] = <span class="number">1</span>;</span><br><span class="line">    que.push(st);</span><br><span class="line">    <span class="keyword">while</span> (!que.empty()) {</span><br><span class="line">        <span class="keyword">int</span> u = que.front(); que.pop();</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i != <span class="number">-1</span>; i = edge[i].next) {</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].v, w = edge[i].w;</span><br><span class="line">            <span class="keyword">if</span> (dis[u] &lt; inf &amp;&amp; dis[u] + w &lt; dis[v]) {</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">                <span class="keyword">if</span> (!vis[v]) {</span><br><span class="line">                    vis[v] = <span class="number">1</span>;</span><br><span class="line">                    que.push(v);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (dis[ed] == inf) dis[ed] = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dis[ed]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) &amp;&amp; n != <span class="number">-1</span>) {</span><br><span class="line">        dic.init();</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> (head));</span><br><span class="line">        edge_num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> a[<span class="number">40</span>], b[<span class="number">40</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        st = dic.insert(a), ed = dic.insert(b);</span><br><span class="line">        <span class="keyword">int</span> cost, ida, idb;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s%s%d&quot;</span>, a, b, &amp;cost);</span><br><span class="line">            ida = dic.insert(a), idb = dic.insert(b);</span><br><span class="line">            AddEdge(ida, idb, cost);</span><br><span class="line">            AddEdge(idb, ida, cost);</span><br><span class="line">        }</span><br><span class="line">        SPFA();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
<h4 id="k"><a href="#K" class="headerlink" title="K"></a>K</h4><p>&#x5224;&#x65AD;&#x662F;&#x5426;&#x5B58;&#x5728;&#x4E00;&#x4E2A;&#x4E32;&#x662F;&#x53E6;&#x4E00;&#x4E2A;&#x4E32;&#x7684;&#x524D;&#x7F00;&#x3002;</p>
<h4 id="l"><a href="#L" class="headerlink" title="L"></a>L</h4><p>&#x8BF4;&#x4E86;&#x4E00;&#x5927;&#x4E32;&#xFF0C;&#x5176;&#x5B9E;&#x5C31;&#x662F;&#x628A;&#x6BCF;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x53BB;&#x9664;&#x524D;&#x5BFC;0&#x540E;&#xFF0C;&#x7EDF;&#x8BA1;&#x51FA;&#x73B0;&#x6B21;&#x6570;&#x6700;&#x591A;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x4E2A;&#x6570;&#x3002;</p>
<h4 id="m"><a href="#M" class="headerlink" title="M"></a>M</h4><p>&#x7C7B;&#x4F3C;H&#x3002;</p>
<h4 id="n"><a href="#N" class="headerlink" title="N"></a>N</h4><p>&#x5224;&#x65AD;&#x662F;&#x5426;&#x5B58;&#x5728;&#x4E00;&#x4E2A;&#x4E32;&#x662F;&#x53E6;&#x4E00;&#x4E2A;&#x4E32;&#x7684;&#x524D;&#x7F00;&#x3002;</p>
<h4 id="o"><a href="#O" class="headerlink" title="O"></a>O</h4><p>&#x5E76;&#x67E5;&#x96C6;+&#x5B57;&#x5178;&#x6811;&#x6216;&#x8005;<code>map</code>&#x7EDF;&#x8BA1;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x5426;&#x51FA;&#x73B0;&#x3002;</p>
<h4 id="hdu-5536"><a href="#HDU-5536" class="headerlink" title="HDU 5536"></a>HDU 5536</h4><p>&#x7ED9;$n\leq 1000$&#x4E2A;$\leq 1e9$&#x7684;&#x6B63;&#x6574;&#x6570;$a_i$&#xFF0C;&#x4ECE;&#x4E2D;&#x627E;&#x5230;&#x4E09;&#x4E2A;&#x4E92;&#x4E0D;&#x76F8;&#x540C;&#x7684;$a_i,a_j,a_k$&#x4F7F;&#x5F97;$(a_i+a_j)\otimes a_k$&#x6700;&#x5927;&#x3002;&#x8F93;&#x51FA;&#x6700;&#x5927;&#x503C;&#x3002;$\otimes$&#x8868;&#x793A;&#x5F02;&#x6216;&#x3002;</p>
<p>&#x7C7B;&#x4F3C;I&#x9898;&#xFF0C;&#x53EA;&#x8981;&#x518D;&#x652F;&#x6301;&#x4E00;&#x4E2A;&#x5220;&#x9664;&#x64CD;&#x4F5C;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#xFF0C;&#x56E0;&#x4E3A;&#x8981;&#x4FDD;&#x8BC1;&#x4E92;&#x4E0D;&#x76F8;&#x540C;&#x3002;</p>
<p>&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;$O(n^2 * 30)$&#xFF0C;&#x518D;&#x4E58;&#x4E0A;&#x4E00;&#x4E2A;&#x5FAE;&#x5C0F;&#x7684;&#x5E38;&#x6570;&#x3002;<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NUM = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> child[MAX][NUM], cnt[MAX];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span> {</span></span><br><span class="line">    <span class="keyword">int</span> root, tot;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">        root = tot = <span class="number">1</span>;</span><br><span class="line">        child[<span class="number">1</span>][<span class="number">0</span>] = child[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        cnt[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span>* cur = &amp;root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; --i) {</span><br><span class="line">            cur = &amp;child[*cur][(x &gt;&gt; i) &amp; <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (*cur == <span class="number">0</span>) {</span><br><span class="line">                *cur = ++tot;</span><br><span class="line">                child[tot][<span class="number">0</span>] = child[tot][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                cnt[tot] = <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">            cnt[*cur]++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span>* cur = &amp;root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; --i) {</span><br><span class="line">            cur = &amp;child[*cur][(x &gt;&gt; i) &amp; <span class="number">1</span>];</span><br><span class="line">            cnt[*cur]--;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>* cur = &amp;root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; --i) {</span><br><span class="line">            <span class="keyword">int</span> now = (x &gt;&gt; i) &amp; <span class="number">1</span>, store = *cur;</span><br><span class="line">            <span class="keyword">if</span> (now == <span class="number">0</span>) {</span><br><span class="line">                cur = &amp;child[*cur][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (cnt[*cur]) ret += (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">                <span class="keyword">else</span> cur = &amp;child[store][<span class="number">0</span>];</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                cur = &amp;child[*cur][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (cnt[*cur]) ret += (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">                <span class="keyword">else</span> cur = &amp;child[store][<span class="number">1</span>];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line">} dic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n;</span><br><span class="line"><span class="keyword">int</span> a[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        dic.init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">            dic.insert(a[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">            dic.remove(a[i]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j) {</span><br><span class="line">                dic.remove(a[j]);</span><br><span class="line">                ans = max(ans, dic.query(a[i] + a[j]));</span><br><span class="line">                dic.insert(a[j]);</span><br><span class="line">            }</span><br><span class="line">            dic.insert(a[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;字典树(Trie)用来解决字符串前缀，判断字符串是否出现，异或等相关问题。用空间换取时间。&lt;/p&gt;
    
    </summary>
    
      <category term="齐东语" scheme="http://yoursite.com/categories/%E9%BD%90%E4%B8%9C%E8%AF%AD/"/>
    
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="HDU" scheme="http://yoursite.com/tags/HDU/"/>
    
      <category term="字典树" scheme="http://yoursite.com/tags/%E5%AD%97%E5%85%B8%E6%A0%91/"/>
    
      <category term="SPFA" scheme="http://yoursite.com/tags/SPFA/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces #379F (x&amp;y + x|y = x + y)</title>
    <link href="http://yoursite.com/2016/11/17/Codeforces-379F-x-y-x-y-x-y/"/>
    <id>http://yoursite.com/2016/11/17/Codeforces-379F-x-y-x-y-x-y/</id>
    <published>2016-11-17T12:14:20.000Z</published>
    <updated>2016-11-17T12:28:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#x5B9A;&#x4E49;<br>$$<br>b_i = \sum_{r=1}^{r=n}a_r $ a_i \qquad c_i=\sum_{r=1}^{r=n}a_r | a_i<br>$$<br>$\$ $&#x8868;&#x793A;&#x4E8C;&#x8FDB;&#x5236;&#x4E0E;&#x8FD0;&#x7B97;&#xFF0C;&#x7ED9;&#x51FA;&#x6570;&#x7EC4;$b[]$&#x548C;$c[]$&#xFF0C;&#x8F93;&#x51FA;&#x6570;&#x7EC4;$a[]$&#xFF0C;&#x65E0;&#x89E3;&#x8F93;&#x51FA;-1&#x3002;&#x6570;&#x7EC4;&#x957F;&#x5EA6;$\leq  2e5$&#xFF0C;$b_i, c_i\in [1,1e9]$&#x3002;<br><a id="more"></a><br>&#x7531;&#x4E8E;<br>$$<br>\underline{(x \$  y) + (x | y) = x + y}<br>$$<br>&#x90A3;&#x4E48;<br>$$<br>b_i + c_i = \sum_{r=1}^{r=n}{a_r+a_i} = sum+na_i<br>$$<br>&#x5176;&#x4E2D;<br>$$<br>sum=\sum_{r=1}^{r=n}{a_r}<br>$$<br>&#x6240;&#x4EE5;&#x6709;&#xFF1A;<br>$$<br>\sum_{i=1}^{i=n}{b_i+c_i}=\sum_{i=1}^{i=n}{na_i+sum} = 2n*sum<br>$$<br>&#x518D;&#x53CD;&#x89E3;&#x4E00;&#x4E0B;&#x5C31;&#x53EF;&#x4EE5;&#x51FA;&#x6765;$a_i$&#x4E86;&#x3002;</p>
<p>&#x4F46;&#x662F;&#x8FD8;&#x8981;&#x6CE8;&#x610F;&#x8981;&#x9A8C;&#x8BC1;&#x80FD;&#x5426;&#x7531;$a_i$&#x5F97;&#x5230;$b_i$&#x548C;$c_i$&#xFF01;&#xFF01;&#xFF01;&#xFF01;&#xFF01;</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">70</span>];</span><br><span class="line">ll a[MAX_N], b[MAX_N], c[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">if</span> ((b[<span class="number">1</span>] | b[<span class="number">1</span>]) == c[<span class="number">1</span>]) {</span><br><span class="line">            a[<span class="number">1</span>] = b[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    ll sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">        sum += b[i] + c[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (sum % (<span class="number">2</span> * n)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    sum /= (<span class="number">2</span> * n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">        ll left = b[i] + c[i]  - sum;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; <span class="number">0</span> || left % n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        a[i] = left / n;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> (cnt));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">60</span>; ++j) {</span><br><span class="line">            <span class="keyword">if</span> ((a[i] &gt;&gt; j) &amp; <span class="number">1</span>) cnt[j]++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">        ll tb = <span class="number">0</span>, tc = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">60</span>; ++j) {</span><br><span class="line">            <span class="keyword">if</span> ((a[i] &gt;&gt; j) &amp; <span class="number">1</span>) {</span><br><span class="line">                tb += <span class="number">1l</span>l * cnt[j] * (<span class="number">1l</span>l &lt;&lt; j);</span><br><span class="line">                tc += <span class="number">1l</span>l * n * (<span class="number">1l</span>l &lt;&lt; j);</span><br><span class="line">            } <span class="keyword">else</span> tc += <span class="number">1l</span>l * cnt[j] * (<span class="number">1l</span>l &lt;&lt; j);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (tb != b[i] || tc != c[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n)) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;b[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;c[i]);</span><br><span class="line">        <span class="keyword">if</span> (solve() == <span class="literal">false</span>) <span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, a[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;定义&lt;br&gt;$$&lt;br&gt;b_i = \sum_{r=1}^{r=n}a_r $ a_i \qquad c_i=\sum_{r=1}^{r=n}a_r | a_i&lt;br&gt;$$&lt;br&gt;$\$ $表示二进制与运算，给出数组$b[]$和$c[]$，输出数组$a[]$，无解输出-1。数组长度$\leq  2e5$，$b_i, c_i\in [1,1e9]$。&lt;br&gt;
    
    </summary>
    
      <category term="思无涯" scheme="http://yoursite.com/categories/%E6%80%9D%E6%97%A0%E6%B6%AF/"/>
    
    
      <category term="Codeforces" scheme="http://yoursite.com/tags/Codeforces/"/>
    
  </entry>
  
</feed>
